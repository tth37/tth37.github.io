{"pages":[{"title":"算法学习-背包类树形dp","text":"7U9Zc3T2ei","link":"/baidu_verify_7U9Zc3T2ei.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"留言板","text":"","link":"/message/index.html"},{"title":"To-Do List","text":"Update: 2019/6/30 雅礼集训专题 「雅礼集训 2018 Day7」A 「雅礼集训 2018 Day8」A 归档 树形图来源：dlzt 【题目】luogu-p1270 【题目】luogu-p1364 【题目】luogu-p2607 动态规划 【题目】luogu-p4159 【题目】luogu-p3204 动态规划专题来源：zhangz 0. 线性动态规划 【题目】打鼹鼠 【题目】过河 【题目】挤奶时间 【题目】演讲时间 【题目】最大子段和 1. 枚举型动态规划 【题目】雇佣计划 【题目】滑雪课 【题目】接苹果 2. 区间类动态规划 【题目】乘法游戏 【题目】加分二叉树 【题目】删数 【题目】租用游艇问题 3.最长单调不上升子序列 【题目】合唱队形 【题目】拦截导弹 【题目】尼克的任务 【题目】圣诞树 【题目】挖地雷 归档 日常 【题解】luogu-p5283-异或粽子 【题解】luogu-p4559-列队 【题目】luogu-p2048-超级钢琴 【题目】luogu-p3402-可持久化并查集（R） 【博客】可持久化数据结构（R） 【博客】异或那些事儿 【题解】CF1119C-Ramesses and Corner Inversion 【博客】向hjr巨佬催稿【轻松一下~hjr巨佬的prufer编码】 【博客】向hjr巨佬催稿 【算法学习-数学专题-素数的判定】 【题目】luogu-p2827-蚯蚓 【博客】数学期望那些事儿 【题目】loj-6584-Hobson的火车 【网站维护】添加版权声明模块 动规专题 【题目】luogu-p2679-子串 【题目】luogu-p1850-换教室 【题目】luogu-p1099-树网的核 【博客】题目列表-动态规划（4/23） 【题目】luogu-p1052-过河 【题目】luogu-p1026-统计单词个数 【博客】题目列表-动态规划（4/24） 【题目】luogu-p2473-奖励关 【题目】luogu-p1273-有线电视网 【题目】luogu-p1070-道路游戏 【题目】luogu-p1169-棋盘制作 【题解】luogu-p1169-棋盘制作 【题解】luogu-p1070-道路游戏 【博客】题目列表-动态规划（5/7） 数据结构专题（咕咕咕） 【题目】luogu-p3293-美味 【题目】luogu-p3168-任务查询系统 【题目】luogu-p1471-方差 图论专题 【题目】luogu-p3831-回家的路 【题目】luogu-p1600-天天爱跑步 【题目】luogu-p3953-逛公园","link":"/schedule/index.html"},{"title":"source","text":"Online Judge 洛谷 POJ HduOJ BzOJ LOJ Codeforces *SzOI Link Typora — a markdown editor, markdown reader.","link":"/source/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"","text":"Bookmark for NexT Introduce Bookmark is a plugin that allow the users save their reading position. The users could just click the bookmark icon (like 🔖) in left-top of the page to save the position. And when they visit your blog in the next time, they can continue the last reading position by clicking the bookmark icon from the home page. Installation If you want to use the CDN instead of clone this repo, please jump to the Step 3. Step 1 &rarr; Go to NexT dir Change dir to NexT directory. There must be layout, source, languages and other directories: 123$ cd themes/next$ lsbower.json _config.yml docs gulpfile.coffee languages layout LICENSE.md package.json README.md scripts source test Step 2 &rarr; Get module Install module to source/lib directory: 1$ git clone https://github.com/theme-next/theme-next-bookmark.git source/lib/bookmark Step 3 &rarr; Set it up Enable module in NexT _config.yml file: 1bookmark: true And, if you wants to use the CDN, then need to set: 123vendors: ... bookmark: https://cdn.jsdelivr.net/gh/theme-next/theme-next-bookmark@latest/bookmark.min.js Update 12$ cd themes/next/source/lib/bookmark$ git pull","link":"/lib/bookmark/README.html"},{"title":"","text":"(function (global) { 'use strict'; var storage = global.localStorage; if (storage == null) { // if the localStorage is not exists storage = { // eslint-disable-next-line getItem: function () { return null }, setItem: function () { }, removeItem: function () { }, clear: function () { }, }; } // get the saved bookmark object var getBookmark = function () { var mark = storage.getItem('bookmark'); if (mark == null) { return null; } try { return JSON.parse(mark); } catch (e) { // invalid object saved in the storage // console.warn('Invalid bookmark object.'); return null; } }; var link; // register everything var init = function () { // bookmark-link style var style = global.document.createElement('style'); style.type = 'text/css'; var text = '.book-mark-link{' + 'border-bottom:none;' + 'display:block;' + 'position:fixed;' + 'color:#222;' + 'font-size:26px !important;' + 'top:-10px;left:20px;' + 'transition:.3s;' + '}' + '.book-mark-link:hover,.book-mark-link-fixed{top:-2px}' // do not show when the width is not enough + '@media(max-width:1090px){.book-mark-link{display:none}}'; text = global.document.createTextNode(text); style.appendChild(text); global.document.head.appendChild(style); // create a link element // eslint-disable-next-line max-len link = $(''); $(global.document.body).append(link); var currentTop = 0; // scroll event $(global).on('scroll.bookmark', function () { var top = global.document.documentElement.scrollTop; if (top > 0) { if (currentTop === 0) { link.removeClass('book-mark-link-fixed'); currentTop = top; } } else { if (currentTop > 0) { !link.hasClass('book-mark-link-fixed') && link.addClass('book-mark-link-fixed'); currentTop = 0; } } }); }; var loadBookmark = function () { var mark = getBookmark(); if (mark == null) { return; } // found the bookmark $(function () { init(); link.attr('href', mark.lastUri + '#book:mark'); }); }; var doScroll = function (top) { if (!isNaN(top)) { $(function () { // eslint-disable-next-line max-len $(global.document.documentElement).animate({ 'scrollTop': top }, 'fast'); }); } }; var doSaveScroll = function (path, mark) { if (mark == null) { mark = {}; } var top = global.document.documentElement.scrollTop; mark.lastUri = path; mark[path] = top; storage.setItem('bookmark', JSON.stringify(mark)); link.animate({ top: -26 }, 'fast', function () { setTimeout(function () { link.css('top', ''); }, 400); }); return mark; }; var scrollToMark = function (trigger, hash) { var path = global.location.pathname; var mark = getBookmark(); $(function () { init(); // save the position by clicking the icon link.click(function () { mark = doSaveScroll(path, mark); return false; }); // register beforeunload event when the trigger is auto if (trigger === 'auto') { // register beforeunload event global.addEventListener('beforeunload', function () { doSaveScroll(path, mark); }); } // auto scroll to the position if (mark == null) { return; } // and if the page opens with a specific hash, just jump out var skips = [hash, '#comments']; // eslint-disable-next-line if (skips.filter(function (h) { return h === global.location.hash }).length > 0) { return; } doScroll(mark[path]); }); }; global.bookmark = { loadBookmark: loadBookmark, scrollToMark: scrollToMark, }; })(window);","link":"/lib/bookmark/index.js"},{"title":"","text":"{\"name\":\"theme-next-bookmark\",\"version\":\"1.0.2\",\"description\":\"A plugin of local-bookmarks for NexT theme.\",\"main\":\"index.js\",\"scripts\":{\"test\":\"eslint index.js\",\"dist\":\"eslint index.js && uglifyjs --compress --mangle -o bookmark.min.js -- index.js\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/theme-next/theme-next-bookmark.git\"},\"keywords\":[\"hexo\",\"theme-next\",\"plugin\",\"bookmark\"],\"author\":\"Tsanie Lily\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/theme-next/theme-next-bookmark/issues\"},\"homepage\":\"https://github.com/theme-next/theme-next-bookmark#readme\",\"devDependencies\":{\"eslint\":\"^4.17.0\",\"eslint-config-google\":\"^0.9.1\",\"uglify-js\":\"^3.3.10\"}}","link":"/lib/bookmark/package.json"},{"title":"","text":"!function(o){\"use strict\";var n=o.localStorage;null==n&&(n={getItem:function(){return null},setItem:function(){},removeItem:function(){},clear:function(){}});var t,e=function(){var o=n.getItem(\"bookmark\");if(null==o)return null;try{return JSON.parse(o)}catch(o){return null}},a=function(){var n=o.document.createElement(\"style\");n.type=\"text/css\";var e=\".book-mark-link{border-bottom:none;display:block;position:fixed;color:#222;font-size:26px !important;top:-10px;left:20px;transition:.3s;}.book-mark-link:hover,.book-mark-link-fixed{top:-2px}@media(max-width:1090px){.book-mark-link{display:none}}\";e=o.document.createTextNode(e),n.appendChild(e),o.document.head.appendChild(n),t=$(''),$(o.document.body).append(t);var a=0;$(o).on(\"scroll.bookmark\",function(){var n=o.document.documentElement.scrollTop;n>0?0===a&&(t.removeClass(\"book-mark-link-fixed\"),a=n):a>0&&(!t.hasClass(\"book-mark-link-fixed\")&&t.addClass(\"book-mark-link-fixed\"),a=0)})},r=function(e,a){null==a&&(a={});var r=o.document.documentElement.scrollTop;return a.lastUri=e,a[e]=r,n.setItem(\"bookmark\",JSON.stringify(a)),t.animate({top:-26},\"fast\",function(){setTimeout(function(){t.css(\"top\",\"\")},400)}),a};o.bookmark={loadBookmark:function(){var o=e();null!=o&&$(function(){a(),t.attr(\"href\",o.lastUri+\"#book:mark\")})},scrollToMark:function(n,l){var i=o.location.pathname,c=e();$(function(){var e;a(),t.click(function(){return c=r(i,c),!1}),\"auto\"===n&&o.addEventListener(\"beforeunload\",function(){r(i,c)}),null!=c&&([l,\"#comments\"].filter(function(n){return n===o.location.hash}).length>0||(e=c[i],isNaN(e)||$(function(){$(o.document.documentElement).animate({scrollTop:e},\"fast\")})))})}}}(window);","link":"/lib/bookmark/bookmark.min.js"},{"title":"","text":"NeedMoreShare2 for NexT Installation Step 1 &rarr; Go to NexT dir Change dir to NexT directory. There must be layout, source, languages and other directories: 123$ cd themes/next$ lsbower.json _config.yml docs gulpfile.coffee languages layout LICENSE.md package.json README.md scripts source test Step 2 &rarr; Get module Install module to source/lib directory: 1$ git clone https://github.com/theme-next/theme-next-needmoreshare2 source/lib/needsharebutton Step 3 &rarr; Set it up Enable module in NexT _config.yml file: 123456needmoreshare2: enable: true postbottom: enable: true float: enable: true Update 12$ cd themes/next/source/lib/needsharebutton$ git pull","link":"/lib/needsharebutton/README.html"},{"title":"","text":"/*********************************************** needShareButton - Version 1.0.0 - Copyright 2015 Dzmitry Vasileuski - Licensed under MIT (http://opensource.org/licenses/MIT) ***********************************************/ (function () { // find closest function closest(elem, parent) { if (typeof (parent) == \"string\") { var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector; if (!!matchesSelector) { while (elem) { if (matchesSelector.bind(elem)(parent)) { return elem; } else { elem = elem.parentElement; } } } return false; } else { while (elem) { if (elem == parent) { return elem; } else { elem = elem.parentElement; } } return false; } } // share button class window.needShareButton = function (elem, options) { // create element reference var root = this; root.elem = elem || \"need-share-button\"; /* Helpers ***********************************************/ // get title from html root.getTitle = function () { var content; // check querySelector existance for old browsers if (document.querySelector) { content = document.querySelector(\"title\"); if (content) { return content.innerText; } } return document.title; }; // get image from html root.getImage = function () { var content; // check querySelector existance for old browsers if (document.querySelector) { content = document.querySelector(\"meta[property=\\\"og:image\\\"]\") || document.querySelector(\"meta[name=\\\"twitter:image\\\"]\"); if (content) { return content.getAttribute(\"content\"); } else { return \"\"; } } else { return \"\"; } }; // get description from html root.getDescription = function () { var content; // check querySelector existance for old browsers if (document.querySelector) { content = document.querySelector(\"meta[property=\\\"og:description\\\"]\") || document.querySelector(\"meta[name=\\\"twitter:description\\\"]\") || document.querySelector(\"meta[name=\\\"description\\\"]\"); if (content) { return content.getAttribute(\"content\"); } else { return \"\"; } } else { content = document.getElementsByTagName(\"meta\").namedItem(\"description\"); if (content) { return content.getAttribute(\"content\"); } else { return \"\"; } } }; // share urls for all networks root.share = { \"weibo\": function (el) { var myoptions = getOptions(el); var url = \"http://v.t.sina.com.cn/share/share.php?title=\" + encodeURIComponent(myoptions.title) + \"&url=\" + encodeURIComponent(myoptions.url) + \"&pic=\" + encodeURIComponent(myoptions.image); root.popup(url); }, \"wechat\": function (el) { var myoptions = getOptions(el); var imgSrc = \"https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=\" + encodeURIComponent(myoptions.url); var dropdownEl = el.querySelector(\".need-share-button_dropdown\"); var img = dropdownEl.getElementsByClassName(\"need-share-wechat-code-image\")[0]; if (img) { img.remove(); } else { img = document.createElement(\"img\"); img.src = imgSrc; img.alt = \"loading wechat image...\"; img.setAttribute(\"class\", \"need-share-wechat-code-image\"); if (root.options.position == 'middleRight') { dropdownEl.insertBefore(img, dropdownEl.children[0]); } else { dropdownEl.appendChild(img); } } }, \"douban\": function (el) { var myoptions = getOptions(el); var url = \"https://www.douban.com/share/service?name=\" + encodeURIComponent(myoptions.title) + \"&href=\" + encodeURIComponent(myoptions.url) + \"&image=\" + encodeURIComponent(myoptions.image); root.popup(url); }, \"qqzone\": function (el) { var myoptions = getOptions(el); var url = \"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?title=\" + encodeURIComponent(myoptions.title) + \"&url=\" + encodeURIComponent(myoptions.url) + \"&pics=\" + encodeURIComponent(myoptions.image) + \"&desc=\" + encodeURIComponent(myoptions.description); root.popup(url); }, \"renren\": function (el) { var myoptions = getOptions(el); var url = \"http://widget.renren.com/dialog/share?title=\" + encodeURIComponent(myoptions.title) + \"&resourceUrl=\" + encodeURIComponent(myoptions.url) + \"&pic=\" + encodeURIComponent(myoptions.image) + \"&description=\" + encodeURIComponent(myoptions.description); root.popup(url); }, \"mailto\": function (el) { var myoptions = getOptions(el); var url = \"mailto:?subject=\" + encodeURIComponent(myoptions.title) + \"&body=Thought you might enjoy reading this: \" + encodeURIComponent(myoptions.url) + \" - \" + encodeURIComponent(myoptions.description); window.location.href = url; }, \"twitter\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"twitter.com/intent/tweet?text=\"; url += encodeURIComponent(myoptions.title) + \"&url=\" + encodeURIComponent(myoptions.url); root.popup(url); }, \"pinterest\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"pinterest.com/pin/create/bookmarklet/?is_video=false\"; url += \"&media=\" + encodeURIComponent(myoptions.image); url += \"&url=\" + encodeURIComponent(myoptions.url); url += \"&description=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"facebook\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.facebook.com/share.php?\"; url += \"u=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"googleplus\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"plus.google.com/share?\"; url += \"url=\" + encodeURIComponent(myoptions.url); root.popup(url); }, \"reddit\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.reddit.com/submit?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"delicious\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"del.icio.us/post?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); url += \"&notes=\" + encodeURIComponent(myoptions.description); root.popup(url); }, \"stumbleupon\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.stumbleupon.com/submit?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"linkedin\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.linkedin.com/shareArticle?mini=true\"; url += \"&url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); url += \"&source=\" + encodeURIComponent(myoptions.source); root.popup(url); }, \"tumblr\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.tumblr.com/share?v=3\"; url += \"&u=\" + encodeURIComponent(myoptions.url); url += \"&t=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"googlebookmarks\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.google.com/bookmarks/mark?op=edit\"; url += \"&bkmk=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); url += \"&annotation=\" + encodeURIComponent(myoptions.description); root.popup(url); }, \"newsvine\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.newsvine.com/_tools/seed&save?\"; url += \"u=\" + encodeURIComponent(myoptions.url); url += \"&h=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"evernote\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.evernote.com/clip.action?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"friendfeed\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.friendfeed.com/share?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"vkontakte\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"vkontakte.ru/share.php?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); url += \"&description=\" + encodeURIComponent(myoptions.description); url += \"&image=\" + encodeURIComponent(myoptions.image); url += \"&noparse=true\"; root.popup(url); }, \"odnoklassniki\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.odnoklassniki.ru/dk?st.cmd=addShare&st.s=1\"; url += \"&st.comments=\" + encodeURIComponent(myoptions.description); url += \"&st._surl=\" + encodeURIComponent(myoptions.url); root.popup(url); }, \"mailru\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"connect.mail.ru/share?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); url += \"&description=\" + encodeURIComponent(myoptions.description); url += \"&imageurl=\" + encodeURIComponent(myoptions.image); root.popup(url); } }; // open share link in a popup root.popup = function (url) { // set left and top position var popupWidth = 600, popupHeight = 500, // fix dual screen mode dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : screen.left, dualScreenTop = window.screenTop !== undefined ? window.screenTop : screen.top, width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width, height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height, // calculate top and left position left = ((width / 2) - (popupWidth / 2)) + dualScreenLeft, top = ((height / 2) - (popupHeight / 2)) + dualScreenTop, // show popup shareWindow = window.open(url, \"targetWindow\", \"toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=\" + popupWidth + \", height=\" + popupHeight + \", top=\" + top + \", left=\" + left); // Puts focus on the newWindow if (window.focus) { shareWindow.focus(); } }; /* Set options ***********************************************/ // create default options root.options = { iconStyle: \"default\", // default or box boxForm: \"horizontal\", // horizontal or vertical position: \"bottomCenter\", // top / middle / bottom + Left / Center / Right protocol: [\"http\", \"https\"].indexOf(window.location.href.split(\":\")[0]) === -1 ? \"https://\" : \"//\", networks: \"Weibo,Wechat,Douban,QQZone,Twitter,Pinterest,Facebook,GooglePlus,Reddit,Linkedin,Tumblr,Evernote\" }; // integrate custom options for (var i in options) { if (options.hasOwnProperty(i)) { root.options[i] = options[i]; } } // convert networks string into array //root.options.networks = root.options.networks.toLowerCase().split(\",\"); root.options.networks = root.options.networks.split(\",\"); function getOptions(el) { // integrate data attribute options var ret = {}; for (var i in root.options) { if (root.options.hasOwnProperty(i)) { ret[i] = root.options[i]; } } // these attrs must get dynamically. ret.url = window.location.href; ret.title = root.getTitle(); ret.image = root.getImage(); ret.description = root.getDescription(); for (var option in el.dataset) { // replace only 'share-' prefixed data-attributes if (option.match(/share/)) { var newOption = option.replace(/share/, \"\"); if (!newOption.length) { continue; } newOption = newOption.charAt(0).toLowerCase() + newOption.slice(1); var val = el.dataset[option]; if (newOption === \"networks\") { //val = val.toLowerCase().split(\",\"); val = val.split(\",\"); } else if (newOption === \"url\" && val && val[0] === \"/\") { // fix relative url problem. val = location.origin + val; } ret[newOption] = val; } } return ret; } function createDropdown(el) { // create dropdown var dropdownEl = document.createElement(\"span\"); dropdownEl.className = \"need-share-button_dropdown\"; if (el.querySelector(\".need-share-button_dropdown\")) { return; } var myoptions = getOptions(el); // set dropdown row length if (myoptions.iconStyle == \"default\" && myoptions.boxForm == \"vertical\") { dropdownEl.className += \" need-share-button_dropdown-box-vertical\"; } else if (myoptions.iconStyle == \"box\" && myoptions.boxForm == \"horizontal\") { dropdownEl.className += \" need-share-button_dropdown-box-horizontal\"; } else if (myoptions.iconStyle == \"box\" && myoptions.boxForm == \"vertical\") { dropdownEl.className += \" need-share-button_dropdown-box-vertical\"; } // set dropdown position setTimeout(function () { switch (myoptions.position) { case \"topLeft\": dropdownEl.className += \" need-share-button_dropdown-top-left\"; break; case \"topRight\": dropdownEl.className += \" need-share-button_dropdown-top-right\"; break; case \"topCenter\": dropdownEl.className += \" need-share-button_dropdown-top-center\"; dropdownEl.style.marginLeft = -dropdownEl.offsetWidth / 2 + \"px\"; break; case \"middleLeft\": dropdownEl.className += \" need-share-button_dropdown-middle-left\"; dropdownEl.style.marginTop = -dropdownEl.offsetHeight / 2 + \"px\"; break; case \"middleRight\": dropdownEl.className += \" need-share-button_dropdown-middle-right\"; dropdownEl.style.marginTop = -dropdownEl.offsetHeight / 2 + \"px\"; break; case \"bottomLeft\": dropdownEl.className += \" need-share-button_dropdown-bottom-left\"; break; case \"bottomRight\": dropdownEl.className += \" need-share-button_dropdown-bottom-right\"; break; case \"bottomCenter\": dropdownEl.className += \" need-share-button_dropdown-bottom-center\"; dropdownEl.style.marginLeft = -dropdownEl.offsetWidth / 2 + \"px\"; break; default: dropdownEl.className += \" need-share-button_dropdown-bottom-center\"; dropdownEl.style.marginLeft = -dropdownEl.offsetWidth / 2 + \"px\"; break; } }, 1); // fill fropdown with buttons var iconClass = myoptions.iconStyle == \"default\" ? \"need-share-button_link need-share-button_\" : \"need-share-button_link-\" + myoptions.iconStyle + \" need-share-button_link need-share-button_\"; for (var network in myoptions.networks) { if (myoptions.networks.hasOwnProperty(network)) { var link = document.createElement(\"span\"); network = myoptions.networks[network].trim(); var networkLC = network.toLowerCase(); link.className = iconClass + networkLC; var fontello = [\"weibo\", \"wechat\", \"douban\", \"qqzone\", \"renren\"]; if (fontello.indexOf(networkLC) === -1) { link.className += \" social-\" + networkLC; } else { link.className += \" icon-\" + networkLC; } link.dataset.network = networkLC; link.title = network; dropdownEl.appendChild(link); } } dropdownEl.addEventListener(\"click\", function (event) { if (closest(event.target, \".need-share-button_link\")) { event.preventDefault(); event.stopPropagation(); root.share[event.target.dataset.network](el); return false; } }); el.appendChild(dropdownEl); } // close on click outside document.addEventListener(\"click\", function (event) { var openedEl = document.querySelector(\".need-share-button-opened\"); if (!closest(event.target, \".need-share-button-opened\")) { if (openedEl) { openedEl.classList.remove(\"need-share-button-opened\"); // hide wechat code image when close the dropdown. if (openedEl.querySelector(\".need-share-wechat-code-image\")) { openedEl.querySelector(\".need-share-wechat-code-image\").remove(); } } else { var el = closest(event.target, root.elem); if (el) { if (!el.classList.contains(\"need-share-button-opened\")) { createDropdown(el); setTimeout(function () { el.classList.add(\"need-share-button-opened\"); }, 1); } } } } else { setTimeout(function () { openedEl.classList.remove(\"need-share-button-opened\"); // hide wechat code image when close the dropdown. if (openedEl.querySelector(\".need-share-wechat-code-image\")) { openedEl.querySelector(\".need-share-wechat-code-image\").remove(); } }, 1); } }); }; })();","link":"/lib/needsharebutton/needsharebutton.js"},{"title":"","text":"/*********************************************** needShareButton - Version 1.0.0 - Copyright 2015 Dzmitry Vasileuski - Licensed under MIT (http://opensource.org/licenses/MIT) ***********************************************/ /* Social icons font ***********************************************/ /* SOCIAL ICON */ @font-face { font-family: 'social-icons'; font-weight: normal; font-style: normal; src: url('font/social.eot?44259375'); src: url('font/social.eot?44259375#iefix') format('embedded-opentype'), url('font/social.woff?44259375') format('woff'), url('font/social.ttf?44259375') format('truetype'), url('font/social.svg?44259375#social') format('svg'); } @font-face { font-family: 'social-icons'; src: url('data:application/font-woff;charset=utf-8;base64,') format('woff'), url('data:application/font-ttf;charset=utf-8;base64,') format('truetype'); } .need-share-button_dropdown [class^=\"social-\"]:before, .need-share-button_dropdown [class*=\" social-\"]:before { font-family: \"social-icons\"; font-style: normal; font-weight: normal; speak: none; display: inline-block; text-decoration: inherit; width: 1em; margin-right: .2em; text-align: center; /* opacity: .8; */ /* For safety - reset parent styles, that can break glyph codes*/ font-variant: normal; text-transform: none; /* fix buttons height, for twitter bootstrap */ line-height: 1em; /* Animation center compensation - margins should be symmetric */ /* remove if not needed */ margin-left: .2em; /* you can be more comfortable with increased icons size */ /* font-size: 120%; */ /* Uncomment for 3D effect */ /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */ } .social-mailto:before { content: '\\e80a'; } .social-twitter:before { content: '\\e813'; } .social-pinterest:before { content: '\\e80f'; } .social-facebook:before { content: '\\e80e'; } .social-googleplus:before { content: '\\e80d'; } .social-reddit:before { content: '\\e810'; } .social-linkedin:before { content: '\\e80c'; } .social-tumblr:before { content: '\\e812'; } .social-evernote:before { content: '\\e801'; } .social-delicious:before { content: '\\e815'; } .social-stumbleupon:before { content: '\\e811'; } .social-googlebookmarks:before { content: '\\e80b'; } .social-newsvine:before { content: '\\e803'; } .social-friendfeed:before { content: '\\e802'; } .social-vkontakte:before { content: '\\e814'; } .social-odnoklassniki:before { content: '\\e804'; } .social-mailru:before { content: '\\e800'; } /* FONTELLO ICON */ @font-face { font-family: 'fontello'; src: url('../font/fontello.eot?34242489'); src: url('../font/fontello.eot?34242489#iefix') format('embedded-opentype'), url('../font/fontello.svg?34242489#fontello') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'fontello'; src: url('data:application/octet-stream;base64,d09GRgABAAAAAA7IAA8AAAAAGBAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABWAAAADsAAABUIIslek9TLzIAAAGUAAAAQwAAAFY+S1NOY21hcAAAAdgAAABqAAABqkbJ0JZjdnQgAAACRAAAABMAAAAgBtX/BGZwZ20AAAJYAAAFkAAAC3CKkZBZZ2FzcAAAB+gAAAAIAAAACAAAABBnbHlmAAAH8AAABBsAAAToO/jZ62hlYWQAAAwMAAAAMwAAADYPhh2FaGhlYQAADEAAAAAgAAAAJAfKA91obXR4AAAMYAAAABQAAAAUE4f//mxvY2EAAAx0AAAADAAAAAwChAN+bWF4cAAADIAAAAAgAAAAIAETDBZuYW1lAAAMoAAAAXcAAALNzJ0dH3Bvc3QAAA4YAAAAMwAAAEYXwzMzcHJlcAAADkwAAAB6AAAAhuVBK7x4nGNgZGBg4GIwYLBjYHJx8wlh4MtJLMljkGJgYYAAkDwymzEnMz2RgQPGA8qxgGkOIGaDiAIAJjsFSAB4nGNgZH7BOIGBlYGBqYppDwMDQw+EZnzAYMjIBBRlYGVmwAoC0lxTGBxeaH+8zhz0P4shijmIYRpQmBEkBwAenQ0gAHic7ZHLDYAgEERnZTXE2IkW4NFiPNkK/UELXrcC3A9lOOSR2QlwGADMAJJyKAzQA4Lp1pQ8T1g9Z5w6Z10T8O5SpPU+XDXnIj+R3U16195c8Gvz/RoTW2+BtSwlsGalBvYr0gLwBz3aG2gAAHicY2BAAxIQyBz0PwuEARJsA90AeJytVml300YUHXlJnIQsJQstamHExGmwRiZswYAJQbJjIF2crZWgixQ76b7xid/gX/Nk2nPoN35a7xsvJJC053Cak6N3583VzNtlElqS2AvrkZSbL8XU1iaN7DwJ6YZNy1F8KDt7IWWKyd8FURCtltq3HYdERCJQta6wRBD7HlmaZHzoUUbLtqRXTcotPekuW+NBvVXffho6yrE7oaRmM3RoPbIlVRhVokimPVLSpmWo+itJK7y/wsxXzVDCiE4iabwZxtBI3htntMpoNbbjKIpsstwoUiSa4UEUeZTVEufkigkMygfNkPLKpxHlw/yIrNijnFawS7bT/L4vead3OT+xX29RtuRAH8iO7ODsdCVfhFtbYdy0k+0oVBF213dCbNnsVP9mj/KaRgO3KzK90IxgqXyFECs/ocz+IVktnE/5kkejWrKRE0HrZU7sSz6B1uOIKXHNGFnQ3dEJEdT9kjMM9pg+Hvzx3imWCxMCeBzLekclnAgTKWFzNEnaMHJgJWWLKqn1rpg45XVaxFvCfu3a0ZfOaONQd2I8Ww8dWzlRyfFoUqeZTJ3aSc2jKQ2ilHQmeMyvAyg/oklebWM1iZVH0zhmxoREIgIt3EtTQSw7saQpBM2jGb25G6a5di1apMkD9dyj9/TmVri501PaDvSzRn9Wp2I62AvT6WnkL/Fp2uUiRen66Rl+TOJB1gIykS02w5SDB2/9DtLL15YchdcG2O7t8yuofdZE8KQB+xvQHk/VKQlMhZhViFZAYq1rWZbJ1awWqcjUd0OaVr6s0wSKchwXx76Mcf1fMzOWmBK+34nTsyMuPXPtSwjTHHybdT2a16nFcgFxZnlOp1mW7+s0x/IDneZZntfpCEtbp6MsP9RpgeVHOh1jeUELmnTfwZCLMOQCDpAwhKUDQ1hegiEsFQxhuQhDWBZhCMslGMLyYxjCchmGsLysZdXUU0nj2plYBmxCYGKOHrnMReVqKrlUQrtoVGpDnhJulVQUz6p/ZaBePPKGObAWSJfIml8xzpWPRuX41hUtbxo7V8Cx6m8fjvY58VLWi4U/Bf/V1lQlvWLNw5Or8BuGnmwnqjapeHRNl89VPbr+X1RUWAv0G0iFWCjKsmxwZyKEjzqdhmqglUPMbMw8tOt1y5qfw/03MUIWUP34NxQaC9yDTllJWe3grNXX27LcO4NyOBMsSTE38/pW+CIjs9J+kVnKno98HnAFjEpl2GoDrRW82ScxD5neJM8EcVtRNkja2M4EiQ0c84B5850EJmHqqg3kTuGGDfgFYW7BeSdconqjLIfuRezzKKT8W6fiRPaoaIzAs9kbYa/vQspvcQwkNPmlfgxUFaGpGDUV0DRSbqgGX8bZum1Cxg70Iyp2w7Ks4sPHFveVkm0ZhHykiNWjo5/WXqJOqtx+ZhSX752+BcEgNTF/e990cZDKu1rJMkdtA1O3GpVT15pD41WH6uZR9b3j7BM5a5puuiceel/TqtvBxVwssPZtDtJSJhfU9WGFDaLLxaVQ6mU0Se+4BxgWGNDvUIqN/6v62HyeK1WF0XEk307Ut9HnYAz8D9h/R/UD0Pdj6HINLs/3mhOfbvThbJmuohfrp+g3MGutuVm6BtzQdAPiIUetjrjKDXynBnF6pLkc6SHgY90V4gHAJoDF4BPdtYzmUwCj+Yw5PsDnzGHQZA6DLeYw2GbOGsAOcxjsMofBHnMYfMGcdYAvmcMgZA6DiDkMnjAnAHjKHAZfMYfB18xh8A1z7gN8yxwGMXMYJMxhsK/p1jDMLV7QXaC2QVWgA1NPWNzD4lBTZcj+jheG/b1BzP7BIKb+qOn2kPoTLwz1Z4OY+otBTP1V050h9TdeGOrvBjH1D4OY+ky/GMtlBr+MfJcKB5RdbD7n74n3D9vFQLkAAQAB//8AD3icZVPfT9tWFL7nXvvasR3HcYydBGNSxzihQQbSxNYYhRCFH6MhtIwhqBBFFTDUFtiqisLU7WXdVCGKpq7SpgmhCXV7nDRp2tOe9jDtf9jDXvswTer7Bruhe9os697j75x7zvH5vouE87PzX8gr/BeKoRTqQiU0i9bQPsrUzDoggEnE1h2E0MZ4ozyIeaPUEwZABepAGL22LDO0VAhgBCwHogALKjNwNAKRoZKARJWQ2ZbZPjIKYdlkfqcdQRxgZiGAKPQF6hd8ltCMLsA2xhLRoF3EhH1ZKvTJcckPajxVdRJLitp65qMP+ioP3hwJn/OLz64/eiHyN4/mPjz9pjh359nxlw+auDW58nPRy2CO8nJrr5wBTuKEXMUrWqrEp+OKyssDXjyNiaa49UeDtsnbjsppxsTqgJYVda3x5NOUn9SSKd/Q3xE0ngq6iGn1jYq/uVnRtLVL1bmiGH8893qb9VvNsEhzU6ujtWeTK9NF74ZIMZBL4zVBpBxIuWEY6mzkFIWw4vlQZGVVkwjGWHg0mtCUrBaszTgy0R0bJy4jgtD592SJECQiHdnIqCUzHfEYJRSNt9lIAt9R4qlbYGN2gCQNKvjVygiAIQRQSDoY7936bXVmW09t/3r0/vrKKV5av38Iay+Ws9XqwOHs9QP8x9mrw5fR3vHmj7tn9473opeHkEju/YAY4+j8DvmdzKENdLU2dGspK3KA3g7LhABuC4IgIFuIYPbeZc0oUwjj+BTiuDj31tR4fWx4qOD38azBFOspjBixbA2vlC2HdoPZYdAuMMoCY9qgeTfg8wIVHMw0JLQ/oZ/RzzTAzH+1w1RTLbRxl8FC3mVSqVa+4BURJHFjcubda9OdgZs1VZWHbomDUhlMg3lVTgI2/14lcHjAxPukqxbk46LHWauB4dcDH5QkzbEs0FkXCealogWY/Qh8JuuyKyqu0PrW7emWHfdyMQxyuL9HdCgLqL03nK6JiqZqGC8UZCObxioJJUXmMIaMiUU1l7IMHRRgD6abHlYsj3DQnfkKIcpm+5R7SAYYrwa7b71oAi2izdq6l8AEXy3jGGlODxM5RiavgdxAEpJ22PAB7fAAIruJoiLuCEBwDJPYForJOCbfRbK8jRSMlXmkKHiRAlZwc2F+dqZRr17Jd3gpw/NSepzvKkHFd1UwyyEzBJcKhmmVQ8JAavwHLPh5FmkZFuPEb1OSF6ILhVllh6mMClbhgi2GRG2kYfd74Ac2nNimloZswrQ/ZpDXb8NtpyPBENW0P9fNlZNliBt6IqtnhIB/Wjy999PW7e92YblZ796Z95l7+WTl5skqvmHZTsnOnv2dyLKzLGUa+v4H/UkWni/09WLM5itN7N//up1+6vHZw7HdwfVho/Xk5KAJrQP0D0Q/xGYAeJxjYGRgYADiZ4l/fOP5bb4ycDO/AIowXP3x5hOM/v/vfxZLOXMQkMvBwAQSBQDMRxC+AHicY2BkYGAO+p/FwMBS9v/f/+8s5QxAERTACgCiiQauA+gAAAPo//4DWQAAA+gAAAR2AAAAAAAAAMwBCgG4AnQAAQAAAAUAegAHAAAAAAACABoAKgBzAAAAeQtwAAAAAHicdZDdasIwGIbfzJ9tCtvYYKfL0VDG6g8MQRAEh55sJzI8HbXWtlIbSaPgbewedjG7iV3LXts4hrKWNM/35MuXrwFwjW8I5M8TR84CZ4xyPsEpepYL9M+Wi+QXyyVU8Wa5TP9uuYIHBJaruMEHK4jiOaMFPi0LXIlLyye4EHeWC/SPlovknuUSbsWr5TK9Z7mCiUgtV3EvvgZqtdVREBpZG9Rlu9nqyOlWKqoocWPprk2odCr7cq4S48excjy13PPYD9axq/fhfp74Oo1UIltOc69GfuJr1/izXfV0E7SNmcu5Vks5tBlypdXC94wTGrPqNhp/z8MACitsoRHxqkIYSNRo65zbaKKFDmnKDMnMPCtCAhcxjYs1d4TZSsq4zzFnlND6zIjJDjx+l0d+TAq4P2YVfbR6GE9IuzOizEv25bC7w6wRKcky3czOfntPseFpbVrDXbsuddaVxPCghuR97NYWNB69k92Koe2iwfef//sB5m6EUQB4nGNgYoAALgbsgJWRiZGZkYWRlZGNgbU8NTMpn60oNQ+ImAoL2cpTkzMSSxgYAHR0CDwAeJxj8N7BcCIoYiMjY1/kBsadHAwcDMkFGxlYnTYxMDJogRibuZgYOSAsPgYwi81pF9MBoDQnkM3utIvBAcJmZnDZqMLYERixwaEjYiNzistGNRBvF0cDAyOLQ0dySARISSQQbOZhYuTR2sH4v3UDS+9GJgYXAAx2I/QAAA==') format('woff'), url('data:application/octet-stream;base64,') format('truetype'); } /* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */ /* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */ /* @media screen and (-webkit-min-device-pixel-ratio:0) { @font-face { font-family: 'fontello'; src: url('../font/fontello.svg?13586373#fontello') format('svg'); } } */ .need-share-button_dropdown [class^=\"icon-\"]:before, .need-share-button_dropdown [class*=\" icon-\"]:before { font-family: \"fontello\"; font-style: normal; font-weight: normal; speak: none; display: inline-block; text-decoration: inherit; width: 1em; margin-right: .2em; text-align: center; /* opacity: .8; */ /* For safety - reset parent styles, that can break glyph codes*/ font-variant: normal; text-transform: none; /* fix buttons height, for twitter bootstrap */ line-height: 1em; /* Animation center compensation - margins should be symmetric */ /* remove if not needed */ margin-left: .2em; /* you can be more comfortable with increased icons size */ /* font-size: 120%; */ /* Uncomment for 3D effect */ /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */ } .icon-weibo:before { content: '\\e82b'; } /* '' */ .icon-renren:before { content: '\\f18b'; } /* '' */ .icon-qqzone:before { content: '\\f1d6'; } /* '' */ .icon-wechat:before { content: '\\f1d7'; } /* '' */ /* Need Share Button ***********************************************/ .need-share-button { position: relative; } .need-share-button-opened { position: relative; } .need-share-button-opened img.need-share-wechat-code-image { display: block; width: 100%; max-width: 200px; margin: 10px auto; } .need-share-button_dropdown { position: absolute; z-index: 10; visibility: hidden; overflow: hidden; width: 300px; font-size: 16px; -webkit-transition: .3s; transition: .3s; -webkit-transform: scale(.1); -ms-transform: scale(.1); transform: scale(.1); text-align: center; white-space: normal; opacity: 0; -webkit-border-radius: 4px; border-radius: 4px; background-color: #fff; -webkit-box-shadow: 0 0 2px rgba(0, 0, 0, .5); box-shadow: 0 0 2px rgba(0, 0, 0, .5); } .need-share-button-opened .need-share-button_dropdown { visibility: visible; -webkit-transform: scale(1); -ms-transform: scale(1); transform: scale(1); opacity: 1; } .need-share-button_dropdown-box-vertical, .need-share-button_dropdown-box-horizontal { -webkit-border-radius: 0; border-radius: 0; } .need-share-button_dropdown-box-vertical { width: 50px; } .need-share-button_dropdown-box-horizontal { width: auto; white-space: nowrap; } .need-share-button_link { display: inline-block; width: 50px; height: 50px; line-height: 50px; cursor: pointer; text-align: center; } .need-share-button_link:hover { -webkit-transition: .3s; transition: .3s; opacity: .7; } /* Dropdown position ***********************************************/ .need-share-button_dropdown-top-left { right: 100%; bottom: 100%; margin-right: 10px; margin-bottom: 10px; } .need-share-button_dropdown-top-right { bottom: 100%; left: 100%; margin-bottom: 10px; margin-left: 10px; } .need-share-button_dropdown-top-center { bottom: 100%; left: 50%; margin-bottom: 10px; } .need-share-button_dropdown-middle-left { top: 50%; right: 100%; margin-right: 10px; } .need-share-button_dropdown-middle-right { bottom: 0; left: 100%; margin-left: 10px; } .need-share-button_dropdown-bottom-left { top: 100%; right: 100%; margin-top: 10px; margin-right: 10px; } .need-share-button_dropdown-bottom-right { top: 100%; left: 100%; margin-top: 10px; margin-left: 10px; } .need-share-button_dropdown-bottom-center { top: 100%; left: 50%; margin-top: 10px; } /* Default theme ***********************************************/ .need-share-button-default { display: inline-block; margin-bottom: 0; padding: 6px 12px; font-size: 14px; line-height: 1.42857143; font-weight: 400; color: #333; cursor: pointer; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; text-align: center; vertical-align: middle; border: 1px solid #ccc; -webkit-border-radius: 4px; border-radius: 4px; background-color: #fff; } /* Network buttons ***********************************************/ .need-share-button_wechat { color: #a2dc30; } .need-share-button_wechat.need-share-button_link-box { color: #fff; background: #a2dc30; } .need-share-button_weibo { color: #d52b2b; } .need-share-button_weibo.need-share-button_link-box { color: #fff; background: #d52b2b; } .need-share-button_douban { color: #072; } .need-share-button_douban:before { content: '豆'; } .need-share-button_douban.need-share-button_link-box { color: #fff; background: #072; } .need-share-button_qqzone { color: #ffce00; } .need-share-button_qqzone.need-share-button_link-box { color: #fff; background: #ffce00; } .need-share-button_renren { color: #207cc5; } .need-share-button_renren.need-share-button_link-box { color: #fff; background: #207cc5; } .need-share-button_mailto { color: #efbe00; } .need-share-button_mailto.need-share-button_link-box { color: #fff; background: #efbe00; } .need-share-button_twitter { color: #00acec; } .need-share-button_twitter.need-share-button_link-box { color: #fff; background: #00acec; } .need-share-button_pinterest { color: #cd2027; } .need-share-button_pinterest.need-share-button_link-box { color: #fff; background: #cd2027; } .need-share-button_facebook { color: #3b5998; } .need-share-button_facebook.need-share-button_link-box { color: #fff; background: #3b5998; } .need-share-button_googleplus { color: #d44132; } .need-share-button_googleplus.need-share-button_link-box { color: #fff; background: #d44132; } .need-share-button_reddit { color: #000; } .need-share-button_reddit.need-share-button_link-box { color: #fff; background: #000; } .need-share-button_delicious { color: #000; } .need-share-button_delicious.need-share-button_link-box { color: #fff; background: #000; } .need-share-button_stumbleupon { color: #f04e23; } .need-share-button_stumbleupon.need-share-button_link-box { color: #fff; background: #f04e23; } .need-share-button_linkedin { color: #0085af; } .need-share-button_linkedin.need-share-button_link-box { color: #fff; background: #0085af; } .need-share-button_tumblr { color: #34465d; } .need-share-button_tumblr.need-share-button_link-box { color: #fff; background: #34465d; } .need-share-button_googlebookmarks { color: #fde331; } .need-share-button_googlebookmarks.need-share-button_link-box { color: #fff; background: #fde331; } .need-share-button_newsvine { color: #03652c; } .need-share-button_newsvine.need-share-button_link-box { color: #fff; background: #03652c; } .need-share-button_evernote { color: #79d626; } .need-share-button_evernote.need-share-button_link-box { color: #fff; background: #79d626; } .need-share-button_friendfeed { color: #b0cbe9; } .need-share-button_friendfeed.need-share-button_link-box { color: #fff; background: #b0cbe9; } .need-share-button_vkontakte { color: #4c75a3; } .need-share-button_vkontakte.need-share-button_link-box { color: #fff; background: #4c75a3; } .need-share-button_odnoklassniki { color: #ed812b; } .need-share-button_odnoklassniki.need-share-button_link-box { color: #fff; background: #ed812b; } .need-share-button_mailru { color: #f89c0e; } .need-share-button_mailru.need-share-button_link-box { color: #fff; background: #f89c0e; }","link":"/lib/needsharebutton/needsharebutton.css"}],"posts":[{"title":"2019-10-1 国庆节","text":"","link":"/2019/08/27/NationalDay/"},{"title":"算法学习-背包类树形dp","text":"树形分组背包【例题】 选课 luogu-p2014 在大学里每个学生，为了达到一定的学分，必须从很多课程里选择一些课程来学习，在课程里有些课程必须在某些课程之前学习，如高等数学总是在其它课程之前学习。现在有N门功课，每门课有个学分，每门课有一门或没有直接先修课（若课程a是课程b的先修课即只有学完了课程a，才能学习课程b）。一个学生要从这些课程里选择M门课程学习，问他能获得的最大学分是多少？ 【分析】记录状态：$f[u][i]$为以$u$为根的子树上，选择$i$门课所能获得的最大学分。 记$u$为当前正在处理的结点，$v$为刚刚递归访问结束的结点。那么在$u$上相当于有一个容量为$M$的背包，每个子树中不同的状态相当于不同的物品，例如$f[v][j]$为体积为$j$，价值为$f[v][j]$中存储的数值。 在本题中，由于所有关系构成森林结构，因此可以设$0$号结点为“没有先修课”的课的先修课。然后以$0$为根，进行状态转移即可。 【代码】1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;bits/stdc++.h&gt;using namespace std;#define Pb push_backconst int MAXN=305;const int MAXM=305;int N,M;vector&lt;int&gt; son[MAXN];int a[MAXN],f[MAXN][MAXM];inline void dp(int u){ for(vector&lt;int&gt;::iterator it=son[u].begin();it!=son[u].end();it++) { int v=*it; dp(v); for(register int i=M;i&gt;=0;--i) for(register int j=0;j&lt;=i;++j) f[u][i]=max(f[u][i],f[u][i-j]+f[v][j]); } if(u) { for(register int i=M;i&gt;=1;--i) f[u][i]=f[u][i-1]+a[u]; }}int main(){ scanf(\"%d%d\",&amp;N,&amp;M); for(register int i=1;i&lt;=N;++i) { int k,s; scanf(\"%d%d\",&amp;k,&amp;s); son[k].Pb(i);a[i]=s; } dp(0); printf(\"%d\",f[0][M]); return 0;} 【例题】有线电视网 luogu-p1273某收费有线电视网计划转播一场重要的足球比赛。他们的转播网和用户终端构成一棵树状结构，这棵树的根结点位于足球比赛的现场，树叶为各个用户终端，其他中转站为该树的内部节点。 从转播站到转播站以及从转播站到所有用户终端的信号传输费用都是已知的，一场转播的总费用等于传输信号的费用总和。 现在每个用户都准备了一笔费用想观看这场精彩的足球比赛，有线电视网有权决定给哪些用户提供信号而不给哪些用户提供信号。 写一个程序找出一个方案使得有线电视网在不亏本的情况下使观看转播的用户尽可能多。 【分析】记录状态：$f[i][j]$为以$i$为根，选择$j$个用户最多有多少收入。状态转移时如果无法从正面入手（如本题不知道价格的最值，且价值分布更为稀疏），可以从反面设计状态，在输出答案时进行判断即可。转移时可以记录$size$数组进行优化。 【代码】1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;using namespace std;struct Edge{ int v,w,nxt;}mem[3005*2];int head[3005],cnt;int size[3005];inline void AddEdge(int u,int v,int w){ mem[++cnt].v=v; mem[cnt].w=w; mem[cnt].nxt=head[u]; head[u]=cnt;}int N,M;int leaf[3005];int f[3005][3005];inline void dfs(int u){ if(leaf[u]){ f[u][1]=leaf[u]; size[u]=1; return; } for(register int i=head[u];i;i=mem[i].nxt){ int v=mem[i].v,w=mem[i].w; dfs(v); size[u]+=size[v]; for(register int j=M;j&gt;=1;--j) for(register int k=0;k&lt;=min(size[v],j);++k) f[u][j]=max(f[u][j],f[u][j-k]+f[v][k]-w); }}int main(){ memset(f,0xcf,sizeof(f)); scanf(\"%d%d\",&amp;N,&amp;M); for(register int i=1;i&lt;=N-M;++i){ int k; scanf(\"%d\",&amp;k); for(register int j=1;j&lt;=k;++j){ int a,c; scanf(\"%d%d\",&amp;a,&amp;c); AddEdge(i,a,c); } } for(register int i=1;i&lt;=M;++i) scanf(\"%d\",&amp;leaf[N-M+i]); for(register int i=1;i&lt;=N;++i) f[i][0]=0; dfs(1); for(register int i=M;i&gt;=1;--i){ if(f[1][i]&gt;=0){ printf(\"%d\",i); return 0; } } return 0;} 组合计数类树形背包【例题】树的独立集 （原创）给定一棵有$N$个结点的树，输出这棵树中包含$K$个结点的独立集个数。 【分析】有关组合计数的背包类树形dp问题，一般均可用以下方式解决。 记录状态：$f[u][k][0/1]$ 为以$u$为根的子树，$u$的状态为选或不选，共选择$k$个结点时独立集的个数。 记$u$为当前正在处理的结点，$v$为刚刚递归访问结束的结点。每递归访问结束一个子结点，就考虑把该子结点的状态与已经处理一部分的当前结点状态相匹配。每访问完一个结点，就把配对后产生的状态归为已处理的状态。由于需要根据之前的状态推导后续状态，因此不难看出利用到背包的思想。 状态转移方程的基本思想如下： f[u][i+j][(state)]=combine(f[u][i][(state)]*f[u][j][(state)])本题的状态转移方程也不难推出： f[u][0][i+j]=\\sum f[u][0][i]*(f[v][0][j]+f[v][1][j]) f[u][1][i+j]=\\sum f[u][1][i]*f[v][0][j]【代码】123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;bits/stdc++.h&gt;using namespace std;const int MAXN=10005;int N,K;vector&lt;int&gt; G[MAXN];int f[MAXN][105][2];int g[105][2];int size[MAXN];void dp(int fa,int u){ size[u]=1; f[u][0][0]=1,f[u][1][1]=1; for(vector&lt;int&gt;::iterator it=G[u].begin();it!=G[u].end();it++){ int v=*it; if(v==fa) continue; dp(u,v); for(register int i=0;i&lt;=min(K,size[u]);++i){ g[i][0]=f[u][i][0],f[u][i][0]=0; g[i][1]=f[u][i][1],f[u][i][1]=0; } for(register int i=0;i&lt;=min(K,size[u]);++i){ for(register int j=0;j&lt;=min(K-i,size[v]);++j){ f[u][i+j][0]+=g[i][0]*(f[v][j][0]+f[v][j][1]); f[u][i+j][1]+=g[i][1]*f[v][j][0]; } } size[u]+=size[v]; }}int main(){ scanf(\"%d%d\",&amp;N,&amp;K); for(register int i=1;i&lt;N;++i){ int u,v; scanf(\"%d%d\",&amp;u,&amp;v); G[u].push_back(v); G[v].push_back(u); } dp(0,1); printf(\"%d\",f[1][K][0]+f[1][K][1]); return 0;} 习题潜入行动 未完待续~","link":"/2019/03/25/algorithm-knapsacktreedp/"},{"title":"快速傅里叶变换（FFT）快速数论变换（NTT）","text":"离散傅里叶变换（Discrete Fourier Transform，缩写为 DFT），是傅里叶变换在时域和频域上都呈离散的形式，将信号的时域采样变换为其 DTFT 的频域采样。 FFT 是一种 DFT 的高效算法，称为快速傅立叶变换（Fast Fourier transform）。 快速数论变换 (NTT) 是快速傅里叶变换（FFT）在数论基础上的实现。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950const int MAXN = 5000005;const ll MOD = 998244353;const ll G = 3;inline ll qpow(ll a, ll k) { ll ret = 1; while (k) { if (k &amp; 1) ret = ret * a % MOD; a = a * a % MOD; k &gt;&gt;= 1; } return ret;}inline ll inv(ll a) { return qpow(a, MOD - 2);}namespace FFT { int n, r[MAXN]; void NTT(ll *a, int op) { int k = 0; for (; (1 &lt;&lt; k) &lt; n; ++k); for (int i = 0; i &lt; n; ++i) { r[i] = r[i &gt;&gt; 1] &gt;&gt; 1 | (i &amp; 1) &lt;&lt; (k - 1); if (i &lt; r[i]) swap(a[i], a[r[i]]); } for (int l = 2; l &lt;= n; l &lt;&lt;= 1) { int m = l &gt;&gt; 1; ll w = qpow(G, (MOD - 1) / l); if (op == -1) w = inv(w); for (int i = 0; i &lt; n; i += l) { ll wk = 1; for (int j = 0; j &lt; m; ++j, wk = wk * w % MOD) { ll p = a[i + j], q = wk * a[i + j + m] % MOD; a[i + j] = (p + q) % MOD; a[i + j + m] = (p - q + MOD) % MOD; } } } } void DFT(ll *a) { NTT(a, 1); } void IDFT(ll *a) { NTT(a, -1); ll inv = qpow(n, MOD - 2); for (int i = 0; i &lt; n; ++i) a[i] = a[i] * inv % MOD; }};","link":"/2019/11/20/algorithm-fftntt/"},{"title":"算法学习-KMP模式匹配","text":"概述给定一个文本 $A$ 和一个字符串 $B$ ，我们可以利用 KMP 算法尝试找到并展示 $B$ 在 $A$ 中的所有出现（occurrence）。 模板预处理前缀函数预处理出字符串 $B$ 的前缀函数 $next$ 数组，其中 $next[i]$ 为既是子串 $B[1…i]$ 的前缀同时也是该子串的后缀的最长真前缀长度。一个字符串的真前缀是其前缀但不等于该字符串本身。根据定义， $next[1]=0$ 。 算法流程 在循环中以 $i=2$ 到 $i=n$的顺序计算前缀函数 $next[i]$ 的值。（$next[1]$ 被赋值为0） 为了计算当前的前缀函数值 $next[i]$，我们令变量 $j$ 表示右端点位于 $i-1$ 的最长匹配前后缀的长度。初始时 $j=next[i-1]$ 。 通过比较 $B[j+1]$ 和 $B[i]$ 来检查长度为 $j+1$ 的后缀是否同时也是一个前缀。如果二者相等，那么置 $next[i]=j+1$，否则减少 $j$ 至 $next[j]$ 并重复该过程。 如果 $j=0$ 并且仍没有任何一次匹配，则置 $next[i]=0$ 并移至下一个下标 $i+1$ 。 F.A.Q算法流程中的步骤三，为什么要将 $j$ 减少至 $next[j]$ ？ 考虑我们正在计算的 $next[i]$ 。我们要使 $k$ 最大化，并且保证 $B[1…k]$ 与 $B[i-k+1…i]$ 相等。将其拆成两部分看，我们需要在 $B[1…k-1]$ 与 $B[i-k+1…i-1]$ 相等的同时，保证 $B[k]=B[i]$ ，且 $k$ 取到最大值。 不难发现，如果只需要最大化 $k-1$ 使得 $B[1…k-1]$ 与 $B[i-k+1…i-1]$ 相等，我们可以很快得出答案。回顾一下前缀函数的定义即可发现，记 $j$ 为 $next[i-1]$，则此时的 $j$ 即为我们需要最大化的 $k-1$ 的值。如果这时又恰好满足 $B[j+1]=B[i]$ ，则我们需要最大化的 $k$ 即为 $j+1$ 。 然而此时如果不能满足 $B[j+1]=B[i]$ ，我们就只能考虑减小 $j$ 的值。在减小 $j$ 值的同时，我们要始终保证减小后的 $j’$ 满足 $B[1…j’]=B[j-j’+1…j]$ 。 结合上图不难看出，要使得 $B[1…j’]=B[i-j’…i-1]$，即保证 $B[1…j’]=B[j-j’+1…j]$ 。而 $j’$ 的确定也十分简单，再次结合前缀函数的定义可得， $j’$ 的取值应为 $next[j]$ 。 代码实现123456next[1] = 0;for (int i = 2, j = 0; i &lt;= M; ++i) { while (j &gt; 0 &amp;&amp; B[i] != B[j + 1]) j = next[j]; if (B[i] == B[j + 1]) j++; next[i] = j;} 在目标串中查找子串计算出 $f$ 数组，其中 $f[i]$ 为既是子串 $B[1…i]$ 的前缀同时也是子串 $A[1…i]$ 的后缀的最长前缀长度。（注意这里不一定是真前缀）在预处理前缀函数的过程中，相当于 $B$ 串与自己本身做了一次模式匹配，因此此处的算法流程与上一个操作十分类似。 算法流程 在循环中以 $i=1$ 到 $i=n$的顺序计算 $f[i]$ 的值。 为了计算当前的 $f[i]$ ，我们令变量 $j$ 表示右端点位于 $i-1$ 的最长匹配前后缀的长度。初始时 $j=f[i-1]$ 。 通过比较 $B[j+1]$ 和 $A[i]$ 来检查 $B$ 串中长度为 $j+1$ 的前缀是否也是 $A$ 串中长度为 $j+1$ 的后缀。如果二者相等，那么置 $f[i]=j+1$，否则减少 $j$ 至 $next[j-1]$ 并重复该过程。 如果 $j=0$ 并且仍没有任何一次匹配，则置 $f[i]=0$ 并移至下一个下标 $i+1$ 。 如果 $j=M$，即找到 $B$ 在 $A$ 中的一次出现。 代码实现123456for (int i = 1, j = 0; i &lt;= N; ++i) { while (j &gt; 0 &amp;&amp; A[i] != B[j + 1]) j = next[j]; if (A[i] == B[j + 1]) j++; f[i] = p; // if (f[i] == M) do something... }","link":"/2019/08/07/algorithm-kmp/"},{"title":"高斯消元","text":"高斯消元法（Gauss-Jordan elimination）是求解线性方程组的经典算法，它在当代数学中有着重要的地位和价值，是线性代数课程教学的重要组成部分。 高斯消元法除了用于线性方程组求解外，还可以用于行列式计算、求矩阵的逆，以及其他计算机和工程方面。 夏建明等人之前提出了应用图形处理器 (GPU) 加速求解线性方程组的高斯消元法，所提出的算法与基于 CPU 的算法相比较取得更快的运算速度。二是提出各种变异高斯消元法以满足特定工作的需要。 本文绝大部分内容转载自 OI-WIKI 高斯消元五步骤法高斯消元法在将增广矩阵化为最简形后对于自由未知量的赋值，需要掌握线性相关知识，且赋值存在人工经验的因素，使得在学习过程中有一定的困难，将高斯消元法划分为五步骤，从而提出五步骤法，内容如下： 增广矩阵行初等行变换为行最简形； 还原线性方程组； 求解第一个变量； 补充自由未知量； 列表示方程组通解。 利用实例进一步说明该算法的运作情况。 例二：利用高斯消元法五步骤法求解线性方程组： \\left\\{\\begin{aligned} 2x_1+5x_3+6x_4&=9 \\notag \\\\ x_3+x_4&=-4 \\notag \\\\ 2x_3+2x_4&=-8 \\notag \\end{aligned}\\right.增广矩阵行（初等）变换为行最简形所谓增广矩阵，即为方程组系数矩阵 $A$ 与常数列 $b$ 的并生成的新矩阵，即 $(A | b)$ ，增广矩阵行初等变换化为行最简形，即是利用了高斯消元法的思想理念，省略了变量而用变量的系数位置表示变量，增广矩阵中用竖线隔开了系数矩阵和常数列，代表了等于符号。 \\left(\\begin{matrix} 2 & 0 & 5 & 6 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 2 & 2 \\end{matrix} \\middle| \\begin{matrix} 9 \\\\ -4 \\\\ -8 \\end{matrix} \\right) \\xrightarrow{r_3-2r_2} \\left(\\begin{matrix} 2 & 0 & 5 & 6 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 9 \\\\ -4 \\\\ 0 \\end{matrix} \\right)化为行阶梯形 \\xrightarrow{\\frac{r_1}{2}} \\left(\\begin{matrix} 1 & 0 & 2.5 & 3 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 4.5 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \\xrightarrow{r_1-r_2 \\times 2.5} \\left(\\begin{matrix} 1 & 0 & 0 & 0.5 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 14.5 \\\\ -4 \\\\ 0 \\end{matrix} \\right)化为最简形 还原线性方程组 \\left\\{\\begin{aligned} x_1+0.5x_4 &= 14.5 \\notag\\\\ x_3+x_4 &= -4 \\notag \\\\ \\end{aligned}\\right.解释 所谓的还原线性方程组，即是在行最简形的基础上，将之重新书写为线性方程组的形式，即将行最简形中各位置的系数重新赋予变量，中间的竖线还原为等号。 求解第一个变量 \\left\\{\\begin{aligned} x_1 &= -0.5x_4+14.5\\notag \\\\ x_3 &= -x_4-4\\notag \\end{aligned}\\right.解释 即是对于所还原的线性方程组而言，将方程组中每个方程的第一个变量，用其他量表达出来。如方程组两方程中的第一个变量 $x_1$ 和 $x_3$ 补充自由未知量 \\left\\{\\begin{aligned} x_1 &= -0.5x_4+14.5 \\notag \\\\ x_2 &= x_2 \\notag \\\\ x_3 &= -x_4-4 \\notag \\\\ x_4 &= x_4 \\notag \\end{aligned}\\right.解释 第 3 步中，求解出变量 $x_1$ 和 $x_3$ ，从而说明了方程剩余的变量 $x_2$ 和 $x_4$ 不受方程组的约束，是自由未知量，可以取任意值，所以需要在第 3 步骤解得基础上进行解得补充，补充的方法为 $x_2 = x_2,x_4 = x_4$ ，这种解得补充方式符合自由未知量定义，并易于理解，因为是自由未知量而不受约束，所以只能自己等于自己。 列表示方程组的通解 \\begin{aligned} \\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\\\ x_4 \\end{pmatrix} &= \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix} x_2+ \\begin{pmatrix} -0.5 \\\\ 0 \\\\ -1 \\\\ 1 \\end{pmatrix} x_4 + \\begin{pmatrix} 14.5 \\\\ 0 \\\\ -4 \\\\ 0 \\end{pmatrix} \\notag \\\\ &= \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix} C_1+ \\begin{pmatrix} -0.5 \\\\ 0 \\\\ -1 \\\\ 1 \\end{pmatrix} C_2 + \\begin{pmatrix} 14.5 \\\\ 0 \\\\ -4 \\\\ 0 \\end{pmatrix} \\notag \\end{aligned}其中 $C_1$ 和 $C_2$ 为任意常数。 解释 即在第 4 步的基础上，将解表达为列向量组合的表示形式，同时由于 $x_2$ 和 $x_4$ 是自由未知量，可以取任意值，所以在解得右边，令二者分别为任意常数 $C_1$ 和 $C_2$ ，即实现了对方程组的求解。 代码实现其实可以根据自己解方程的习惯写代码……实现非常简单，基本不需要理论知识 12345678910111213141516171819202122232425262728293031void Gauss() { for (int i = 1; i &lt;= n; ++i) { bool flag = 0; for (int j = i; j &lt;= n; ++j) { if (a[j][i] != 0) { for (int k = i; k &lt;= n + 1; ++k) swap(a[i][k], a[j][k]); flag = 1; break; } } if (flag == 0) { puts(\"No Solution\"); exit(0); } double tmp = a[i][i]; for (int k = i; k &lt;= n + 1; ++k) a[i][k] /= tmp; for (int j = i + 1; j &lt;= n; ++j) { tmp = a[j][i]; for (int k = i; k &lt;= n + 1; ++k) a[j][k] -= tmp * a[i][k]; } } for (int i = n; i &gt;= 1; --i) { double x = 0; for (int j = i + 1; j &lt;= n; ++j) x += ans[j] * a[i][j]; ans[i] = a[i][n + 1] - x; }}","link":"/2019/10/31/algorithm-gauss/"},{"title":"算法学习-数论专题-卡特兰数","text":"咕咕咕~","link":"/2019/07/14/algorithm-maths-catalan/"},{"title":"算法学习-数论专题-乘法逆元","text":"概述 乘法逆元定义：如果一个线性同余方程$ax\\equiv 1 \\mod b$，则$x$成为$a \\mod b$的逆元，记作$a^{-1}$。 乘法逆元一般用于求$a\\/b\\mod p$的值（$p$通常为质数），是解决模意义下分数数值的必要手段。 对于$a\\/b\\mod p$，我们可以求出$b$在$\\mod p$下的逆元，然后乘上$a$再$\\mod p$，就是这个分数的值了。 求解逆元的方法扩展欧几里得法求解$ax\\equiv 1 \\mod b$ 等价于解不定方程 $ax+by=1$，求解出的$x$即为$a \\mod b$的逆元。 12345678void exgcd(int a, int b, int&amp; x, int&amp; y) { if (b == 0) { x = 1, y = 0; return; } exgcd(b, a % b, y, x); y -= a / b * x;} 快速幂法 费马小定理 若$p$为质数，$a$为正整数，且$a$、$p$互质，则$a^{p-1}\\equiv 1 (\\mod p)$。 因为$ax\\equiv 1\\mod b$ 所以$ax\\equiv a^{b-1}\\mod b$ 所以$x\\equiv a^{b-2}\\mod b$ 然后可以使用快速幂求解逆元。 代码略。 线性求逆元假设现在要求$inv[i]$。 考虑带余除法，设$p=iq+r$，则有$iq+r\\equiv 0\\mod p$ 注意到$p$是质数，因此$r$不为$0$，$r$的逆元存在 等式两边乘$i^{-1}r^{-1}$，得到$qr^{-1}+i^{-1}\\equiv 0\\mod p$ 因此$i^{-1}\\equiv -qr^{-1}\\equiv -(p\\/i)(p \\mod i)^{-1}\\mod p$ 12for (inv[1] = 1, i = 2; i &lt;= n; ++i) inv[i] = (p - p / i) * inv[p % i] % p;","link":"/2019/07/13/algorithm-maths-multiplicativeinversion/"},{"title":"算法学习-数论专题-素数的判定","text":"版权声明：本篇文章由特邀讲师胡家睿撰写，tth37只负责搬运、整理和发布；版权归胡家睿所有。 概述 素数定义：除1和本身以外没有其他因数的数 素数在信息学竞赛中有较多的应用，素数判定是解决复杂数论问题的基础。本篇文章介绍了一些素数判定的方法。 单个素数判定朴素判定： 1234567bool prime(int n){ if(n==1) return false;//特判1（不为素数） for(int i=2;i&lt;n;++i){ if(n%i==0) return false;//除1、n以外还存在因数，所以n为合数； } return true；//循环后没有判定为合数，则为素数。} 时间复杂度：$\\Theta (n)$ 优化： 1234567bool prime(int n){ if(n==1) return false;//特判1（不为素数） for(int i=2;i&lt;=sqrt(n);++i){ if(n%i==0) return false; } return true；} 时间复杂度：$\\Theta(\\sqrt{n})$ 证明： ​ 若一个数$n$为合数，则它一定拥有一个质因数$k$。可以知道，$n/k$（记为$s$）为$n$的因数，且$s$不等于$n$。$k$和$s$二者必定有一个数小于等于$\\sqrt{n}$，否则$k*s$一定大于$n$。所以只要在$\\sqrt{n}$以内循环一遍即可。 埃氏素数筛如果用上面的方法判定$1-n$以内所有素数，会发现时间复杂度非常高。那么这个时候就要用筛法了。大致意思是用素数来筛掉合数，然后用$f$数组储存是否是素数。 1234567f[1]=true;//特判还是很必要的for(int i=2;i&lt;=n;++i){ if(f[i]) continue;//i为合数直接跳过 for(int j=i+i;j&lt;=n;j+=i){ f[j]=true;//i为素数，i的倍数一定为合数 }} 优化： 1234567f[1]=true;for(int i=2;i&lt;=n;++i){ if(f[i]) continue; for(int j=i*i;j&lt;=n;j+=i){//这里只变了乘号，但是会快很多喔 f[j]=true; }} 原因是：$i*i$以下的所有合数都已经被筛掉了。具体证法，可以接着看下去（在线性筛里有类似的思想，所以看完可以尝试一下自己证明）。 素数线性筛上一个筛法时间复杂度$\\Theta(log log n)$非常接近线性。但是要达到线性还差一点（这里不是比赛要求掌握所以就当兴趣学吧） 上一个筛法的大概想法，是每一个素数的倍数都筛掉，所以是让每一个合数都被它的质因子筛一遍。 那么接下来的筛法，就是让每个合数的最小质因子筛一遍（要开一个prime数组存所有素数）。先放代码： 1234567891011121314151617181920212223242526#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;ll f[10005],prime[10005];int main(){ ll n,i,j,cnt=0; cin&gt;&gt;n; //这个地方不用特判1,因为我们判定是否为素数的方法是f[i]是否为0; for(i=2;i&lt;=n;++i) { if(!f[i]) { prime[++cnt]=i;//存入素数; f[i]=i; } for(j=1;j&lt;=cnt;++j) { if(prime[j]*i&gt;n||prime[j]&gt;f[i]) break;//判定出界或i的因子中有比当前素数更小的（即prime[j]*i已经被f[i]筛过了）; f[prime[j]*i]=prime[j];//标记所有未被标记的i的倍数； } } cin&gt;&gt;i; cout&lt;&lt;f[i]&lt;&lt;\" \"; return 0; } 核心就在于神奇的判定方法，可以多咀嚼咀嚼 时间复杂度$\\Theta(n)$搞定，还可以找到$1-n$内所有合数的最小质因数。","link":"/2019/04/13/algorithm-maths-primecheck/"},{"title":"算法学习-Pólya计数与Burnside引理","text":"概述如果题目中定义一种等价关系，满足等价关系的元素被看成同一类，只统计一次；这样的问题称为等价类计数问题。一般的等价类计数问题可以用 Burnside 引理或 Pólya定理解决。 模板置换置换实际上就是一一映射，$f$ 可以看成定义域和值域为 $\\lbrace 1,2,3,…,n\\rbrace$ 的函数，其中 $f(1)=a_1$， $f(2)=a_2$ 等等。 f= \\left(\\begin{array}{cccc} 1&2&...&n \\\\ a_1&a_2&...&a_n \\\\ \\end{array}\\right)函数复合如果 f= \\left(\\begin{array}{cccc} 1&2&...&n \\\\ a_1&a_2&...&a_n \\\\ \\end{array}\\right)且 g=\\left(\\begin{array}{cccc} 1&2&...&n \\\\ b_1&b_2&...&b_n \\\\ \\end{array}\\right)是 $\\lbrace 1,2,3,…,n\\rbrace$ 的两个置换，则他们的复合按照先 $f$ 后 $g$ 的顺序放置得到一个新置换： g\\circ f= \\left(\\begin{array}{cccc} 1&2&...&n \\\\\\ a_1&a_2&...&a_n \\\\ \\end{array}\\right) \\circ \\left(\\begin{array}{cccc} 1&2&...&n \\\\ b_1&b_2&...&b_n \\\\ \\end{array}\\right)循环为了处理方便，常常把置换分解成循环的乘积，其中每个循环代表一些元素“循环移位”。比如 $(1,4,3)$ 这个循环表示 $1\\rightarrow 4$，$4\\rightarrow 3$，$3\\rightarrow 1$。 易证任意置换都可以分解为循环乘积的形式。 例题 在 2*2 方格中涂黑白两色，方格允许旋转，有几种方法？ 假设不考虑方格允许旋转，则共有 16 种上色方案。本题中“旋转后相同”即为一个等价关系，有了等价关系，所有元素会被分为若干个等价类，我们需要统计的即为等价类的个数。 对于一个置换 $f$ ，若一个着色方案 $s$ 经过置换后不变，称 $s$ 为 $f$ 的不动点。将 $f$ 的不动点数目记为 $C(f)$，则可以证明等价类数目为置换群中所有 $C(f)$ 的平均值。此结论称为 Burnside 引理。 一般地，如果置换 $f$ 被分解为 $m(f)$ 个循环的乘积，那么每个循环内所有位置的颜色必须相同，假设涂 $k$ 种颜色，则有 $C(f)=k^{m(f)}$。带入 Burnside 引理的表达式之后得到 Pólya 定理：等价类的个数等于置换群种所有置换 $f$ 的 $k^{m(f)}$ 的平均数。 将 $t$ 种颜色的 $n$ 个小球排成一个环，允许旋转和翻转，有几种方法？ 首先考虑旋转置换。记置换 $f_i$ 为将环形顺时针旋转 $i$ 个单位长度。显然，$m(f_i)=gcd(i,n)$ 。 其次考虑翻转置换。当 $n$ 为奇数时，$|G|=n$，且 $m(f)=(n-1)/2+1$；当 $n$ 为偶数时，$|G|=n$，且 $m(f)=n/2+1$。 记： a=\\Sigma_{i=0}^{n-1} t^{gcd(i,n)}\\\\ b=\\begin{cases} t^{(n-1)/2+1} , n=2k+1\\\\ t^{n/2+1},n=2k \\end{cases}最终答案 $ans=(a+b)/2n$。","link":"/2019/08/13/algorithm-polya/"},{"title":"算法学习-可持久化数据结构","text":"概述可持久化数据结构可以存储数据集在任意时间的历史状态。“可持久化”的基本思想是在每项操作结束后，仅创建数据结构中发生改变的部分的副本，不拷贝其他部分。这样一来，维护数据结构的时间复杂度没有增加，空间复杂度仅增长为与时间同级的规模。换言之，可持久化数据结构能够高效地记录一个数据结构的所有历史状态。 可持久化Trie【实现过程】 设当前可持久化Trie的根节点为root，令p=root，i=0 建立一个新的节点，令root‘=q 若p!=0，则对于每种字符c，令trie[q,c]=trie[p,c] 建立一个新的节点q’，令trie[q,s]=q‘ 令p=trie[p,s]，q=trie[q,s]，i=i+1 重复步骤3-5，直到i到达字符串末尾 【例题】最大异或和 luogu-p4735给定一个非负整数序列{a}，初始长度为N。 有M个操作，有以下两种操作类型： A x：添加操作，表示在序列末尾添加一个数x，序列的长度N+1。 Q l r x：询问操作，你需要找到一个位置p，满足l≤p≤r，使得： a[p]⊕a[p+1]⊕…⊕a[N]⊕x 最大，输出最大是多少。 【分析】考虑异或前缀和。根据异或运算的性质： a[p]\\oplus a[p+1]\\oplus ...\\oplus a[N]\\oplus x=s[p-1]\\oplus s[N]\\oplus x对于添加操作，序列s很容易维护。对于询问操作，问题变为：已知一个整数val=s[N] xor x，求一个位置p，满足l-1&lt;=p&lt;=r-1，使得s[p] xor val最大。显然可以将s数组插入可持久化Trie中，每次取出在l与r范围内的数据进行贪心（尽量往相反的节点走），从而求出答案。 【代码】123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#pragma GCC optimize(3)//QwQ#include&lt;bits/stdc++.h&gt;using namespace std;const int MAXN=600005;const int DEP=24;int N,M;int trie[MAXN*26][2],sum[MAXN*26];int head[MAXN],cnt=1;int s[MAXN];inline void insert(int c,int u,int val,int d){ sum[u]=sum[c]+1; if(d&lt;0) return; int x=(val&gt;&gt;d)&amp;1; trie[u][!x]=trie[c][!x]; insert(trie[c][x],trie[u][x]=++cnt,val,d-1);}inline int query(int c,int u,int val,int d){ if(d&lt;0) return 0; int x=(val&gt;&gt;d)&amp;1; if(sum[trie[u][!x]]&gt;sum[trie[c][!x]]) return (1&lt;&lt;d)+query(trie[c][!x],trie[u][!x],val,d-1); else return query(trie[c][x],trie[u][x],val,d-1);}int main(){ scanf(\"%d%d\",&amp;N,&amp;M); insert(0,0,0,DEP); for(register int i=1;i&lt;=N;++i){ int a; scanf(\"%d\",&amp;a); s[i]=s[i-1]^a; insert(head[i-1],head[i]=++cnt,s[i],DEP); } for(register int i=1;i&lt;=M;++i){ char opt; getchar(),opt=getchar(); if(opt=='A'){ int a; scanf(\"%d\",&amp;a); N++; s[N]=s[N-1]^a; insert(head[N-1],head[N]=++cnt,s[N],DEP); } else{ int l,r,a; scanf(\"%d%d%d\",&amp;l,&amp;r,&amp;a); if(l==r) printf(\"%d\\n\",s[l-1]^s[N]^a); else printf(\"%d\\n\",query(head[l-2],head[r-1],a^s[N],DEP)); } } return 0;} 可持久化数组【例题】【模板】可持久化数组 luogu-p3919如题，你需要维护这样的一个长度为 N 的数组，支持如下几种操作 在某个历史版本上修改某一个位置上的值 访问某个历史版本上的某一位置的值 此外，每进行一次操作（对于操作2，即为生成一个完全一样的版本，不作任何改动），就会生成一个新的版本。版本编号即为当前操作的编号（从1开始编号，版本0表示初始状态数组） 【分析】在原数组上建立线段树，在叶子节点上记录原数组数值。执行完修改操作后，根据可持久化的思想，只需更改一条链上的节点信息；执行完访问操作后，则可以将目前操作的根节点指针指向被查询的历史状态根节点。 【代码】1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;bits/stdc++.h&gt;using namespace std;const int MAXN=1000005;struct Node{ int l,r,val;}node[MAXN*22+5];int N,M,cnt;int a[MAXN],head[MAXN];inline void build(Node&amp; u,int l,int r){ if(l==r){ u.val=a[l]; return; } int mid=(l+r)&gt;&gt;1; build(node[u.l=++cnt],l,mid); build(node[u.r=++cnt],mid+1,r);}inline void change(Node c,Node&amp; u,int l,int r,int p,int val){ if(l==r){ u.val=val; return; } int mid=(l+r)&gt;&gt;1; if(p&lt;=mid){ change(node[c.l],node[u.l=++cnt],l,mid,p,val); u.r=c.r; } else{ change(node[c.r],node[u.r=++cnt],mid+1,r,p,val); u.l=c.l; }}inline int query(Node u,int l,int r,int p){ if(l==r) return u.val; int mid=(l+r)&gt;&gt;1; if(p&lt;=mid) return query(node[u.l],l,mid,p); else return query(node[u.r],mid+1,r,p);}int main(){ scanf(\"%d%d\",&amp;N,&amp;M); for(register int i=1;i&lt;=N;++i) scanf(\"%d\",&amp;a[i]); build(node[0],1,N); for(register int i=1;i&lt;=M;++i){ int v,opt,p,val; scanf(\"%d%d\",&amp;v,&amp;opt); if(opt==1){ scanf(\"%d%d\",&amp;p,&amp;val); change(node[head[v]],node[head[i]=++cnt],1,N,p,val); } else{ scanf(\"%d\",&amp;p); head[i]=head[v]; printf(\"%d\\n\",query(node[head[i]],1,N,p)); } } return 0;} 可持久化值域线段树（主席树）【例题】【模板】可持久化线段树 luogu-p3834给定N个整数构成的序列，将对于指定的闭区间查询其区间内的第K小值。 【分析】值域有负数出现，考虑离散化。假设离散化后的值域为[1,L]。 在值域上建立线段树，每个节点上存储该值域内有多少个数据。对线段树进行可持久化处理，与上一题可持久化数组实现方式类似。 在查询时，如果一个节点的左子节点上的cnt值小于等于正在查询的K，则问题转化为求左半区间内第K小值；否则，转化为求右半区间内第K-cnt小值。 查询时的操作类似于在值域上的二分，因此复杂度在log级别。 【代码】1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;using namespace std;#define id(x) (lower_bound(b+1,b+L+1,a[x])-b)#define rid(x) (b[x])const int MAXN=200005;struct Node{ int l,r,sum;}node[MAXN&lt;&lt;6];int N,M,L,cnt;int a[MAXN],b[MAXN];int head[MAXN];inline void build(Node u,int l,int r){ u.sum=0; if(l==r) return; int mid=(l+r)&gt;&gt;1; build(node[u.l=++cnt],l,mid); build(node[u.r=++cnt],mid+1,r);}inline void insert(Node c,Node&amp; u,int l,int r,int p){ u.sum=c.sum+1; if(l==r) return; int mid=(l+r)&gt;&gt;1; if(p&lt;=mid) insert(node[c.l],node[u.l=++cnt],1,mid,p),u.r=c.r; else insert(node[c.r],node[u.r=++cnt],mid+1,r,p),u.l=c.l;}inline int query(Node c,Node u,int l,int r,int k){ if(l==r) return l; int sum=node[u.l].sum-node[c.l].sum,mid=(l+r)&gt;&gt;1; if(sum&gt;=k) return query(node[c.l],node[u.l],1,mid,k); else return query(node[c.r],node[u.r],mid+1,r,k-sum);}int main(){ scanf(\"%d%d\",&amp;N,&amp;M); for(register int i=1;i&lt;=N;++i){ scanf(\"%d\",&amp;a[i]); b[i]=a[i]; } sort(b+1,b+N+1); L=unique(b+1,b+N+1)-(b+1); head[0]=0; build(node[0],1,L); for(register int i=1;i&lt;=N;++i) insert(node[head[i-1]],node[head[i]=++cnt],1,L,id(i)); for(register int i=1;i&lt;=M;++i){ int l,r,k; scanf(\"%d%d%d\",&amp;l,&amp;r,&amp;k); printf(\"%d\\n\",rid(query(node[head[l-1]],node[head[r]],1,L,k))); } return 0;}","link":"/2019/03/29/algorithm-persistentdatastructure/"},{"title":"算法学习-点分治&动态点分治","text":"点分治概述点分治适合处理大规模的树上路径信息问题。 点分治的实现基于以下结论：一棵子树上的任意一条路径，要么经过树根，要么被完全包含在树根的一棵子树中。 定义 $solve()$ 函数，对每棵子树进行分值处理，并保证 $O(n\\log n)$ 的时间复杂度。 模板这么简单还要模板？ 动态点分治（点分树）概述在树上的每个节点上建立数据结构，存储其控制范围内所有点与之的距离信息。在进行修改或查询操作时，只需访问当前节点的所有祖先（最多 $O(\\log n)$ 个）即可。 模板代码过于毒瘤 不贴了","link":"/2019/09/11/algorithm-treedivide/"},{"title":"算法学习-树链剖分","text":"概述树链剖分用于将树分割成若干条链的形式，以维护树上路径的信息。 具体来说，将整棵树剖分为若干条链，使它组合成线性结构，然后用其他的数据结构维护信息。 模板【实现过程】 第一个 DFS 记录每个结点的深度（deep）、子树大小（size）。 第二个 DFS 记录每个结点的重子结点（heavy-son）、重边优先遍历时的 DFN 序、所在链的链顶（top，且应初始化为结点本身）。 链上的 DFN 序是连续的，可以使用线段树，树状数组维护。 每次选择深度较大的链往上跳，直到两点在同一条链上。 在 DFS 搜索的时候，子树中的结点的 DFN 序是连续的。 每一个结点记录 bottom 表示所在子树连续区间末端的结点。 这样就把子树信息转化为连续的一段区间信息。 【代码】123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 100005;vector&lt;int&gt; G[MAXN];int N, M, R, P;int w[MAXN], fa[MAXN], size[MAXN], son[MAXN], top[MAXN], dep[MAXN];int dfn[MAXN], dfn_index;struct Node { int l, r, sum, tag;}node[MAXN * 2];int cnt;int a[MAXN];inline void build(Node&amp; u, int l, int r) { u.tag = 0; if (l == r) { u.sum = a[l]; return; } int mid = (l + r) &gt;&gt; 1; build(node[u.l = ++cnt], l, mid); build(node[u.r = ++cnt], mid + 1, r); u.sum = (node[u.l].sum + node[u.r].sum);}inline void pushdown(Node&amp; u, int l, int r) { if (u.tag) { int mid = (l + r) &gt;&gt; 1; node[u.l].sum = (node[u.l].sum + u.tag * (mid - l + 1)); node[u.r].sum = (node[u.r].sum + u.tag * (r - mid)); node[u.l].tag = (node[u.l].tag + u.tag); node[u.r].tag = (node[u.r].tag + u.tag); u.tag = 0; }}inline void modify(Node&amp; u, int l, int r, int ql, int qr, int val) { if (ql &lt;= l &amp;&amp; r &lt;= qr) { u.tag = (u.tag + val) % P; u.sum = (u.sum + val * (r - l + 1)) % P; return; } pushdown(u, l, r); int mid = (l + r) &gt;&gt; 1; if (ql &lt;= mid) modify(node[u.l], l, mid, ql, qr, val); if (mid &lt; qr) modify(node[u.r], mid + 1, r, ql, qr, val); u.sum = (node[u.l].sum + node[u.r].sum) % P;}inline int query(Node&amp; u, int l, int r, int ql, int qr) { if (ql &lt;= l &amp;&amp; r &lt;= qr) { return u.sum; } int mid = (l + r) &gt;&gt; 1, ans = 0; pushdown(u, l, r); if (ql &lt;= mid) ans = (ans + query(node[u.l], l, mid, ql, qr)) % P; if (mid &lt; qr) ans = (ans + query(node[u.r], mid + 1, r, ql, qr)) % P; return ans;}inline void dfs1(int u, int fath) { size[u] = 1; fa[u] = fath; dep[u] = dep[fath] + 1; for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; if (v == fath) continue; dfs1(v, u); size[u] += size[v]; if (size[v] &gt; size[son[u]]) son[u] = v; }}inline void dfs2(int u, int topc) { top[u] = topc; dfn[u] = ++dfn_index; a[dfn[u]] = w[u]; if (son[u] == 0) return; dfs2(son[u], topc); for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; if (v == fa[u] || v == son[u]) continue; dfs2(v, v); }}inline void ModifySubtree(int u, int val) { modify(node[0], 1, N, dfn[u], dfn[u] + size[u] - 1, val);}inline int QuerySubtree(int u) { return query(node[0], 1, N, dfn[u], dfn[u] + size[u] - 1);}inline void ModifyChain(int u, int v, int val) { val %= P; while (top[u] != top[v]) { if (dep[top[u]] &lt; dep[top[v]]) swap(u, v); modify(node[0], 1, N, dfn[top[u]], dfn[u], val); u = fa[top[u]]; } if (dep[u] &lt; dep[v]) swap(u, v); modify(node[0], 1, N, dfn[v], dfn[u], val);}inline int QueryChain(int u, int v) { int ans = 0; while (top[u] != top[v]) { if (dep[top[u]] &lt; dep[top[v]]) swap(u, v); ans = (ans + query(node[0], 1, N, dfn[top[u]], dfn[u])) % P; u = fa[top[u]]; } if (dep[u] &lt; dep[v]) swap(u, v); ans = (ans + query(node[0], 1, N, dfn[v], dfn[u])) % P; return ans;}int main() { scanf(\"%d%d%d%d\", &amp;N, &amp;M, &amp;R, &amp;P); for (register int i = 1; i &lt;= N; ++i) scanf(\"%d\", &amp;w[i]); for (register int i = 1; i &lt; N; ++i) { int u, v; scanf(\"%d%d\", &amp;u, &amp;v); G[u].push_back(v); G[v].push_back(u); } dfs1(R, 0); dfs2(R, R); build(node[0], 1, N); for (register int i = 1; i &lt;= M; ++i) { int opt, x, y, z; scanf(\"%d\", &amp;opt); if (opt == 1) { scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z); ModifyChain(x, y, z); } if (opt == 2) { scanf(\"%d%d\", &amp;x, &amp;y); printf(\"%d\\n\", QueryChain(x, y)); } if (opt == 3) { scanf(\"%d%d\", &amp;x, &amp;z); ModifySubtree(x, z); } if (opt == 4) { scanf(\"%d\", &amp;x); printf(\"%d\\n\", QuerySubtree(x)); } } return 0;}","link":"/2019/07/04/algorithm-treechainsectioning/"},{"title":"算法学习-splay伸展树","text":"本文部分内容转载自 OI Wiki Splay $\\LaTeX$ 就先咕着吧……有时间慢慢搞 概述Splay是一种二叉查找树，它通过不断将某个节点旋转到根节点，使得整棵树仍然满足二叉查找树的性质，并且保持平衡而不至于退化为链，它由 Daniel Sleator 和 Robert Tarjan 发明。 结构节点维护信息 root 根节点编号 cnt 节点个数 node[] 节点内部信息 fa 父亲 ch[0/1] 左右儿子编号 val 节点权值 cnt 权值出现次数 sum 子树大小 1234struct Node { int fa, ch[2], val, cnt, sum;}node[MAXN];int root, cnt; 基本操作 update(u) 在改变节点位置后，将节点u的sum值更新 identify(u) 判断节点u是父亲的左儿子还是右儿子 clear(u) 销毁节点u 123456789void update(int u) { node[u].sum = node[u].cnt + node[node[u].ch[0]].sum + node[node[u].ch[1]].sum;}bool identify(int u) { return u == node[node[u].fa].ch[1];}void clear(int u) { node[u].fa = node[u].ch[0] = node[u].ch[1] = node[u].val = node[u].cnt = node[u].sum = 0;} 连接操作 connect(u, f, p) 将u连接在f的下方，连接方向为p 1234void connect(int u, int f, int p) { node[u].fa = f; node[f].ch[p] = u;} 旋转操作分析咕咕咕 1234567891011void rotate(int x) { int y = node[x].fa; int r = node[y].fa; int rp = identify(y); int yp = identify(x); int b = node[x].ch[yp ^ 1]; connect(b, y, yp); connect(y, x, yp ^ 1); connect(x, r, rp); update(y), update(x);} 旋转需要保证： 平衡树的中序遍历不变（不能破坏BST的性质） 受影响的节点维护的信息依然正确有效 root必须指向旋转后的根节点 具体分析旋转步骤（假设需要旋转的节点为x，其父亲为y，以右旋为例）： 将y的左儿子指向x的右儿子，且x的右儿子的父亲指向y 将x的右儿子指向y，且y的父亲指向x 如果原来的y还有父亲z，那么把z的某个儿子（原来y所在的儿子位置）指向x，且x的父亲指向z 1234567891011void rotate(int x) { int y = node[x].fa, z = node[y].fa, p = identify(x); node[y].ch[p] = node[x].ch[p ^ 1]; node[node[x].ch[p ^ 1]].fa = y; node[x].ch[p ^ 1] = y; node[y].fa = x; node[x].fa = z; if (z) node[z].ch[y == node[z].ch[1]] = x; update(y); update(x);} Splay 操作Splay规定：每访问一个节点后都要强制将其旋转到根节点。此时旋转操作具体分为6种情况讨论（其中x为需要旋转到根的节点） 分析咕咕咕 12345void splay(int x) { for (int f = node[x].fa; f = node[x].fa, f; rotate(x)) if (node[f].fa &amp;&amp; identify(x) == identify(f)) rotate(f); root = x;} 插入操作分析咕咕咕 123456789101112131415161718192021222324252627282930void insert(int val) { if (root == 0) { node[++cnt].val = val; node[cnt].cnt++; root = cnt; update(root); return; } int cur = root, f = 0; while (1) { if (node[cur].val == val) { node[cur].cnt++; update(cur); update(f); splay(cur); break; } f = cur, cur = node[cur].ch[node[cur].val &lt; k]; if (cur == 0) { node[++cnt].val = val; node[cnt].cnt++; node[cnt].fa = f; node[f].ch[node[f].val &lt; k] = cnt; update(cnt); update(f); splay(cnt); break; } }} 查询x的排名分析咕咕咕 123456789101112131415int queryid(int val) { int ans = 0, cur = root; while (1) { if (val &lt; node[cur].val) cur = node[cur].ch[0]; else { ans += node[node[cur].ch[0]].sum; if (val == node[cur].val) { splay(cur); return ans + 1; } ans += node[cur].cnt; cur = node[cur].ch[1]; } }} 查询排名为k的数分析咕咕咕 1234567891011int queryrid(int k) { int cur = root; while (1) { if (node[cur].ch[0] &amp;&amp; k &lt;= node[node[cur].ch[0]].sum) cur = node[cur].ch[0]; else { k -= node[cur].cnt + node[node[cur].ch[0]].sum; if (k &lt;= 0) return node[cur].val; cur = node[cur].ch[1]; } }} 查询前驱分析古古古 1234567int querypre(int val) { insert(val); int cur = node[root].ch[0]; while (node[cur].ch[1]) cur = node[cur].ch[1]; delet(val); return cur;} 查询后继1234567int querynxt(int val) { insert(val); int cur = node[root].ch[1]; while (node[cur].ch[0]) cur = node[cur].ch[0]; delet(val); return cur;} 删除元素1234567891011121314151617181920212223242526272829303132void delet(int val) { queryid(val); if (node[root].cnt &gt; 1) { node[root].cnt--; update(root); return; } if (node[root].ch[0] == 0 &amp;&amp; node[root].ch[1] == 0) { clear(root); root = 0; return; } if (node[root].ch[1] == 0) { int cur = root; root = node[root].ch[0]; node[root].fa = 0; clear(cur); return; } if (node[root].ch[0] == 0) { int cur = root; root = node[root].ch[1]; node[root].fa = 0; clear(cur); return; } int u = querypre(val), cur = root; // ??? node[node[cur].ch[1]].fa = u; node[u].ch[1] = node[cur].ch[1]; clear(cur); update(root);}","link":"/2019/07/24/algorithm-splay/"},{"title":"算法学习-树套树","text":"本文部分内容转载自 OI Wiki 树状数组套主席树 概述普通数据结构维护单一维度信息，树套树维护多维度信息。 树状数组套权值线段树树状数组套权值线段树可以在 $O(n \\log^2 n)$ 的时间复杂度解决动态区间 $k$ 小值问题。 如果用线段树套平衡树中所论述的，用线段树套平衡树，即对于线段树的每一个节点，对于其所表示的区间维护一个平衡树，然后用二分来查找 $k$ 小值。由于每次查询操作都要覆盖多个区间，即有多个节点，但是平衡树并不能多个值一起查找，所以时间复杂度是 $O(n\\log^3 n)$，并不是最优的。 思路是，把二分答案的操作和查询小于一个值的数的数量两种操作结合起来。最好的方法是使用 线段树套主席树 。 说是主席树其实不准确，因为并不是对线段树的可持久化，各个线段树之间也没有像主席树各版本之间的强关联性，所以称为 动态开点权值线段树 更为确切。 思路类似于线段树套平衡树，即对于线段树所维护的每个区间，建立一个动态开点权值线段树，表示其所维护的区间的值。 在修改操作进行时，先在线段树上从上往下跳到被修改的点，删除所经过的点所指向的动态开点权值线段树上的原来的值，然后插入新的值，要经过 $O(\\log n)$ 个线段树上的节点，在动态开点权值线段树上一次修改操作是 $O(\\log n)$ 的，所以修改操作的时间复杂度为 $O(\\log^2 n)$ 。 由于线段树的常数较大，在实现中往往使用常数更小且更方便处理前缀和的 树状数组 实现。 给出一种代码实现：luogu-p2617 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;using namespace std;#define id(x) (lower_bound(b + 1, b + L + 1, x) - b)#define rid(x) (b[x])#define lowbit(x) (x &amp; (-x))const int MAXN = 100005 * 2;struct op { char opt; int i, j, k, t;}ops[MAXN];struct Node { int l, r, sum; Node() {l = r = sum = 0;}}node[MAXN * 80];int cnt, c[MAXN];int N, M, L;int a[MAXN], b[MAXN];int qr[MAXN], ql[MAXN], qrlen, qllen;void insert(int&amp; u, int l, int r, int p, int val) { if (u == 0) u = ++cnt; node[u].sum += val; if (l == r) return; int mid = (l + r) &gt;&gt; 1; if (p &lt;= mid) insert(node[u].l, l, mid, p, val); else insert(node[u].r, mid + 1, r, p, val);}void modify(int u, int p, int val) { for (; u &lt;= N; u += lowbit(u)) insert(c[u], 1, L, p, val);}void pre(int u, int* a, int&amp; len) { len = 0; for (; u &gt;= 1; u -= lowbit(u)) a[++len] = c[u];}int query(int l, int r, int k) { if (l == r) return l; int mid = (l + r) &gt;&gt; 1, lsum = 0; for (int i = 1; i &lt;= qrlen; ++i) lsum += node[node[qr[i]].l].sum; for (int i = 1; i &lt;= qllen; ++i) lsum -= node[node[ql[i]].l].sum; if (lsum &gt;= k) { for (int i = 1; i &lt;= qrlen; ++i) qr[i] = node[qr[i]].l; for (int i = 1; i &lt;= qllen; ++i) ql[i] = node[ql[i]].l; return query(l, mid, k); } else { for (int i = 1; i &lt;= qrlen; ++i) qr[i] = node[qr[i]].r; for (int i = 1; i &lt;= qllen; ++i) ql[i] = node[ql[i]].r; return query(mid + 1, r, k - lsum); }}int main() { scanf(\"%d%d\", &amp;N, &amp;M); for (register int i = 1; i &lt;= N; ++i) { scanf(\"%d\", &amp;a[i]), b[++L] = a[i], c[i] = ++cnt; } for (register int i = 1; i &lt;= M; ++i) { cin &gt;&gt; ops[i].opt; if (ops[i].opt == 'Q') { scanf(\"%d%d%d\", &amp;ops[i].i, &amp;ops[i].j, &amp;ops[i].k); } else { scanf(\"%d%d\", &amp;ops[i].i, &amp;ops[i].t); b[++L] = ops[i].t; } } sort(b + 1, b + L + 1); L = unique(b + 1, b + L + 1) - b - 1; for (register int i = 1; i &lt;= N; ++i) { a[i] = id(a[i]); modify(i, a[i], 1); } for (register int i = 1; i &lt;= M; ++i) { if (ops[i].opt == 'Q') { pre(ops[i].j, qr, qrlen); pre(ops[i].i - 1, ql, qllen); printf(\"%d\\n\", rid(query(1, L, ops[i].k))); } else { modify(ops[i].i, a[ops[i].i], -1); a[ops[i].i] = id(ops[i].t); modify(ops[i].i, a[ops[i].i], 1); } } return 0;} 未完待续……等我学完平衡树再接着弄","link":"/2019/07/21/algorithm-treeintree/"},{"title":"算法学习-虚树","text":"概述在处理某些树上问题时，并非树上的所有节点都起作用；这时可以借助虚树，将树上重要的点构造成一棵树，在虚树上处理问题，优化时间复杂度。 模板用栈来维护虚树上的一条从根到 $u$ 的链。如果 $u$ 是栈顶节点的儿子，则入栈；否则将栈中 dfn 值大于 $lca(u,s.top())$ 的元素出栈。 伪代码1234567891011将树上所有关键点按照 dfs 序排序stack.push(1)for u = 1 ~ n: //假设当前正在处理节点 u lca = Lca(u, stack.top()) while stack.top != lca: tmp = stack.top() stack.pop() if (dfn[stack.top()] &lt; dfn[lca]): stack.push(lca) AddEdge(stack.top(), tmp) stack.push(u)","link":"/2019/08/29/algorithm-virtualtree/"},{"title":"公告 2019-03-24","text":"2019/3/24，tth37搭建了这个github博客。 tth37希望在这个博客里记录一些自己学习OI的心得，并发布一些题解，贴出学习规划。 但tth37实在是太弱了，因此他会更新得十分缓慢。 另外，还请shiwt巨佬多多指教。 任何一个伟大的思想，都有一个微不足道的开始。 p.s. 可能会将洛谷博客上的文章搬运过来，所以有些文章的发布时间可能在此之前，请别见怪。","link":"/2019/03/24/bulletin-2019-3-24/"},{"title":"公告 2019-04-08","text":"tth37 Blog已经绑定了最新域名：tth37.cn ！(购买自阿里云) 由于一些奇怪的原因（DNS域名解析和CNAME配置问题），我的博客在四月七日至四月八日出现许多异常，现已全部修复。 但在四月九日至四月十日的测试中，我被疯狂打脸；现在已经可以保证，只要在浏览器输入栏输入 tth37.cn，即可自动跳转https://tth37.cn，并在*CloudFlare*证书授权下安全运行。 请大佬们在新域名下体验高速加载和流畅访问新体验吧！ 另外，左侧边栏“日程表”已经启用；网站基本搭建完毕。以后将缩减网站维护时间。","link":"/2019/04/08/bulletin-2019-4-8/"},{"title":"公告 2019-5-18","text":"Hi~ 访问我网站的小崽子们~ 想在评论区发言的同时留下自己的个人头像吗？速戳这里！（Gravatar.com） 在这个网站注册用户，并在评论区留言时留下在Gravatar的账号邮箱，即可在评论区显示头像！ 可以在这里测试一下 由于网站是国家顶级域名（*.cn），所以缓存可能需要一周（或更长）的时间才能更新，请耐心等待！ 谢谢资瓷！","link":"/2019/05/18/bulletin-2019-5-18/"},{"title":"公告 2019-6-20","text":"招募启事tth37最近发现，他写了好多好多题解啦。但是这些题解全都被展示在Homepage里，导致Homepage不够简洁，题目检索不太方便。 于是，tth37决定在每篇题解最前面，写一段题目内容的一句话总结。但是tth37比较忙，实在不想做这件事，因此他决定招募跪求巨佬来帮他完成这项工作。 一份完整的一句话总结必须清楚地概括题面（拒绝花里胡哨），并且给出数据范围。一切字母必须采用$L^AT_EX$公式。（百度一下？） 写好一句话总结后，请将其上传至洛谷剪贴板，并将剪贴板链接发给tth37。tth37会根据其质量，酌情发送0.01~0.66元红包作为报酬。 如果在座的各位对本活动反响不够热烈，tth37可能会强迫你们当中的一些人完成这项任务。当然，没有报酬。","link":"/2019/06/20/bulletin-2019-6-20/"},{"title":"公告 2019-8-26","text":"上一篇公告 Hi~ 访问我网站的小崽子们~ 想在评论区发言的同时留下自己的个人头像吗？快快注册一个Github账号吧！学信息没个Github账号怎么行 我的网站与Github完全兼容，可以使用Github登录我的网站，并且在文章下方评论！ 可以在这里测试一下 虽然网站是国家顶级域名（*.cn），但是Github头像的更新是实时的，注册Github账号之后立刻可以到我的博客评论！ 谢谢资瓷！","link":"/2019/08/26/bulletin-2019-8-26/"},{"title":"CF游记-Codeforces Round","text":"比赛链接 人生第二次觉得CF的题还是可做的。目前只弄了5道，剩下一题咕着。 #A City Day简单模拟，开心的话可以写个单调队列。 #B Water Lily初中数学题，勾股定理。 (x+H)^2=x^2+L^2 \\\\ x=(L^2-H^2)/2H#C MP3既然硬盘的大小是固定的，那么 $K$ 应该尽可能大。为了让 $K$ 尽可能大， $k$ 也要尽可能大。 所以： k=\\lfloor(I*8)/n\\rfloor \\\\ K=2^k把 $K$ 求出来之后，我们实际上只需保留 $K$ 种不同的数字，并使删除的数字最少。 根据题意，我们只能删除最大的或最小的数。考虑对 $a$ 数组离散化，并用 $b$ 数组记录每个数值出现的次数。保留下来的数值一定是连续的$K$个，只需在 $b$数组上进行前缀和预处理，枚举保留的 $K$ 个数值位置即可。 #D Welfare State非主流警告⚠ 观察到只有一次查询，所以我们可以针对每个位置，求出当前位置在经过 $q$ 次操作后的值并输出。 先来看两个结论： 可以忽略对当前位置的最后一次一号操作之前的所有操作。 管你之前被改成什么了，经过一次一号操作就得重新来过。 对于连续的几次二号操作，只需保留 $x$ 最大的那一次操作。 废话。 本题中二号操作是针对整体的，所以考虑开数组 $s$ 记录所有二号操作的后缀最大值。在针对每一位置进行计算时，只需将最后一次一号操作之前的操作删除后，与二号操作的后缀最大值比较即可得出答案。 #E Matching vs Independent Set#F Rectangle Painting 1超水的一道 F 题！ $f[x1][y1][x2][y2]$表示将一个矩形全部涂成白色的最小费用，状态转移考虑由两个子矩形合并或将一整块上色即可。","link":"/2019/08/01/codeforces-1199/"},{"title":"题目列表-动态规划","text":"任务安排（斜率优化+费用提前计算） f[i]=min_{0\\le j","link":"/2019/03/20/list-dp/"},{"title":"题目列表-网络流","text":"方格取数问题（二分图+建模技巧）将原图黑白染色，并保证产生矛盾的两个位置颜色不同。源点连接黑点，白点连接汇点，黑点连接与之产生矛盾的白点。通过 最大和=全局和-最小割，在建立的网络上跑最小割（最大流）即可。 123456789101112131415161718192021for(register int i=1;i&lt;=M;++i){ for(register int j=1;j&lt;=N;++j){ int w; scanf(\"%d\",&amp;w); sum+=w; if((i+j)&amp;1){ AddEdge(S,(i-1)*N+j,w); AddEdge((i-1)*N+j,S,INF); for(register int k=0;k&lt;=3;++k){ int tx=i+nx[k],ty=j+ny[k]; if(tx&lt;1||tx&gt;M||ty&lt;1||ty&gt;N) continue; AddEdge((i-1)*N+j,(tx-1)*N+ty,INF); AddEdge((tx-1)*N+ty,(i-1)*N+j,0); } } else{ AddEdge((i-1)*N+j,T,w); AddEdge(T,(i-1)*N+j,INF); } } }","link":"/2019/03/24/list-networkflow/"},{"title":"2019CSP-S复习计划","text":"Hey, password is required here. 196ffd93c2eb511d907d1250bbad7b244cfc7e5f54de813a221544db5cee153c561665681fddcf94359c724b2dd5e524df2b3305c77d30d33f91cde1278a6fdb61014e146ae0aed0eb9e8c97dadd1ea40f990420163cf344460f9bd2176cfee5a112345d0c001d437253a962335d92b3ee6d39c1022d52c9ddb38fbdb05034efbd065ad1f133bb1b5d8e802c70c4be718dd8a1a78e47f6180790adc33b3cc3a771d89c8932b545ab5cddf481f9d9e540fa633772505e6fc289a46c127a6f277ba37d19d02427170d24542f1b1f1070ff35569b5c2af19ab9d894fcf24595d1fe15d79022dce34d4be963ba7f69945b34b07d62fc9d0a6bb7b112e09eca28c182907c78475a7c031e8c588bd609159b23b56ec7f05f88fc6cc0a7e52891a013e5c3e932622c0c9c56b086631b901df017884623defc9c97f20f12d28d3ca4ea894198e8eccbad168b2111ae48efd1f419f9d2bb334b509b46c10008ac3d4d3035c1346f07119c1840a9baf0671504108bdd067679bca4c98009bf678fb1e3083a5ded9c6b09f98de91130a3a99037c93a6f5670fa2ecec5c5ff12f526b31396a69e6d1e085eaa7f662d8fb6f74ed9b0bfadfd31fd8be763f2a073945105206119a5b459ed969298f475c7e8274dad5ba4c2e9760f84d77767c6ba5b6e8bdb06fdc593b17e7d3a368882798b9443e57ff3dd32be3ef170809a15efd30e43f9799f8298dd8aa211fd6139508a46a8a2ffc15900c4106761ea3064aecdce353f325d1565510d1c16e0b26d876c795ff4bb64da26e6725eb941b2a9a1d7644ee5576d0ac6c22dbaee67e97899515e7ca4dd1032b56d5d6ac31c9c81a2b08deff2f54b03777d526bf1d4f3501dcbd7893f2c50ea538a9e288870d7bbaeed3afae44f061f968be0ca856c262a10c46d1aad0878ce5c97be314940d06a3b671dffa241b1cc428e55299fb56d4015d19eedd98506f79b0192e1f1ec20d3d701a52e476001f2b222e02fae8ecd6ecb7dbbccb9910cd009ed36272fde468efc2663c4f841c9c0b187a73cbcd876ddcd5f0ccc66c01df6ecd3ead3ab5cb58ec1d4d1de7b2fcabb747749a5cefeeee6742a535f4357733c69402373920ba3bf684d045f43171d8afd01287193cc7606c171e59aeb7aa2f3bee2564a2c75f9ba91b1a895e974ee77d58bba0fe0262d381ff9f0979847a87c3a5ad1946c7d1358ceb9d2cb0e7e57208154829dc64496ab1c68ed0a528d98912f011d5dba4c7fb837517a819c9dc44ebf83d3c4c22a41ea1e807c6510592b39f90a9e141caba8c191482b0a253788e2bd0c7d51672015123c60466c9e056232685aa9ca7c3639c0e3b089969a861035ca275364ed1ede5ee5df17478ab2b935c685a607e13143e35502a645f2ec48bdc38aea1ddede33a7c2f8f4a86653daccd7559c16c994b2a357dcfba27738ff22500a996c0ec1e3c0afda0dee043ef817fb89166a9dc4297be92b8d0d2ca5757d5f0eb0ad4b8c5fe5b2a1603fbb74db7593099d5728de4e32a40377ad49d76b75833b4d4719e9a422ffb7888da8a0c15d02a0eb21508dc15c5ad031b01b18c927aa42ebb647d14d26b44b2d93f2c6645ade5a68755cf4d261dcb4943bb2b70240fd39f5fee01def75f5fb0da4404ea28c8450a837552fe19834107e573aaf6e2bd227697d8746d2ba48ef19729f214b868f7f442119c68ce2ca8cc5bc42db600700005f05db65c7ba666e27e5bc8b0e4c52854af0aeaa60846713093398e92e7be1c634621fed3a0dd9a4bc61ab3703722efa983a8e05b25cb9d1dccac9c72c0f3f23f50c7b21931c90c7e1b6dbcf4f8c6056a07ea8ff8064c34d2b03b61eb25b378a71618dcbed1d938f092ea146fa7b40d499e95e7ab126f0d031a17b8bc5f6fef71d7ab0c4f3bdc2aae3fd8d0df0da77259fd3db729861e3df59097695c0af5d42d678b8de56014a1cf2c4d5b08483004d1090900bb5b231bdd537671f172723b5453429d8b3d2fe1ff5bcf47453925319a546f43898b929fd235b7b0d67fabf6461b9f7fb781ad91e50aa332fb551f6ef5440b5f3ffdb68f25b703cb0a7b821da6f1f67e8f593cd1d92608c065f292c67773c62f7ef60269e795561a2ec47e47e7c2763974246f2eedb883fc8759162bcaaebe495e638133a2f88eab6fd9bc6715e32e6730a9416fd1a7cd4dcad365c9e3783f530b5fac872e39736ff05031df68a1e362b7d5edb46532ad0e476bd5a64e0f8db3d0ddc839fc3a82020fff928e76fa86d12acf365432cc7cac3b1fb17b5909d4c33d09ec2337d2d79093f4c03bda42cf63a78ac10159cf1aadb739bc5be703c312895c155bd70adda906ea2e022f89498808c06a26d77c2229abdd00d223b3cff87b1cf169a424d2150a62bc0d4d38eb275af666797c4253ca54b623873665c2b2ed4beb9c1957249dd64d3e7fa2fa3df89ef5c4c63df2a2bed70982ba8f61db2010df1e9b5fbebc0782555ef1588f0d3b306258f924db7b8a516f7bd99f49c0429e0c6df33985d8a38bdacf5f8837052e91e7637d4b3d524bfe253fba451f5e4bb5e52cffc2ba921506c7daaf0fa1492743a5af6881f9e46b8183037024140f712454fba13c2977d65d1d4c1ca7c017aa93523742f361ef2c17fee6dcedda95637841202b7557e54dfdb699526f9af3931b33821194acab05c2d932d4e5db02fa1fa82b6259d8f4dc5880b6272ebb74ee79c22da7c5aceb115dde508aae33807c761540ae18d2071ef6e90de52d2a57df673f00a5905e221741efa71297955ef00129324203d84be7dd48f17f789215ac8efc32aa662deb3e36bfb1345cc331d080c805841dea6c95ae8bd7b69dda09db179c786accf007607556bceab2a5faeb6489bda2a1f761f2ce3d631ab619c29acff89566f7b29ed663175ef541b3fda15894f7f1e36123e91a19abb404af600702f1664b2672cd69b20598465cdbdbae3c296d87ea0d1275f80f76ab1ae84b6c1c39ca3a3c3ae39fd016d3f43b188accf363d5d8bbe99de737ed9b3876219254d3fe13ff23916798eb51e15499c8a3331631f9e3b1b895108292646f0eb66b69c8a934853935968d70cb0732690d9be289e2197b98b148cfc79fc5232ce446f7df75e57c9cf39276f6c374eb88aa8cce20d17ca6cd57bd3d752388d0863ddba5d12cc45d56abee82bf424eabfc172e83114eb9039ef22ec068a20b058c21781f004331ee4eab0c59b02d1fd47539f0ec21b8ebf420182b31090e90c86dcd8de90c72659dda6c0e93eb7567e77404d5b1860814cf5a3770efac20ca4d6d725dea6e269180f0327af1ea602451b114a16df5deba0714d7c6eddea9eaa7c5a1720bba420259e949fe56121e6b5c8a3bca27f8994947c10ed2281e638651ad0cddbf094a5e705f4330362e475efc3a346c0ac9ef84b730b499c0f911522e8fa41a9d7b88f700e8e3d2037212939d52883035dc2bb1b114fe8ef0ff8607e4d7a77c229ccf9662969121032d54d4e07196ef0a22c4a7c8ff82e6cf693d8a51f89f7b14528f7f07b81ecac5e419b4e647a5726d49b06818d3626fabcc7bd48507612eec2f6e333d978a07d8dbe61abac57d7ffe469e98defe21a5b9278270106b31870bd23a0a5406b9568cc682691a5f4b98d1e9f0d1113d68e1bd2dfa8afbe9cf65f9d302fe487d5c2635fad050631baf6ad6bf7f11c25737da6954b4efa53c7ad194108b3fcc6d470166ed3a597c85865e357b733e7113885b1775cca04aea737e04957b70d0cb97ee97ac382e26f2c80df2aefa45708ab0fab6606fc237e8510e3c000f8cd18332844823592866970177880b2e849fbadcc6091239853c49721da523830d20ec48e427c2bba9655f18704c8371bef184725340230597a9b1cbb40e0ad7a170fcf8514fc45ab44e3f7ff73952d24c91015ed36cf52313f929b40cc0c283b9a71521c6a2654b8a98dafb0921f12707e72a644171a0533e80eae56197803713dcecb81e4b7c18f54d3f07923a5a8de50ffc448328a55e93e3dfdf8ffc4479837e2e5231ce52c4ab164a1cf8d0503b856370e90a2e7240e96982f33b066f1efbcc00971e50864bcb65f929e407929bfbd53ea8b640609","link":"/2019/10/21/schedule-2019-CSP/"},{"title":"题解-计蒜客-4593C会和","text":"Hey, password is required here. ","link":"/2019/10/27/solution-jsk-4593C/"},{"title":"题解-计蒜客-4594A Too Young","text":"Hey, password is required here. ","link":"/2019/10/28/solution-jsk-4594A/"},{"title":"题解-计蒜客-4594B Too Simple","text":"Hey, password is required here. c03f3060c9f1ae8757f4c8372012c368774e30d6fe06dac815065efdcaee0a7aa0a4588fa8d267641961ae1523b6e9a24447a40288df714d1def8bc0029614f97cc352528f082061e01922a0af014d0554ea2c0c1d77bd935c11400f9d7721c7314ee735935fd0bafc40575a0c294ef1e5b59463948084333c5a6598e621c5ab9fe7957ec79acb5a17206081cfa8161f0e1015a22769032993866d7439707fa33d8c0927c4561146950cdedce84358861db382f8ad8d14977a4b9b26ba058a04fa48e5addae1425ff0d1fa4862a75cbc06477926292e89a88f94ad1def1e757b616647855632a2f002c0f19427e8f11a146e94eeafe6bc73eac0e62c0f560e179e3c909d065b6ad82fbd057eb110e7ea6dc94f4ebbf1cc7308e6a12f84fd36367555ec17d04e73b9ff9fd250124f07cfe6611ab64df45beb09e1d89156d2691e6959b3493e57e743e3f63551fec7566b1b3b843c22a8aeb80c923481bd8225e5d3f9d04b617b6a7b56a8c53a6c943316adf5eea383494ac6158e21cccaa2fd160d598d79abe86d680b9c20d2c567bcf8f372eab6f2d26c85aa7c39b42f108f36182ef946bad697f04209716da8e679ad8b76590ffdd5370561155865318dc195581cd7174633d15a07a4f5d1046934f9a159053b693e43dcba77832d86277928a9a85d8184a5798fb408d70d189065df44c32101cf0f634fef5000663d2415ab31ea76931dc6278cb0f15c0b9cbcc68e40be3a2f85b0b83e085684ae59fbfb33e6b1cc96e6f615ecef2852fc7d84cb1c9fed3824ce1c28b45e370e8e400fbb22ef90d7c605d9be0286a7572cc220d3760b26c80f4f68704a0e87075fb9afd313a93c404fe3a3459fc19521fb74f42950538351ffe1e00ed6a3aa2c64e72613fbbc799ef48302d8c67f5eebe79a6261570cba512116b776ec841bcfc43702900c926bf9de1bb8470b18a2fc9c85ec92f04fd8e839a8b7ebd591030eeb828c215e8d80e52636b239128644dd6fc836171ea51d30c6ac81dfd0bd223c2553130a1772b2764cf41be9a7b9f01231c84dc249c70ca385ed171497c03c7b88b31723cdc62d6a6d257463dcf7d5bf404dba207e8050e54c7979c3bf9ac89e7ee890b134388bd2216be935695261945e31c8fc66b0f8c7f68ff685dbd02d19365bd1a8645bcfe51f41a5c28687ad85c2705c6934f6a3a4680a56b7df75a20e3adc2cb08bce7dad114291365c95aa972293c89f60dcc968fce94de144034f7f8152cd7db32a26685c376ee9373fa70e96bc65148d611afd86b80cdb08e3002d340e68c2653b182204e2663b75f24a45b01bffcb4d4ea88f7b86415184b0456b4dcd066a5272eab5c2613211d4bb3362fd89031fbafdcd1c737f9da841850bd0087b09d75925b3ba686471b44b2638cb14feeba43fddc3890c4a9267bf6d2365d45d27d991630e55ed1e6ea75581d1362a9eae2130f86af801dbc9d416c0fdc3fd7db50886684c4b7d05e64a03982538489a70e1af0a3ee7417973c7878b8549663fc02b013ec81b3b8adc28b9f3573190de50f965a2e433834c60bb4ab89d5533087d3a87e117e8fccbe35f618ce9f8e4cf04a1d8ed54d14af40eaeae7d2ef3f7b9fa89cbb1205a2d8db8251fd7d0e977e31c4d825a2126f07125d3b2e0be89bb13bc002c9c50a8c45d7e5be957fd2fec14f9f8b5c17255053059225079e7397bc4385f6a1ab8534a389debb1c38e349eee38fa7d06df725e1ff839a392b4fe5328dac335bbaa1d74394bf8dd6e280149abfa6b2d436236a210382b244ba98e7c21c8596e00d197debbd12f82771adff56d22303a520995e9a13f08cabe3e780cc28ebf49dda4eb1f3b61aa98aae231befea1097a47bb6081e76d6a67ab59c31985294b5d4ce26b0733de4dcebeda5bec55b2f945f357840f61937868668760f5341a81168aef52d6ff5609be9ef46cf408812d95770e1cb49d36670c13fe7c321fc0af2c61fb8857a36ca0fc81180796f64e90446bb5eb2de5612189b80c7fd3ca18155aad49188ad36342b62329a5cd7938c90d8e1ad245516520c901d1dc702061c38430019db92cfc11dc698c9f6f370d2f931179727454198cc72262f7dc4026ae58f9346ce30a0f526e3e0a8b256249ca8c6c0bc702cdfa6aea12129de76051a2d8aa6312657dbd9dd4f9d77e3c5c5f7b9c250e619e58d99059ce06b2f6b2d636d1eebcf5aef5f6558be14e3f73c76f9ba5a1d59f50027f669a49cbae0fe3d834acd837a7f2d4da72e480d1666d70dce8269fe12292117b1c6c7ba7f420687402050fa308d0c0dbefa27caf90d817411301d249a51398fe4ec3e0b5e0d51cbaed3246741e7d08efdd03c4bd2cb816cce45df9e0f4aab79499c1af6d9d55ff543b6745c045679b0b38aa1989a64e647685f2aa1fdae4b750e42e5890d37e8ddc8869c1881ee4cff5685dada13ab77fed72e5fc574a827e396f5a35624429c5d59b163fff4b6d97f8be61b636ac363af2e491c2889237fb0b0bc94022acdad1c282484792027129c3c00615d9ea465dd32654a0b446d9682dedbb7a739b1e672d66ba6101e9f8678db33afef16efe636ddadd5d31b1089b9bedcb1d51b5f34e9274946cb139bfbc2bcd18d41561220826da5f8267f462b717ee407c0fc3eb71229bbe9b63265d5efc69fed921e3ce6fa3c286b974dde4007ea02bdf2b4b37607e09c47266bfa139ea9bfd800c63a89bd7e7dee8a388209ce4611c8d57e9608d860d2af23102277182df34a7cff528d6606166088ba1123cc0e1c79eb5cff4a1bd1f3237db07be8da4492943247fa9ab2b111b7f9e6c262fabd813e7f8be058d2f7ba0ee252dd152942a21de99cc2e05389e1cf18628259d9198bb471a4fceeb8954781dfca3562debf5e79c601ad9f2b8fab747dfeb5c5b00a17dc6bd90d6591172e141bcb55c5f70538f047588e78eada039a645e7ad54d443ebddc2d9f4c4009a3b9ba023efa9b24bc75a4ee7f28405e569dd52267ac5ae2d6a251e4b15e6a873e1e357cfc22d870fe709d742a0214f5c32063fdc85d3fd9d553cc4b1d9fbcf68672087e5de02874c5e87fec32d9697c9f6a6c9197a8da2e5ae0e7e5034572343b7463cb62a18fa065caba38dd0edb42cb3958843e4e7b13c4412e83fe30c0e385cfdb391b34ef24e6df2c07c9cd735f61bbb23705d0df130d4ec76be7c1c194e2196ba99af52921a88bb7dd5fd660cd6135c5dc1516ffbbc0e9d71241d4ac5f00acb3efb5053c73f024e09d7adadb06ed2978e9023e9f43e79b53bb6732eb043e5c4075fa4fefa2a27558a49569148c43c71cc35adcebc63380999517c358fa9e68a840d15913ec4a138cfac306ff58e09057b8f172101d3b300cdbd1f05bf66f66c1f8ae27b249ff092328e8e0c028998a7640cfb62ed5c919f65f451c3a3bfca721cf448b872ae2aa03631d1f67905a09516f18370a292a0effac441115bdb326fc804b5334b25e0fe62c8ca930d287e01a05848fe9f15ff41f59a375a8806ef163e162c224a86290c3f25c5b76cbce13f17656974e1035cdf3581520be9e8f5a515dc35c6318fdcfb4a3956ce6a42e01cd479e80cdefa5381d4e3479c48fe6a6e4c8aca1f127c5b8b80b9e5cbb5085eb7d501b83fa5827e54236ba957911605990e559c84aa9f39693da149109e7482f48e1ef6c3bdbdce32d373f5148fff3051a1a1a1ed23120b6e67b9148a7d2d815247c49004e517db186bdbe1e2334d5dab13c3e71310544ff254e094562f1bf5a2200d35a654e06c82fb341a00bb779dd7fb1c8172c629559d34c5f49efe3f8cfdacddb4afdf66f6828fc48e3c3336088d0424a1420da22b058b492448e1192881288e9b2ca6ac4e427ceaf70df1e626829435289b598127a0d2b82d9173ef15b4ed78b6597b687bb9c8bec2e603145d85fbb08f6fe4129c8964bb9ff0f876a55633b0ccf778bd3489142609a4298ebf059c503c68b94d2cde04897cff873958387e33ec501813feec755ec327b49d47f93eceb55abbb0aeecb29e409ee94e85db1c4fbcd441a379cb80e0acbf79a2ff278f99f7bbabb73c08104ce33ebae8f5adb647e713e41b6bb2be3a6f47e4cd7abcc1922f695ec2baf4c4a756ebd7aee6522b10c8e58c54d00d69cffc887a4f6131e4fea559204470bcc03a856cba94d3a89c2ae77a1eb76ae5882592f13f0cf7e34ff3572e00ec475aae8d333cd2baf07d02eb7fe0fa9fa21024ef63d17a15990beea0ce61a67efbc7f2361e81bd03d3099130069940ee8073b5ffad6347404dade0898c6c063f99dbe99a29c6ba61a10d5b18b7415530a044be9b3861724f129bc6608b955e6a60529b247727ddbe7469fdaf63c37a2a7c0314c325c640f435e6c98e7866388e2700195bf933bbb5704730bde4ed1fee640a08e2c1c4b8b71c75e906ed6aa78f8a0717ace53602e612c0a9756e6dafc956e23e4c2b98ca4d4dfe6028b659b329e10b40239441ec8808062b56ca85630aa9e3b3a8ba20deb637e6cc7d0061a00882f4641cfaa5d89ff90ac0e98aaacc4fce62f624e4fe740addbf122e57e36e533ac681c21b1fa29b5a2fac4c241e51b9410be3cea80a3591ceb708c02574af28def99ac08d2a96b246ae8b715fbd7b61f799665293288beb6d50fd0d880cfc483a7ccd261ed577641d5e27958d7dd1ea61664e93edcac4a5e68aaa5d3ca84c1a600b5f49f2851a519ba056d9b14feabd40f9c7ab5e4010a6983cf3bd2ba7d10dfafae81210f8e3a1486c7558c3cbf70712b23ec846ed713d3ad4201594f2eebb3370680e863e6210a07eabfb2e764f9314e72a90f78ccbff5b3782f03d1f79cd8bdcf18fefb87ee07f191e9bb0129f070bcfb760d1edfa1a1b660b35e957356cd8fe595416410868879569967d6845aad46ddfee1b0bd3c111c1a3a524f24f9ab72d4116c4d7ce3ef14f1d4adca1af718d7dcaa36796805313490ab4d235b0aff6e42c94d4795e73c9d72dd1186996b0508b38dcc848279a059cb7fd27055e218b859674b0d813fc8be5f0418cc479f094159778bd9e97d2c7f51959d98c540e21aecbf7f9db7448c440a02a4fe203b7678362a1c42e1d03f3a03273f986be1c60652624ccc66080d122b1b4ad4200d11c762b932fb48dcade58dee15baf23cad9396048684539a9f876ee29f18dc1a39c646367fc3d3fc32fd1884299844fe0602f16f8041892c25025c61bd5bbca8df8f0b74ae4cabc0276027fcb037cd1870eea4c2cf88aad0fab93438ae7c74458d5b0fc5d750a454f41ab8c905349169c610a0f54bb7359de129402acfdf7ce99a051526fa52954d20457f3325f4c03ca33b69db245abf6ce1e507b94ae9dfa5b6c36134b11b34c1a1bd77e2b3d13fda8af1e503a272a942b5bd789e931c8e6455d832ee6960fc9a1595983b21f88af40d367be2900a1fffe16c0f198a78dc08cb25a6aa5b79135673f00d0249ae2211b8d74c8651aced0ba257f30cd9f87f95e5a9721ed0032ad1bca26fac7009c70ed2e0050fba8bd0a039213a1e5602d25239b407a252d70b83e1d83c1272bea288759ee75a6c33b953fc5b9ea0bc560f1fadba118862e4071bd011ddcb7090fc192153e9f260109d374b1476a1390cc1da8e90ab53d45ea3aa36d4ef5b315499d86475ce612b473e7fa237a0a7c13b23c2718091dee783eda01b36ce6b505e22f71cd8744e34ae539ccc6a1b17a1f52522a58adb79d6e374f8569d913af775b98c1473b5a31d7edfa271f2bb2f9248e4bc6b0d97436467a54450fb37cceaddc66f1d0d3f33fa562c10af27219d1e8dc474cefea3bb81cd236ae587ff25510f340cae57cdd705d2ef104a39bae6f5b9233ca52d6758bf05ddf7f0ef66c08992a6d18823904bd640b37edc43eb4075958f3eed16fe9c90ec5e25ea21778a4127a6aef94b93b587ec7c728604412c4d0bb632eeff0e3f7996a44f99bfd88b3922253a932e53a03d14ab26be2a2d30851329e2583b9f0dcbf12cb7750124681598781bf1146a886784bb7e50f51dd4aac45cb790a9225bd0f1b0a5d109971c1d66842710476413ce87341ca035c7f78cb6740baaa3c8065a5b5ae100c5f02cb0a4e0040f937b04451fc822a818f09f9bf40edb1202d9e35b9f8e3ea019570c82a7fe002d5d5b608294a1248c8683bf0df946b33c427654795f3b4c526c734072b8938aeb93a1641e04eab4b49da120e3b184b1936daaf2bffc9238b8a87d186cdb8f588c8c630839bcbed2ceb0f85df9988c37ed1dbdde5f7bd71484e4eb89b32a863521967bf4ef16c87f8a5ef87d2a1c7bfc7e0855632240538627511fa5e531d84b9de91f8df93f1d5ca38df7e8e9186490a3bb884d7b9505f6e953d437efc5a312742cfac5a5be93a7e57a70b2577e2cb1254c27ac394bf30a888f6f5b72f2528a0a2a35351e130193858eb61c5204f78edfc74f854ab0d2f91c47c063440d66c0d65da947a5a6198ad28ae5354908ad27ed6333e091943dcace9f15adadaea5abe3e4b800604abcfc4b035cb80a4013207ad80eece2d131900d25d25065705c8a9219854de736cef566a215218f6c328f9d789160f58bd3a594cb3154c113f7bcd6f21959b3bd7ec0c627d9aa6148f40dd2a53f4b34d2b97d12f9d61080dd65e63b726a79c8f1c33f499ee2f3a50d8b90d81ace202be8d79e619ca71d206fdd826f107b582fa60ce5bd9664f5a1ff52f2f32bb7f3fe1ca92697b65f708e35fbe100a2752f12a49fc2c151d4a4a805352d0042e9750b9ed7192f16f9d889a8532bcc80f9b3111808ae7a677bc389a23566eaf87326b40082c45ba094c2455e8018b665f8fdb5aec997f5b34e8f31720a69ab96fcf846aba88b227a4d072f34508d1321524ef1c2b6267450658dee536abb393cb154ce8760dd2554b62db6b697aae2b24874e7aef25b61aacf28132471fd32edf7416730d889c8e5fbaf466ef8f305c2cafb9c2a14399da00172c844f37752275da45d45c0ae8c27b161f886934b7cdb89a059b50bf0e3224df70b1366222d646df76989822083cd0823c9b8ca6a8df494d626a44b54d4213de2153612d7ad2eb6699265a5483f873af67c2d46ed2a66b16ed26296934ab26fcf0c14ea9fe60fcf7e94cf522c702eed788f1b20fb7ff4d1516a400b24a58909a359bbf86f8daf8366ca276cbf3fb8de7a4b3258910f995b7b448ef451ba4e5516faabe369c9176c6d8b52fcc966e6b9fc59ba06a5a7bee73bc6b52d2884ce83d2b68106b53a6f0e93924e9f9a125ad9712960fa2b11d4d8a3a939e0e4c2aabad1e1fb528dd4e7ecf879a2c0f98c6c996714d535f48ee0042416ae19bb9262f418cdbf85f0d0bbab14cf67f23606faa39b7e56198182849caa1e5bfcf02dacbbd2efbd7f7d85c667201d6b8d96c5cb18d977cab232ee7f0ffbff4672b45fa4c14f1150bf5c3e84e6ba5aafcca3006288ff0f0343197bfe77c65eeee449f3147dbc9e8eef49aeabc9ef418179543958065d67cd36709fab3d8a904452907ae77ace4e83bd5495e5ba1655cad6066d482d68f234657448997ffb60f1ac037f29e366d02e11f1da3be400f62c40d9b869e082cc750dd517b0d5c1a4865c85d3ebc96fc1293b9037ef74779cb1048a8d670089671c446cdbfaef1103cb1fb0fff5943614a63ef474407b2d0e1f2c7612f05421d8edd6f862ea029d5b36553429f4d612365c2a04460d1ee6ad3efc9fdb4c2e8d0ea17499e6895528217652c63968df8e0da2b77f77020c7eecee0f87c31e890f6fbb811493f1fe5300e3eb3a26065450245d538da4738d868381ae0ce90fd5661829faa0ffd86a6abe807ac4873627ed2acf9ea7b80fbb59083c78cafea0ddacbb973209cec4816c7db06162bf6d248af9916eb0c24327ed6cb85e2fa04c7dfbf65c0717292cbe9d7529b5c867d08ac333d130a057bcd6f562408f6f28c391603d6bb4865899a6e4c027ca3e4d6d2e9b330f94a49d48ac9587cdc88fba964b8f1dbc8f821751e5afde644619e7cede63a9d12dd4212ddf65fb6848cd7d81da37bff99ec2ef54ba75ba204d953bd6d73adaf9e0853d138b78647774501199ea19221a47ed3164a865729c4f1b0602391c8bd845d366d1fa7b3acd0c1b43f5e96d51146d9156413d5fe3f7d4f4bbbb25689d1cb3ad1bc484bcd11236079c30772c23cd4a4dab8cc5a22aa65232e01c4dad06d212e6d24dbbc7ba3fc7aa0cbe359a98ce4400357d3326c76f4cb35ca3d9d178746df2bc20b7c5386eefa1e0c9999ce645bf6c47569c89d0d405feef9e0cb6aaba9e8cbd0ed38fc277f70914fe0a6d939db064ab619b80920219291c076c6f5f98e87e28690a9d2f04aa983db061d632807ba178a41c565f6a46b64be589ef855d3da3f4f4be0fc8692408779649102a23b33604c5b38a42e6dfdafba345206351150fc4f2494dbc6bb6504fc5bbf779cffe3b2e626e0c22193134ca79c63042b284b2f33e26988f5ad27cea5b6c2cfcbc560137b619abfee8b9401f3f4dfdd6d32fe1f8959ceac9f215235a66711423b905279a119083bbdbb9cc2011fb3165bcf83d2cfecddfb43b9ca864aa0491a5e8431a4fe58e726076b8fa2d8227a4904a2d735add1887197c608484062483731edd9e0c8fbf6347641b01dca5321b087112e49ae098b9335b841db277eae21d60b3bd43a04f9d161d9629d564913186c168cb6969031444974cc8bcdf9369cfde32898259de6f695f618bcf1c739227a6fe4474952dd90211eabc3aac48aa2185366486a74b95f7bb150954cdef120b56b3051f1c395bad93e2be77a054be4211d506df5e777f5f92e69eebb52a040be05b78c124246afca7ac5f8ff6c66c8abf84c908632a1d4a350d7a9ce0bdaabeac81e2a160c935627b0461f5c6b29c2008973961632a3fe16e800d62690094b552e5854196b491ea46b7f3ee23f1f12d32728fccd7ab7c4c0fc268ffeb85adf15279303db4412d8efc614743286a314737c19ad1c836c6925b5368e72ecdd66b183c4799100dd8067f2ab3745ce4c8383dfdf54cab3456d7241a98f71ca4dd33b25e2a49cfc8f8433eddd00af3b0cea3d329f74e49f2f2cf599607a91b928657e203d4c211ce20f8dd0e2101bb2877e945b1253388f768c6a47fb1e42ff279af80ba4e4682450824777dd4a37956b3063e3e96413b64901ef089f19a665ed8a32e48e4caacc6c75c042d0000252d018c47ead7569b3200dc5e2d3f7ddf7a8555ae53ad0fa94eaec987abe1fbd2852d873fd64368787b103c25a535c41bfe951049ec0c7f2a5838bc04eb1913eaa630bb7af60c887389d735a7e28724d86e4fbb7a2d90a8dbb23d15839b1f3dcb9311d2e9cceb8ca7ca0cf59745f5272229afe9acc35d8f6fdcf20b730cd01dfd3ccff18289c30b7f309d6fdb320f04271eec018fd85c0a69429046c673a015b0582b414c089acf5f91694fbac89f162bfeef95ef0e1b19968e23542980cccdca34aaa6c27029a079d02a1d381dace94b439fbac1a66f028b23657439f38a4a0","link":"/2019/10/28/solution-jsk-4594B/"},{"title":"Sometimes Naive","text":"4594C Sometimes Naive Summarize题目概括征集中~ Solution神 仙 题 虽然做完后想想不是很难……但哪道题不是如此呢TAT 易得每次询问中 $c$ 个人的集合点为 $\\text{lca}(v_1,v_2,..,v_c)$ 。每个人到集合点的路径上所经过的特产看作一个集合。可以采用倍增和 bitset 优化求出所有的集合，由于本题卡空间，倍增需要使用滚动数组。代码实现非常致郁。 在预处理出集合信息后，考虑如何回答询问。不妨二分答案 $ans$，构造二分图 $G$：二分图左侧有 $c\\times ans$ 个节点，表示共 $c$ 个人，每人购买 $ans$ 个物品；右侧有 $m$ 个节点，表示所有特产。如果某个人可以购买特产 $k$ （即 $k$ 在此人到集合点的路径上），则在对应节点间连边。不难发现，如果存在使左侧节点全部匹配的完备匹配，则 $ans$ 合法。 考虑优化。 Hall 定理： 记 $M(X)$ 表示与点集 $X$ 直接相连的点集。 如果二分图 $G$ 中，$\\forall X\\in U,|X|\\le |M(X)|$ 则二分图 $G$ 存在完备匹配。 因此我们只需枚举二分图点集中的所有子集，即可判断 $ans$ 是否合法。 进一步观察可以发现，$M(U)$ 与二分出的 $ans$ 无关，而 $|X|=|U|\\times ans$。也就是说，我们需要找到一个最大的 $ans$，使得 $|U|\\times ans\\le |M(U)|$ 恒成立。因此不必二分答案，直接求解 $ans=\\min\\lbrace|M(U)|/|U|\\rbrace$ 即可。 代码虽不长却极端致郁。 Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 300005;const int MAXQ = 50005;const int INF = 0x3f3f3f3f;int n, m, q;int f[MAXN][21], dep[MAXN];int h[MAXQ][6], c[MAXN], a[MAXQ][6], t[MAXN][21];bitset&lt;1005&gt; g[MAXN]; bitset&lt;1005&gt; s[MAXQ][6]; bitset&lt;1005&gt; x[35]; inline int Lca(int u, int v) { if (dep[u] &lt; dep[v]) swap(u, v); for (int i = 19; i &gt;= 0; --i) if (dep[f[u][i]] &gt;= dep[v]) u = f[u][i]; if (u == v) return u; for (int i = 19; i &gt;= 0; --i) if (f[u][i] != f[v][i]) u = f[u][i], v = f[v][i]; return f[u][0];}int main() { scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;q); dep[1] = 1; for (int i = 2; i &lt;= n; ++i) scanf(\"%d\", &amp;f[i][0]), dep[i] = dep[f[i][0]] + 1; for (int j = 1; j &lt;= 19; ++j) for (int i = 1; i &lt;= n; ++i) f[i][j] = f[f[i][j - 1]][j - 1]; for (int i = 1; i &lt;= n; ++i) { int tmp; scanf(\"%d\", &amp;tmp); g[i][tmp] = 1; } for (int i = 1; i &lt;= q; ++i) { scanf(\"%d\", &amp;c[i]); for (int j = 1; j &lt;= c[i]; ++j) scanf(\"%d\", &amp;a[i][j]), s[i][j] = g[a[i][j]]; int lca = a[i][1]; for (int j = 2; j &lt;= c[i]; ++j) lca = Lca(lca, a[i][j]); for (int j = 1; j &lt;= c[i]; ++j) h[i][j] = dep[a[i][j]] - dep[lca]; } for (int i = n; i &gt;= 1; --i) g[i] |= g[f[i][0]]; for (int j = 0; j &lt;= 19; ++j) { for (int i = 1; i &lt;= q; ++i) for (int k = 1; k &lt;= c[i]; ++k) if (h[i][k] &amp; (1 &lt;&lt; j)) s[i][k] |= g[a[i][k]], a[i][k] = f[a[i][k]][j]; for (int i = n; i &gt;= 1; --i) g[i] = (g[i] | g[f[i][j]]); } for (int i = 1; i &lt;= q; ++i) { int ans = INF; for (int k = 1; k &lt; (1 &lt;&lt; c[i]); ++k) { x[k].reset(); int tmp = 0; for (int j = 1; j &lt;= c[i]; ++j) if (k &amp; (1 &lt;&lt; (j - 1))) tmp++, x[k] |= s[i][j]; ans = min(ans, (int)x[k].count() / tmp); } printf(\"%d\\n\", ans * c[i]); } return 0;}","link":"/2019/10/28/solution-jsk-4594C/"},{"title":"咕咕树","text":"4596B 咕咕树 Summarize题目概括咕咕 Solution高压下的代码实现能力堪忧。比赛 1 小时没敲出来，订正 10 分钟满分。 官方题解给的是树形背包，但并不是特别好实现。 定义状态 $f[u][i]$ 表示以 $u$ 为根的子树，有一条以 $u$ 为起点且长度恰好为 $i$ 的链，最少花费的代价。 考虑状态转移： $f[u][0]$ 显然是切断当前节点后，再将每个子树切断；$f[u][1]$ 即为切出一条长度为 $i$ 的链，对其余子树的链长度进行讨论。 f[u][0]=a[u]+\\sum_{v\\in son(u)}\\min_{j=0}^{l-1}\\lbrace f[v][j]\\rbrace\\\\ f[u][1]=f[s][i-1]+\\sum_{v\\in son(u),v\\not= s}\\min_{j=0}^{\\min(i-1,l-i-1)}\\lbrace f[v][j]\\rbrace考虑优化。对所有 $f[u][0..l-1]$ 做前缀最小值，并记 $g[u][i]=\\sum_{v\\in son(u)}f[v][j]$，则转移方程简化为： f[u][0]=a[u]+g[u][l-1]\\\\ f[u][1]=f[s][i-1]-f[s][\\min(i-1,l-i-1)]+g[u][\\min(i-1,l-i-1)]注意叶节点的 $f[u][1]$ 应赋值为 $0$。 时间复杂度 $O(n^2)$。 Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 5005;int n, l;int a[MAXN];vector&lt;int&gt; G[MAXN];int f[MAXN][MAXN];int g[MAXN][MAXN];void dfs(int u, int fa) { for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; if (v == fa) continue; dfs(v, u); for (int i = 0; i &lt; l; ++i) g[u][i] += f[v][i]; } for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; if (v == fa) continue; for (int i = 1; i &lt; l; ++i) { f[u][i] = min(f[u][i], g[u][min(i - 1, l - i - 1)] - f[v][min(i - 1, l - i - 1)] + f[v][i - 1]); } } f[u][0] = a[u] + g[u][l - 1]; if (u != 1 &amp;&amp; G[u].size() == 1) f[u][1] = 0; for (int i = 1; i &lt; l; ++i) f[u][i] = min(f[u][i], f[u][i - 1]);}int main() { int sum = 0; memset(f, 0x3f, sizeof(f)); scanf(\"%d%d\", &amp;n, &amp;l); for (int i = 1; i &lt;= n; ++i) scanf(\"%d\", &amp;a[i]), sum += a[i]; if (l == 0) return printf(\"%d\", sum), 0; for (int i = 1; i &lt; n; ++i) { int u, v; scanf(\"%d%d\", &amp;u, &amp;v); G[u].push_back(v), G[v].push_back(u); } dfs(1, 0); printf(\"%d\", f[1][l - 1]); return 0;}","link":"/2019/11/04/solution-jsk-4596B/"},{"title":"题解-LibreOJ-2071最佳团体","text":"题目链接(Luogu) 题目链接(LibreOJ) 题目概括重金征集中~ 0/1 分数规划的基本模型：给定整数 $a_1,a_2,…,a_n$ 以及 $b_1,b_2,…,b_n$，求一组解 $x_i$（$x_i$ 的取值为 0 或 1），使下式最大化： \\frac{\\Sigma a_i*x_i}{\\Sigma b_i*x_i}在本题中，${a_n}$ 对应着战斗值， ${b_n}$ 对应着招募费用。题目要求从中选出若干名选手（即将相应的 $x_i$ 赋为 1），使得上式最大化。 值得注意的是，在本题中 $x_i$ 的取值同样有限制：如果 $x_i=1$，则一定有 $x_{R[i]}=1$ 或$R[i]=0$。 接下来考虑上式的计算。我么们不妨任意猜测一个值 $mid$ ，如果 $\\frac{\\Sigma a_i*x_i}{\\Sigma b_i*x_i} \\ge mid$ ，即 $mid$ 比我们要求的最大值要小，则可以推出 $\\Sigma (a_i-mid*b_i)*x_i\\ge 0$。因此，我们只需判定 $\\Sigma (a_i-mid*b_i)*x_i$ 是否大于等于 0，即可进一步缩小 $mid$ 的范围。 综上所述，我们可以二分答案（实数）。当二分的值为 $mid$ 时，计算 $\\Sigma (a_i-mid*b_i)*x_i$ 的最大值，检查最大值是否非负。若非负，则令 $l=mid$；否则令 $r=mid$。当二分停止时，就得到了 0/1 分数规划问题的解。 本题的另一关键点在于计算 $\\Sigma (a_i-mid*b_i)*x_i$ 的最大值。本题可以采用背包类树形 DP 实现，具体内容不再赘述。 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;bits/stdc++.h&gt;using namespace std;const float eps = 1e-4;struct Edge { int v, nxt;}edge[2505];int cnt, head[2505];inline void AddEdge(int u, int v) { edge[++cnt].v = v; edge[cnt].nxt = head[u]; head[u] = cnt;}int K, N;int a[2505], b[2505];float f[2505][2505];int size[2505];float delta;inline void dfs(int u) { size[u] = 1; for (int i = head[u]; i; i = edge[i].nxt) { dfs(edge[i].v); size[u] += size[edge[i].v]; }}inline void dp(int u) { float w = 1.0 * a[u] - 1.0 * delta * b[u]; for (int i = 1; i &lt;= K; ++i) f[u][i] = -1e9; for (int i = head[u]; i; i = edge[i].nxt) { int v = edge[i].v; dp(v); for (int i = min(K, size[u]); i &gt;= 1; --i) for (int j = 0; j &lt;= min(size[v], i); ++j) f[u][i] = max(f[u][i], f[u][i - j] + f[v][j]); } if (u != 0) { for (int i = min(K, size[u]); i &gt;= 1; --i) f[u][i] = f[u][i - 1] + w; f[u][1] = w; }}int main() { scanf(\"%d%d\", &amp;K, &amp;N); for (register int i = 1; i &lt;= N; ++i) { int r; scanf(\"%d%d%d\", &amp;b[i], &amp;a[i], &amp;r); AddEdge(r, i); } dfs(0); float l = 0, r = 10000; while (r - l &gt; eps) { float mid = (l + r) / 2; delta = mid; dp(0); if (f[0][K] &lt; 0) r = mid; else l = mid; } printf(\"%.3f\", l); return 0;}","link":"/2019/10/02/solution-loj-2071/"},{"title":"题解-LibreOJ-2072独特的树叶","text":"题目链接(Luogu) 题目链接(LibreOJ) 给定两棵树 $A$ 和 $B$，在 $B$ 中删除一个叶子节点后满足 $A$ 与 $B’$ 同构；求满足条件的编号最小的叶子节点。 $n \\le 100000$ 感谢 @tth37 的贡献 这道题我们需要判断树是否同构。这需要借助 树哈希 。 一千个 OIer 中有一万种哈希写法。这里采用基于异或的树哈希。 \\text{hash[u]}=\\bigoplus_{v\\in \\text{son(u)}}\\text{hash[v]}*\\text{seed}+\\text{size[v]}我们可以首先将 $A$ 上每个点作为根节点时的哈希值求出来，并扔到一个 map 里。然后在 $B$ 上枚举删除每个叶子节点后对应的哈希值，如果对应的哈希值出现过，则表明删去该叶子节点后可以形成同构。 该算法复杂度瓶颈在于求出 $A$ 对应的 $n$ 个哈希值。根据异或的相消性质，可以设计出类似树形 dp 的二次扫描与换根法在 $O(n)$ 时间复杂度求出所有哈希值。 听着简单，代码还是挺难写的。 代码如下：（极丑） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#include&lt;bits/stdc++.h&gt;using namespace std;typedef unsigned long long ull;const int maxn = 100005;const ull seed = 1000000007;ull H[maxn], H2[maxn];ull size[maxn];vector&lt;int&gt; G1[maxn], G2[maxn];map&lt;ull, bool&gt; mp;int N, R;int ans = maxn;void dfs1(int u, int fa) { H[u] = size[u] = 1; for (vector&lt;int&gt;::iterator it = G1[u].begin(); it != G1[u].end(); it++) { int v = *it; if (v == fa) continue; dfs1(v, u); size[u] += size[v]; H[u] ^= (H[v] * seed + size[v]); }}void dfs2(int u, int fa) { if (u != R) { H2[u] = H[u] ^ ((H2[fa] ^ (H[u] * seed + size[u])) * seed + ((ull)N - size[u])); } else H2[u] = H[u]; for (vector&lt;int&gt;::iterator it = G1[u].begin(); it != G1[u].end(); it++) { int v = *it; if (v == fa) continue; dfs2(v, u); }}void dfs3(int u, int fa) { H[u] = size[u] = 1; for (vector&lt;int&gt;::iterator it = G2[u].begin(); it != G2[u].end(); it++) { int v = *it; if (v == fa) continue; dfs3(v, u); size[u] += size[v]; H[u] ^= (H[v] * seed + size[v]); }}void dfs4(int u, int fa) { if (u != R) { H2[u] = H[u] ^ ((H2[fa] ^ (H[u] * seed + size[u])) * seed + ((ull)N + 1 - size[u])); } else H2[u] = H[u]; for (vector&lt;int&gt;::iterator it = G2[u].begin(); it != G2[u].end(); it++) { int v = *it; if (v == fa) continue; dfs4(v, u); }}int main() { scanf(\"%d\", &amp;N); for (register int i = 1; i &lt; N; ++i) { int u, v; scanf(\"%d%d\", &amp;u, &amp;v); G1[u].push_back(v); G1[v].push_back(u); } R = 1; dfs1(1, 0); dfs2(1, 0); for (register int i = 1; i &lt;= N; ++i) { int u, v; scanf(\"%d%d\", &amp;u, &amp;v); G2[u].push_back(v); G2[v].push_back(u); } for (register int i = 1; i &lt;= N; ++i) mp[H2[i]] = 1; R = 2; dfs3(2, 0); dfs4(2, 0); for (register int i = 1; i &lt;= 1; ++i) { if ((int)G2[i].size() == 1) { ull w = H2[G2[i][0]] ^ (H[i] * seed + 1); if (mp[w]) return printf(\"%d\", i), 0; } } R = 1; dfs3(1, 0); dfs4(1, 0); for (register int i = 2; i &lt;= N + 1; ++i) { if ((int)G2[i].size() == 1) { ull w = H2[G2[i][0]] ^ (H[i] * seed + 1); if (mp[w]) return printf(\"%d\", i), 0; } } return 0;}","link":"/2019/10/10/solution-loj-2072/"},{"title":"题解-LibreOJ-2128数字串拆分","text":"题目链接(Luogu) 题目链接(LibreOJ) 题目概括大力征集中~ 一道神仙题。对矩阵初学者极不友好。 $f$ 函数的计算非常简单，递推公式如下： f(i)=f(i-1)+f(i-2)+..+f(i-m)容易看出， $f(i)$ 可以使用矩阵加速递推。以 $m=3$ 为例，构造矩阵 A=\\left[ \\begin{matrix} 1 & 1 & 1 \\\\ 1 & 0 & 0 \\\\ 0 & 1 & 0 \\end{matrix} \\right]那么 $f(n)$ 即为 $(A^n)_{1,1}$ 。 但我们要求的是 $g(S)$ 。考虑将 $g(S)$ 表示为矩阵的形式，最终答案为矩阵的第 $[1,1]$ 项。 考虑 $g(123)$ 的推导。 \\begin{align*} g(123) &= f(1+2+3)+f(12+3)+f(1+23)+f(123) \\\\ &= A^{1+2+3}+A^{12+3}+A^{1+23}+A^{123} \\\\ &= A^1\\times A^2\\times A^3+A^{12}\\times A^3+A^1\\times A^{23}+A^{123} \\end{align*}转化为以上形式后，记 $g’(n)$ 为将数字 $S$ 的前 $n$ 项分解后得到的矩阵；在本例中，$g’(3)=g(123)$ 。 可以得到 $g’(i)$ 的递推公式： g'(i)=g'(i-1)\\times A^{\\text{num[i,i]}}+g'(i-2)\\times A^{\\text{num[i-1,i]}}+..+g'(0)\\times A^{\\text{num[1,i]}}其中 $\\text{num[l,r]}$ 表示字符串中 $[l,r]$ 区间所对应的数字。例如当 $S=”12345”$ ，$\\text{num[2,4]}=234$ 。 考虑 $A^{\\text{num[l,r]}}$ 的计算。可以通过预处理加速计算。记 P[i][j]=A^{i*10^j}使用该数组，可以在 $O(n)$ 时间复杂度内计算 $A^{\\text{num[l,r]}}$ 。 至此，算法骨架已经成型；时间复杂度为 $O(n*m^3+n^2*m^3)$ 。实现时需要注意细节优化（如计算 $g’$ 时使用恰当的循环顺序）。 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int mod = 998244353;struct Matrix { int m, n; ll g[6][6];};Matrix mul(Matrix a, Matrix b) { Matrix ret; ret.m = a.m, ret.n = b.n; for (int i = 1; i &lt;= ret.n; ++i) { for (int j = 1; j &lt;= ret.m; ++j) { ret.g[i][j] = 0; for (int k = 1; k &lt;= a.n; ++k) ret.g[i][j] = (ret.g[i][j] + a.g[i][k] * b.g[k][j]) % mod; } } return ret;}Matrix add(Matrix a, Matrix b) { Matrix ret; ret.m = a.m, ret.n = a.n; for (int i = 1; i &lt;= a.n; ++i) for (int j = 1; j &lt;= a.m; ++j) ret.g[i][j] = (a.g[i][j] + b.g[i][j]) % mod; return ret;}Matrix power10(Matrix a) { Matrix ret = a; ret = mul(ret, ret); ret = mul(ret, ret); ret = mul(ret, a); ret = mul(ret, ret); return ret;}void Init_Unit_Matrix(Matrix&amp; a, int n) { a.m = a.n = n; for (int i = 1; i &lt;= n; ++i) for (int j = 1; j &lt;= n; ++j) a.g[i][j] = (i == j) ? 1 : 0;}void Init_Empty_Matrix(Matrix&amp; a, int n) { a.m = a.n = n; for (int i = 1; i &lt;= n; ++i) for (int j = 1; j &lt;= n; ++j) a.g[i][j] = 0;}char s[505];int N, M;Matrix A;Matrix P[10][505];Matrix Q[505];Matrix f[505];int main() { cin &gt;&gt; (s + 1); N = strlen(s + 1); cin &gt;&gt; M; Init_Unit_Matrix(P[0][0], M); A.n = A.m = M; for (int i = 1; i &lt;= M; ++i) { for (int j = 1; j &lt;= M; ++j) { A.g[i][j] = 0; if (i == 1) A.g[i][j] = 1; if (i - 1 == j) A.g[i][j] = 1; } } for (int i = 1; i &lt;= 9; ++i) { P[i][0] = mul(P[i - 1][0], A); } for (int j = 1; j &lt;= N; ++j) { for (int i = 0; i &lt;= 9; ++i) { P[i][j] = power10(P[i][j - 1]); } } Init_Unit_Matrix(f[0], M); for (int i = 1; i &lt;= N; ++i) { Init_Empty_Matrix(f[i], M); Matrix t; Init_Unit_Matrix(t, M); for (int j = i, c = 0; j &gt;= 1; --j, ++c) { t = mul(t, P[s[j] - '0'][c]); f[i] = add(f[i], mul(f[j - 1], t)); } } cout &lt;&lt; f[N].g[1][1]; return 0;}","link":"/2019/10/12/solution-loj-2128/"},{"title":"题解-LibreOJ-2255炸弹","text":"题目链接(Luogu) 题目链接(LibreOJ) 在一条直线上有 $n$ 个炸弹，每个炸弹给定其坐标和爆炸半径；求出引爆每个炸弹时，共有多少炸弹被连锁引爆。 $n\\le 500000$ 我感谢我自己 很巧妙的建模方法，是作者在学校 yy 出来的。 考虑朴素做法。将每个炸弹向其能引爆的炸弹连边，求出强连通分量后缩点，在 DAG 上乱搞得到答案。 然而这种解法的边数在 $n^2$ 级别。考虑优化。 注意到一个性质：每个炸弹能引爆的所有炸弹必然属于属于一段连续区间。 在原炸弹序列上建一棵线段树，线段树上的所有父节点向儿子连边。对于一个节点向一段区间内节点的连边操作，我们可以将这些边连到区间的父节点上（好比线段树的区间操作）。边数被控制在 $n\\log n$ 级别。 缩点并得到 DAG 后，发现不能简单地进行答案统计；因为会产生重复的状态转移。 观察到本题的一个特殊性质：被连锁反应引爆的范围一定仍然是一段连续区间。我们只需维护区间的最小值和最大值，并以此进行状态转移即可。 是否存在此类问题通解？ 是否存在不用建图的解法？ ge(x) 表示大于等于 x 的最小坐标，le(x) 表示小于等于 x 的最大坐标 实现极为简单。代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include &lt;bits/stdc++.h&gt;using namespace std;#define lson(u) node[u].l#define rson(u) node[u].r#define ge(x) (lower_bound(a + 1, a + N + 1, x) - a)#define le(x) (upper_bound(a + 1, a + N + 1, x) - a - 1)typedef long long ll;const int maxn = 1000005;const int mod = 1000000007;const int inf = 0x3f3f3f3f;struct Node { int l, r;}node[maxn &lt;&lt; 1];int cnt;int N, R, ans;ll a[maxn], r[maxn];int num[maxn], range[maxn][2];vector&lt;int&gt; G[maxn], SCC[maxn];int w[maxn], dfn[maxn], low[maxn], dfn_idx;int scc[maxn], scc_cnt;bool ins[maxn];stack&lt;int&gt; s;int f[maxn][2];bool vis[maxn];void build(int&amp; u, int l, int r) { u = ++cnt; range[u][0] = l, range[u][1] = r; if (l == r) { num[l] = u; w[u] = 1; return; } int mid = (l + r) &gt;&gt; 1; build(lson(u), l, mid), build(rson(u), mid + 1, r); G[u].push_back(lson(u)), G[u].push_back(rson(u));}void add_edge_range(int u, int l, int r, int qu, int ql, int qr) { if (ql &lt;= l &amp;&amp; r &lt;= qr) { G[qu].push_back(u); return; } int mid = (l + r) &gt;&gt; 1; if (ql &lt;= mid) add_edge_range(lson(u), l, mid, qu, ql, qr); if (mid &lt; qr) add_edge_range(rson(u), mid + 1, r, qu, ql, qr);}void tarjan(int u) { low[u] = dfn[u] = ++dfn_idx; ins[u] = 1; s.push(u); for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; if (dfn[v] == 0) { tarjan(v); low[u] = min(low[u], low[v]); } else if (ins[v]) { low[u] = min(low[u], dfn[v]); } } if (low[u] == dfn[u]) { scc_cnt++; f[scc_cnt][0] = inf, f[scc_cnt][1] = -inf; while (ins[u]) { int t = s.top(); s.pop(); ins[t] = 0; scc[t] = scc_cnt; f[scc_cnt][0] = min(f[scc_cnt][0], range[t][0]); f[scc_cnt][1] = max(f[scc_cnt][1], range[t][1]); } }}void dp(int u) { if (vis[u]) return; vis[u] = 1; for (vector&lt;int&gt;::iterator it = SCC[u].begin(); it != SCC[u].end(); it++) { int v = *it; dp(v); f[u][0] = min(f[u][0], f[v][0]); f[u][1] = max(f[u][1], f[v][1]); }}int main() { scanf(\"%d\", &amp;N); for (int i = 1; i &lt;= N; ++i) scanf(\"%lld%lld\", &amp;a[i], &amp;r[i]); build(R, 1, N); for (int i = 1; i &lt;= N; ++i) add_edge_range(R, 1, N, num[i], ge(a[i] - r[i]), le(a[i] + r[i])); tarjan(1); for (int u = 1; u &lt;= N; ++u) { for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; if (scc[u] != scc[v]) SCC[scc[u]].push_back(scc[v]); } } for (int i = 1; i &lt;= scc_cnt; ++i) dp(i); for (int i = 1; i &lt;= N; ++i) { ans = (ans + 1ll * i * (f[scc[num[i]]][1] - f[scc[num[i]]][0] + 1)) % mod; } printf(\"%d\", ans); return 0;}","link":"/2019/10/22/solution-loj-2255/"},{"title":"「BJOI2019」光线","text":"#3093. 「BJOI2019」光线 Summarize题目概括征集中~ Solution一开始愣是套高斯消元想了半天……后来发现是普通 DP 秒出 Part1: 高斯消元 $O(n^3)$记 $f[i]$ 表示第 $i$ 片玻璃向下的光线总数，$g[i]$ 表示第 $i$ 片玻璃向上的光线总数。 显然地： f[i]=f[i-1]\\times a[i]+g[i+1]\\times b[i]\\\\ g[i]=f[i-1]\\times b[i]+g[i+1]\\times a[i] f[i]=f[i-1]\\times a[i]+g[i+1]\\times b[i]\\\\ g[i]=f[i-1]\\times b[i]+g[i+1]\\times a[i] \\\\ x_i=x_{i-1}\\times a[i] + x_{n+i+1}\\times b[i]\\\\ x_{n+i}=x_{i-1}\\times b[i]+x_{n+i+1}\\times a[i]共有 $2n$ 个未知数和 $2n$ 个等式，暴力求解方程即可。 期望得分：50 pts f[i]=f[i-1]\\times a[i]+f[i-1]\\times b[i]\\times g[i-1]\\times a[i]+... f[i]=f[i-1]\\times a[i]\\times\\sum_{j=0}^{+\\infty}(b[i]\\times g[i-1])^j\\\\ f[i]=f[i-1]\\times a[i]\\times g[i]=b[i]+a[i]\\times g[i-1]\\times a[i]+a[i]\\times g[i-1]\\times b[i]\\times g[i-1]\\times a[i] g[i]=b[i]+a[i]^2\\times g[i-1]\\times\\sum_{j=0}^{+\\infty}(b[i]\\times g[i-1])^j \\{a_n\\}\\\\ a_n=a_{n-1}\\times q\\ \\ (0","link":"/2019/10/31/solution-loj-3093/"},{"title":"题解-LibreOJ-3166魔法树","text":"题目链接 给定$n$个节点的树有，每个时间点$d$可以砍下一些边，可以收获得所有与根不连通且$d_i=d$的点的权值$w_i$，求获得的最大权值和。 $2 \\le n \\le 10^5$ 感谢@oy的贡献 这是一道非常漂亮的题！ 定义状态： $f[u][i]$ 表示在第 $i$ 天砍掉 $u-&gt;fa[u]$ 的一条边，所能获得的最多果汁数量。 状态转移方程： f[u][i]=\\sum_{v\\in son(u)}{(\\max_{j=1}^{i}f[v][j])}解法一：用动态开点权值线段树维护 $f[u]$，转移时在线段树上操作即可。码量较大，常数较大。 解法二：不难发现 $f[u][1]$ 到 $f[u][k]$ 是单调不下降的，因此设 $g[u][i]=\\max_{j=1}^i f[u][j]$。用差分数组维护 $g[u]$，观察到差分数组中非零元素个数不超过 $size[u]$，可以用集合（stl::map) 记录差分数组中的所有非零元素。 在集合合并时，采取 dsu on tree，复杂度 $O(n\\log^2 n)$。本题的关键点在于如果当前位置有果实，那么还需要对差分数组进行一些修改：将差分数组的 $d[u]$ 位置加上 $w[u]$，在 $d[u]$ 之后的部分则需依次减掉此次操作的值。 码量较小，常数较小。 代码如下：（自带大常数） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 100005;vector&lt;int&gt; G[maxn];map&lt;int, ll&gt; mp[maxn];int d[maxn];ll w[maxn];int N, M, K;void dfs(int u) { for (auto v: G[u]) { dfs(v); if (mp[u].size() &lt; mp[v].size()) swap(mp[u], mp[v]); for (auto it: mp[v]) { mp[u][it.first] += it.second; } } if (d[u]) { mp[u][d[u]] += w[u]; for (auto it = mp[u].upper_bound(d[u]); it != mp[u].end();) { if (it-&gt;second &gt; w[u]) { it-&gt;second -= w[u]; break; } w[u] -= it-&gt;second; it-&gt;second = 0; mp[u].erase(it++); } }}int main() { scanf(\"%d%d%d\", &amp;N, &amp;M, &amp;K); for (register int i = 2; i &lt;= N; ++i) { int p; scanf(\"%d\", &amp;p); G[p].push_back(i); } for (register int i = 1; i &lt;= M; ++i) { int v; scanf(\"%d\", &amp;v); scanf(\"%d%I64d\", &amp;d[v], &amp;w[v]); } dfs(1); ll ans = 0; for (auto it: mp[1]) ans += it.second; printf(\"%I64d\", ans); return 0;}","link":"/2019/10/03/solution-loj-3166/"},{"title":"「TJOI2019」唱、跳、rap 和篮球","text":"#3106. 「TJOI2019」唱、跳、rap 和篮球 Summarize题目概括征集中~ Solution记连续的 4 个学生分别喜欢唱、跳、rap 和篮球为一组。考虑容斥，记 $f[i]$ 为保证至少存在 $i$ 组的序列方案数。根据题意，在此序列中最多只会存在 $m=\\min\\lbrace a,b,c,\\lfloor\\frac{n}{4}\\rfloor\\rbrace$ 组。最终答案即为 $\\sum_{i=0}^{m}(-1)^{i}\\times f[i]$。 考虑 $f[i]$ 的计算。由于保证至少存在 $i$ 组，可以将 $i$ 组随机插入到序列中，然后在剩下的位置插入任意学生并统计答案。 将 $i$ 个长度为 4 的组插入到长度为 $n$ 的序列中，共有 ${n-3i\\choose i}$ 种方案。 将 $i_1$ 个喜欢唱、$i_2$ 个喜欢跳、$i_3$ 个喜欢 rap、$i_4$ 个喜欢篮球的学生放置在长度为 $n-4i$ 的序列中，如果保证 $i_1+i_2+i_3+i_4=n-4i$，则方案数为 $\\frac{(n-4i)!}{i_1!\\times i_2!\\times i_3\\times i_4!}$。 然而题目不保证剩余的 $a-i$、$b-i$、$c-i$、$d-i$ 个学生之和恰好为 $n-4i$，因此该部分的答案为： \\sum_{i_1=0}^{a-i}\\sum_{i_2=0}^{b-i}\\sum_{i_3=0}^{c-i}\\sum_{i_4=0}^{d-i}[i_1+i_2+i_3+i_4=n-4i]\\frac{(n-4i)!}{i_1!\\times i_2!\\times i_3\\times i_4!}注意到这是一个四元卷积的形式，可以用生成函数 + NTT 暴力求解。 Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const ll MOD = 998244353, G = 3;inline ll qpow(ll a, ll k) { ll ret = 1; while (k) { if (k &amp; 1) ret = ret * a % MOD; a = a * a % MOD; k &gt;&gt;= 1; } return ret;}namespace FFT { int n, r[10005]; void NTT(ll *a, int op) { int k = 0; for (; (1 &lt;&lt; k) &lt; n; ++k); for (int i = 0; i &lt; n; ++i) { r[i] = r[i &gt;&gt; 1] &gt;&gt; 1 | (i &amp; 1) &lt;&lt; (k - 1); if (i &lt; r[i]) swap(a[i], a[r[i]]); } for (int l = 2; l &lt;= n; l &lt;&lt;= 1) { int m = l &gt;&gt; 1; ll w = qpow(G, (MOD - 1) / l); if (op == -1) w = qpow(w, MOD - 2); for (int i = 0; i &lt; n; i += l) { ll wk = 1; for (int j = 0; j &lt; m; ++j, wk = wk * w % MOD) { ll p = a[i + j], q = wk * a[i + j + m] % MOD; a[i + j] = (p + q) % MOD; a[i + j + m] = (p - q + MOD) % MOD; } } } } void DFT(ll *a) { NTT(a, 1); } void IDFT(ll *a) { NTT(a, -1); ll inv = qpow(n, MOD - 2); for (int i = 0; i &lt; n; ++i) a[i] = a[i] * inv % MOD; }};ll f[1005];ll fac[4005], inv[4005], facinv[4005];ll x[4005], y[4005], z[4005], w[4005];ll C(int n, int k) { return fac[n] * facinv[k] % MOD * facinv[n - k] % MOD;}int n, a, b, c, d, m;ll ans = 0;int main() { fac[0] = facinv[0] = 1; fac[1] = inv[1] = facinv[1] = 1; for (int i = 2; i &lt;= 4000; ++i) { fac[i] = fac[i - 1] * 1ll * i % MOD; inv[i] = (MOD - MOD / i) * inv[MOD % i] % MOD; facinv[i] = facinv[i - 1] * inv[i] % MOD; } scanf(\"%d%d%d%d%d\", &amp;n, &amp;a, &amp;b, &amp;c, &amp;d); m = min(min(min(min(n / 4, a), b), c), d); for (int i = 0; i &lt;= m; ++i) { memset(x, 0, sizeof(x)); memset(y, 0, sizeof(y)); memset(z, 0, sizeof(z)); memset(w, 0, sizeof(w)); for (int j = 0; j &lt;= a - i; ++j) x[j] = facinv[j]; for (int j = 0; j &lt;= b - i; ++j) y[j] = facinv[j]; for (int j = 0; j &lt;= c - i; ++j) z[j] = facinv[j]; for (int j = 0; j &lt;= d - i; ++j) w[j] = facinv[j]; FFT::n = 1; while (FFT::n &lt;= a + b + c + d - 4 * i) FFT::n &lt;&lt;= 1; FFT::DFT(x), FFT::DFT(y), FFT::DFT(z), FFT::DFT(w); for (int j = 0; j &lt; FFT::n; ++j) x[j] = x[j] * y[j] % MOD * z[j] % MOD * w[j] % MOD; FFT::IDFT(x); f[i] = C(n - 3 * i, i) * fac[n - 4 * i] % MOD * x[n - 4 * i] % MOD; if (i &amp; 1) ans = (ans - f[i] + MOD) % MOD; else ans = (ans + f[i]) % MOD; } printf(\"%lld\", ans); return 0;}","link":"/2019/11/22/solution-loj-3106/"},{"title":"「CEOI2018」云计算","text":"#3182. 「CEOI2018」云计算 Summarize题目概括征集中~ 球球你再帮我写几篇吧 TAT @oykz2333 Solution 这题也太巧妙了叭！ ——tth37 考虑类似背包的动态规划。记 $f[i]$ 表示满足订单后恰好剩余 $i$ 个核心的最大利润。 先不考虑时钟频率的限制条件，则问题可以转化为普通背包问题：将计算机的价格视为负数，将订单的核心数视为负数，采用背包问题的状态转移即可。 如果考虑到时钟频率的限制，则需要满足：在将每个订单放入背包之前，必须将所有时钟频率大于等于该订单的计算机放入背包中。 将计算机和订单按照时钟频率排序后，依次加入背包即可。 Code1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int MAXN = 2005;struct Node { int c, f, v; bool type;}a[MAXN * 2];bool cmp(Node a, Node b) { if (a.f != b.f) return a.f &gt; b.f; return a.type &lt; b.type;}int n, m, tot;ll f[MAXN * 50];int main() { scanf(\"%d\", &amp;n); for (int i = 1; i &lt;= n; ++i) scanf(\"%d%d%d\", &amp;a[i].c, &amp;a[i].f, &amp;a[i].v), a[i].type = 0, tot += a[i].c; scanf(\"%d\", &amp;m); for (int i = 1; i &lt;= m; ++i) scanf(\"%d%d%d\", &amp;a[n + i].c, &amp;a[n + i].f, &amp;a[n + i].v), a[n + i].type = 1; sort(a + 1, a + n + m + 1, cmp); memset(f, 0xcf, sizeof(f)); f[0] = 0; for (int i = 1; i &lt;= n + m; ++i) { if (a[i].type == 0) { for (int j = tot; j &gt;= a[i].c; --j) f[j] = max(f[j], f[j - a[i].c] - a[i].v); } else { for (int j = 0; j &lt;= tot - a[i].c; ++j) f[j] = max(f[j], f[j + a[i].c] + a[i].v); } } ll ans = 0; for (int i = 0; i &lt;= tot; ++i) ans = max(ans, f[i]); printf(\"%lld\", ans); return 0;}","link":"/2019/11/23/solution-loj-3182/"},{"title":"题解-LibreOJ-6029「雅礼集训 2017 Day1」市场","text":"题目链接(LibreOJ) 维护一个数据结构，支持区间加减、区间除法（下取整）、区间查询最值、区间查询总和操作。 $n \\le 100000, q \\le 100000$ 线段树区间除法模板题。可以玄学分析复杂度。 观察到对某个区间进行除法操作后，其区间内的权值整体减小某个值，当且仅当该区间的最大元素与最小元素减小的值相等。因此区间除法可以转化为区间减法，只需判断是否满足区间减的条件即可。 注意 '/' 运算符对数字进行向零取整，并不是向下取整 实现非常简单。代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define lson(u) node[u].l#define rson(u) node[u].r#define tag(u) node[u].tag#define maxx(u) node[u].maxx#define minn(u) node[u].minn#define sum(u) node[u].sumconst int maxn = 100005;const int inf = 0x3f3f3f3f;struct Node { int l, r, tag, minn, maxx; ll sum;}node[maxn &lt;&lt; 1];int cnt;int N, Q, R;int a[maxn];inline void pushdown(int u, int l, int r) { if (tag(u)) { int mid = (l + r) &gt;&gt; 1; int llen = mid - l + 1, rlen = r - mid; sum(lson(u)) += 1ll * tag(u) * llen, sum(rson(u)) += 1ll * tag(u) * rlen; minn(lson(u)) += tag(u), minn(rson(u)) += tag(u); maxx(lson(u)) += tag(u), maxx(rson(u)) += tag(u); tag(lson(u)) += tag(u), tag(rson(u)) += tag(u); tag(u) = 0; }}inline void pushup(int u) { sum(u) = sum(lson(u)) + sum(rson(u)); minn(u) = min(minn(lson(u)), minn(rson(u))); maxx(u) = max(maxx(lson(u)), maxx(rson(u)));}void build(int&amp; u, int l, int r) { u = ++cnt; sum(u) = 0, minn(u) = inf, maxx(u) = -inf; if (l == r) { sum(u) = minn(u) = maxx(u) = a[l]; return; } int mid = (l + r) &gt;&gt; 1; build(lson(u), l, mid), build(rson(u), mid + 1, r); pushup(u);}void modify_range_add(int u, int l, int r, int ql, int qr, int val) { if (ql &lt;= l &amp;&amp; r &lt;= qr) { tag(u) += val; sum(u) += 1ll * val * (r - l + 1); minn(u) += val; maxx(u) += val; return; } pushdown(u, l, r); int mid = (l + r) &gt;&gt; 1; if (ql &lt;= mid) modify_range_add(lson(u), l, mid, ql, qr, val); if (mid &lt; qr) modify_range_add(rson(u), mid + 1, r, ql, qr, val); pushup(u);}void modify_range_divide(int u, int l, int r, int ql, int qr, int val) { if (ql &lt;= l &amp;&amp; r &lt;= qr) { int dmin = minn(u) - floor(1.0 * minn(u) / val), dmax = maxx(u) - floor(1.0 * maxx(u) / val); if (dmin == dmax) { tag(u) -= dmin; sum(u) -= 1ll * dmin * (r - l + 1); minn(u) -= dmin; maxx(u) -= dmin; return; } } pushdown(u, l, r); int mid = (l + r) &gt;&gt; 1; if (ql &lt;= mid) modify_range_divide(lson(u), l, mid, ql, qr, val); if (mid &lt; qr) modify_range_divide(rson(u), mid + 1, r, ql, qr, val); pushup(u);}int query_range_min(int u, int l, int r, int ql, int qr) { if (ql &lt;= l &amp;&amp; r &lt;= qr) return minn(u); pushdown(u, l, r); int mid = (l + r) &gt;&gt; 1, ret = inf; if (ql &lt;= mid) ret = min(ret, query_range_min(lson(u), l, mid, ql, qr)); if (mid &lt; qr) ret = min(ret, query_range_min(rson(u), mid + 1, r, ql, qr)); return ret;}ll query_range_sum(int u, int l, int r, int ql, int qr) { if (ql &lt;= l &amp;&amp; r &lt;= qr) return sum(u); pushdown(u, l, r); int mid = (l + r) &gt;&gt; 1; ll ret = 0; if (ql &lt;= mid) ret += query_range_sum(lson(u), l, mid, ql, qr); if (mid &lt; qr) ret += query_range_sum(rson(u), mid + 1, r, ql, qr); return ret;}int main() { scanf(\"%d%d\", &amp;N, &amp;Q); for (int i = 0; i &lt; N; ++i) scanf(\"%d\", &amp;a[i]); build(R, 0, N - 1); for (int i = 1; i &lt;= Q; ++i) { int op, l, r, x; scanf(\"%d%d%d\", &amp;op, &amp;l, &amp;r); if (op == 1) scanf(\"%d\", &amp;x), modify_range_add(R, 0, N - 1, l, r, x); else if (op == 2) scanf(\"%d\", &amp;x), modify_range_divide(R, 0, N - 1, l, r, x); else if (op == 3) printf(\"%d\\n\", query_range_min(R, 0, N - 1, l, r)); else printf(\"%lld\\n\", query_range_sum(R, 0, N - 1, l, r)); } return 0;}","link":"/2019/10/21/solution-loj-6029/"},{"title":"题解-LibreOJ-6032「雅礼集训 2017 Day2」水箱","text":"题目链接 题目概括重金征集中~ 比较毒瘤的一道题。 注意到每个条件只有“有水”限制和“没水”限制。问题在于如何统计最多能满足多少条件。假定所有的“没水”条件都能满足，在 DP 中如果在“没水”限制的格子中填入了水，则对答案的贡献减一；如果在“有水”限制的格子中填入了水，则对答案的贡献加一。 根据以上方法，可以定义状态：$f[i][j]$ 表示在从左往右第 $i$ 个格子中，高度为 $j$ 的地方有水时对答案产生的最大贡献。注意：此时假定第 $i$ 个格子的右侧挡板为无限高。 显然，如果 $j$ 小于等于其左侧挡板的高度，上一格的水的高度可以为 $1-h[i]$ 的任意值；如果 $j$ 大于其左侧挡板的高度，那么上一格的水的高度必须同样为 $j$。 状态转移方程如下： f[i][j]= \\begin{cases} \\sum_{k=1}^{j} w[i][k]+\\max_{k=1}^{h[i]}\\lbrace f[i-1][k]\\rbrace,\\ j\\le h[i] \\\\ \\sum_{k-1}^{j} w[i][k]+f[i-1][j],\\ j>h[i] \\end{cases}不难发现可以使用滚动数组优化空间；并且注意到，每个新的 $f[i][j]$ 要么是被修改成某个值，要么是在原来的基础上加上了某些东西。 在本题中，每个格子中限制条件的分布是相对稀疏的。那么，在同一格子的不同高度处，只要其对答案的贡献前缀和相等，则可以作为区间进行快速处理。 具体来说，可以使用线段树维护 $f[1]-f[L]$，并在其中用滚动数组的操作进行状态转移。这棵线段树需要支持区间修改（替换），区间修改（增加），区间查询最大值。 注意需要对高度进行离散化处理。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166#include &lt;bits/stdc++.h&gt;#define lson(u) node[u].l#define rson(u) node[u].r#define val(u) node[u].val#define tag1(u) node[u].tag1#define tag2(u) node[u].tag2#define id(x) (lower_bound(b + 1, b + L + 1, x) - b)#define rid(x) b[x]using namespace std;const int MAXN = 400005;const int inf = 0x3f3f3f3f;struct Node { int l, r, val, tag1, tag2; // val: max // tag1: replace // tag2: add}node[MAXN * 3];int cnt;struct Limit { int x, y, k;}limit[MAXN];int T, N, M;int R, L;int b[MAXN], h[MAXN];inline void build(int&amp; u, int l, int r) { u = ++cnt; tag1(u) = -inf; tag2(u) = 0; if (l == r) return; int mid = (l + r) &gt;&gt; 1; build(lson(u), l, mid); build(rson(u), mid + 1, r);}inline void pushdown(int u) { if (tag1(u) != -inf) { val(lson(u)) = val(rson(u)) = tag1(u); tag1(lson(u)) = tag1(rson(u)) = tag1(u); tag2(lson(u)) = tag2(rson(u)) = 0; tag1(u) = -inf; } if (tag2(u) != 0) { val(lson(u)) += tag2(u); val(rson(u)) += tag2(u); tag2(lson(u)) += tag2(u); tag2(rson(u)) += tag2(u); tag2(u) = 0; }}inline void pushup(int u) { val(u) = max(val(lson(u)), val(rson(u)));}inline void modify_replace(int u, int l, int r, int ql, int qr, int val) { if (ql &gt; qr) return; pushdown(u); if (ql &lt;= l &amp;&amp; r &lt;= qr) { val(u) = val; tag1(u) = val; return; } int mid = (l + r) &gt;&gt; 1; if (ql &lt;= mid) modify_replace(lson(u), l, mid, ql, qr, val); if (mid &lt; qr) modify_replace(rson(u), mid + 1, r, ql, qr, val); pushup(u);}inline void modify_add(int u, int l, int r, int ql, int qr, int val) { if (ql &gt; qr) return; pushdown(u); if (ql &lt;= l &amp;&amp; r &lt;= qr) { val(u) += val; tag2(u) = val; return; } int mid = (l + r) &gt;&gt; 1; if (ql &lt;= mid) modify_add(lson(u), l, mid, ql, qr, val); if (mid &lt; qr) modify_add(rson(u), mid + 1, r, ql, qr, val); pushup(u);}inline int query_max(int u, int l, int r, int ql, int qr) { pushdown(u); if (ql &lt;= l &amp;&amp; r &lt;= qr) { return val(u); } int mid = (l + r) &gt;&gt; 1, ret = -inf; if (ql &lt;= mid) ret = max(ret, query_max(lson(u), l, mid, ql, qr)); if (mid &lt; qr) ret = max(ret, query_max(rson(u), mid + 1, r, ql, qr)); return ret;}inline bool cmp(Limit a, Limit b) { if (a.x != b.x) return a.x &lt; b.x; if (a.y != b.y) return a.y &lt; b.y; return a.k &lt; b.k;}int main() { scanf(\"%d\", &amp;T); while (T--) { memset(node, 0, sizeof(node)); cnt = 0, L = 0, R = 0; int ans1 = 0; scanf(\"%d%d\", &amp;N, &amp;M); for (register int i = 2; i &lt;= N; ++i) { scanf(\"%d\", &amp;h[i]); b[++L] = h[i]; } for (register int i = 1; i &lt;= M; ++i) { scanf(\"%d%d%d\", &amp;limit[i].x, &amp;limit[i].y, &amp;limit[i].k); limit[i].y++; if (limit[i].k == 0) limit[i].k = -1, ans1++; b[++L] = limit[i].y; b[++L] = limit[i].y - 1; } sort(b + 1, b + L + 1); L = unique(b + 1, b + L + 1) - b - 1; h[1] = L; build(R, 1, L); for (register int i = 2; i &lt;= N; ++i) h[i] = id(h[i]); for (register int i = 1; i &lt;= M; ++i) limit[i].y = id(limit[i].y); sort(limit + 1, limit + M + 1, cmp); int cur = 1; for (register int i = 1; i &lt;= N; ++i) { int height = 1, s = 0; int tmp = query_max(R, 1, L, 1, h[i]); while (limit[cur].x == i &amp;&amp; limit[cur].y &lt;= h[i]) { int w = limit[cur].k; while (limit[cur].x == limit[cur + 1].x &amp;&amp; limit[cur].y == limit[cur + 1].y) { w += limit[++cur].k; } modify_replace(R, 1, L, height, id(rid(limit[cur].y) - 1), s + tmp); height = limit[cur].y; s += w; cur++; } if (height &lt;= h[i]) modify_replace(R, 1, L, height, h[i], s + tmp); height = h[i] + 1; while (limit[cur].x == i) { int w = limit[cur].k; while (limit[cur].x == limit[cur + 1].x &amp;&amp; limit[cur].y == limit[cur + 1].y) { w += limit[++cur].k; } modify_add(R, 1, L, height, id(rid(limit[cur].y) - 1), s); height = limit[cur].y; s += w; cur++; } if (height &lt;= L) modify_add(R, 1, L, height, L, s); } printf(\"%d\\n\", ans1 + query_max(R, 1, L, 1, L)); } return 0;}","link":"/2019/09/28/solution-loj-6032/"},{"title":"题解-LibreOJ-6033「雅礼集训 2017 Day2」棋盘游戏","text":"题目链接(LibreOJ) 弱弱的征集题目概括 二分图博弈。首先是个人都能看出来将棋盘黑白染色、建二分图。 假设二分图存在完美匹配，则无论起点在哪，Bob 必胜。显然 Bob 可以一直沿匹配边走，Alice 只能走非匹配边直到无路可走。 假设二分图不存在完美匹配，则如果起点为二分图最大匹配的必配点，则 Bob 必胜；反之 Alice 必胜。 证明？ 如何求解某个点是否为二分图最大匹配的必配点？ 考虑找到二分图上所有非必配点。先求解出一个二分图最大匹配。显然，不在该最大匹配中的点均为非必配点。 对于该最大匹配中的点，考虑如果能以之为起点、找到以非匹配点为终点的交错轨，则该点为非必配点。 根据 这篇博客 中的思路，可以将不在最大匹配中的点作为起点，找到的所有交错轨上的点均为非必配点。 将非必配点输出即可。 建图很关键，不要犯傻；否则调都调不出来 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include &lt;bits/stdc++.h&gt;using namespace std;int nx[] = {-1, 0, 1, 0};int ny[] = {0, 1, 0, -1};int N, M;int a[105][105];int c[105][105];int cnt1, cnt2;vector&lt;int&gt; G[20005];bool vis[20005];int m[20005];bool tag[20005];vector&lt;pair&lt;int, int&gt; &gt; Out;bool find(int u) { if (vis[u]) return 0; vis[u] = 1; for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; if (m[v] == 0 || find(m[v])) { m[u] = v, m[v] = u; return 1; } } return 0;}bool dfs(int u) { if (vis[u]) return 0; vis[u] = 1; if (m[u] == 0) return 1; for (vector&lt;int&gt;::iterator it = G[m[u]].begin(); it != G[m[u]].end(); it++) { int v = *it; if (dfs(v)) return 1; } return 0;}int main() { cin &gt;&gt; N &gt;&gt; M; for (int i = 1; i &lt;= N; ++i) { for (int j = 1; j &lt;= M; ++j) { char ch; cin &gt;&gt; ch; if (ch == '#') continue; if ((i + j) &amp; 1) c[i][j] = ++cnt1; else c[i][j] = ++cnt2 + 10000; } } for (int i = 1; i &lt;= N; ++i) { for (int j = 1; j &lt;= M; ++j) { if (c[i][j] == 0) continue; for (int k = 0; k &lt; 4; ++k) { int ti = i + nx[k], tj = j + ny[k]; if (ti &gt;= 1 &amp;&amp; ti &lt;= N &amp;&amp; tj &gt;= 1 &amp;&amp; tj &lt;= M) { if (c[ti][tj]) G[c[i][j]].push_back(c[ti][tj]); } } } } for (int i = 1; i &lt;= cnt1; ++i) { memset(vis, 0, sizeof(vis)); find(i); } for (int i = 1; i &lt;= N; ++i) { for (int j = 1; j &lt;= M; ++j) { if (c[i][j] == 0) continue; memset(vis, 0, sizeof(vis)); if (dfs(c[i][j])) { Out.push_back(make_pair(i, j)); } } } printf(\"%d\\n\", Out.size()); for (int i = 0; i &lt; (int)Out.size(); ++i) printf(\"%d %d\\n\", Out[i].first, Out[i].second); return 0;}","link":"/2019/10/25/solution-loj-6033/"},{"title":"「雅礼集训 2017 Day7」蛐蛐国的修墙方案","text":"#6043. 「雅礼集训 2017 Day7」蛐蛐国的修墙方案 Summarize题目概括征集中~ SolutionCSP-S RP++! 赛前再做几个搜索 / 模拟，为暴力骗分做准备，顺便填一下雅礼集训的坑。 Part1: 暴搜观察题意得出，第 $i$ 个位置和第 $P_i$ 个位置上，必须填一个左括号和一个右括号。从左向右填写，每次判断是否可以填左 / 右括号即可。 得分 81 pts 。 Code12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;bits/stdc++.h&gt;using namespace std;int n;int ans[105];int p[105];bool force_right[105];void dfs(int dep, int cnt) { if (dep == n + 1) { for (int i = 1; i &lt;= n; ++i) putchar('(' + ans[i]); exit(0); } if (cnt &lt; n / 2) { if (force_right[dep] == 0) { if (p[dep] &lt; dep) { if (ans[p[dep]] == 1) { ans[dep] = 0; dfs(dep + 1, cnt + 1); ans[dep] = 0; } } else { force_right[p[dep]] = 1; dfs(dep + 1, cnt + 1); force_right[p[dep]] = 0; } } } if (dep - cnt &lt;= cnt) { ans[dep] = 1; dfs(dep + 1, cnt); ans[dep] = 0; }}int main() { scanf(\"%d\", &amp;n); for (int i = 1; i &lt;= n; ++i) scanf(\"%d\", &amp;p[i]); dfs(1, 0); return 0;} Part2: 观察性质将排列 $P$ 视作置换函数，则 $P$ 必定可以分解为若干个长度为偶数的循环。（若不然，必定无解）对于每个循环都只有 2 种填法，即 0,1,0,1… 或 1,0,1,0…。特判长度为 2 的循环，则剩余的循环最多有 $100 / 4 = 25$ 个。复杂度约为 $2^{25}$ 级别。 得分 100 pts。 Code12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#pragma GCC optimize(3)#include &lt;bits/stdc++.h&gt;using namespace std;int n, p[105];vector&lt;int&gt; circ[105];bool vis[105], ans[105];int cnt = 0;bool check() { int cnt1 = 0, cnt2 = 0; for (int i = 1; i &lt;= n; ++i) { cnt1 += (ans[i] == 0), cnt2 += ans[i]; if (cnt1 &lt; cnt2) return 0; } return 1;}void dfs(int u) { if (u == cnt + 1) { if (check()) { for (int i = 1; i &lt;= n; ++i) putchar('(' + ans[i]); exit(0); } return; } int len = circ[u].size(); if (!(len ^ 2)) { ans[circ[u][0]] = 0, ans[circ[u][1]] = 1; dfs(u + 1); } else { for (int i = 0; i ^ len; ++i) ans[circ[u][i]] = i &amp; 1; dfs(u + 1); for (int i = 0; i ^ len; ++i) ans[circ[u][i]] = !(i &amp; 1); dfs(u + 1); }}int main() { scanf(\"%d\", &amp;n); for (int i = 1; i &lt;= n; ++i) scanf(\"%d\", &amp;p[i]); for (int i = 1; i &lt;= n; ++i) { if (vis[i] == 0) { cnt += 1; int cur = i; do { circ[cnt].push_back(cur); vis[cur] = 1; cur = p[cur]; } while (cur != i); } } dfs(1); return 0;}","link":"/2019/11/14/solution-loj-6043/"},{"title":"题解-LibreOJ-6495「雅礼集训 2018 Day1」树","text":"题目链接(LibreOJ) 题目概括征集中~ 重金（5 RMB）征集状压 dp 解法~ @所有人 这题也太巧妙了叭！ ——Mr.G Solution 1 : $O(n^4)$注意到节点 2 的父节点一定为 1；因此可以将以 2 为根的子树与剩余部分分开讨论。 定义状态 $f[i][j]$ 表示有 $i$ 个节点，深度为 $j$ 的方案数。 设以 2 为根的子树中共有 $x$ 个节点。情况一：子树 2 的深度恰好为 $j-1$，剩余部分的深度任意；情况二：子树 2 的深度任意，剩余部分的深度恰好为 $j$。 由于两棵子树的节点编号为 $3…i$ 间的任意整数，所以求出方案数之后需乘上标号的方案数。 f[i][j]=\\sum_{x=1}^{i-1}[\\sum_{k=1}^{j}f[x][j-1]\\times f[i-x][k]\\times {i-2\\choose x-1}+\\sum_{k=1}^{j-2}f[x][k]\\times f[i-x][j]\\times{i-2\\choose x-1}]对于期望，只需将 $\\sum_{i=1}^n f[n][i]\\times i$ 除以 $(n-1)!$ 即可。 对于四舍五入，可打表。（正经） 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 30;const int tb[] = {0, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6};ll n, p;ll fac[maxn], inv[maxn], facinv[maxn];inline int C(int n, int m) { return fac[n] * facinv[n - m] % p * facinv[m] % p;}ll f[maxn][maxn];ll ans = 0;int main() { cin &gt;&gt; n &gt;&gt; p; fac[0] = fac[1] = inv[1] = facinv[0] = facinv[1] = 1; for (int i = 2; i &lt;= n; ++i) { inv[i] = (p - p / i) * inv[p % i] % p; fac[i] = fac[i - 1] * i % p; facinv[i] = facinv[i - 1] * inv[i] % p; } f[1][1] = 1, f[2][2] = 1; for (int i = 3; i &lt;= n; ++i) { for (int j = 1; j &lt;= n; ++j) { for (int x = 1; x &lt;= i - 1; ++x) { int t1 = 0, t2 = 0; for (int k = 1; k &lt;= j; ++k) t1 = (t1 + f[x][j - 1] * f[i - x][k] % p * C(i - 2, x - 1) % p) % p; for (int k = 1; k &lt;= j - 2; ++k) t2 = (t2 + f[x][k] * f[i - x][j] % p * C(i - 2, x - 1) % p) % p; f[i][j] = (f[i][j] + t1 + t2) % p; } } } for (int i = 1; i &lt;= n; ++i) ans = (ans + f[n][i] * i) % p; for (int i = 1; i &lt;= n - 1; ++i) ans = (ans * inv[i]) % p; cout &lt;&lt; tb[n] &lt;&lt; endl &lt;&lt; ans; return 0;} Solution 2 : $O(2^n*n^2)$状压 dp 解法","link":"/2019/10/19/solution-loj-6495/"},{"title":"「雅礼集训 2018 Day1」图","text":"#6497. 「雅礼集训 2018 Day1」图 Summarize题目概括征集中~ Solution特别屌的一个计数 DP。 记 $g(i)$ 表示以 $i$ 节点结尾的交错路径条数。 定义状态：$f[i][k][x][y]$ 表示考虑前 $i$ 个节点，奇偶性为 $k=0/1$； $x=0/1$ 表示是否存在 $g()$ 为奇数的黑色节点， $y=0/1$ 表示是否存在 $g()$ 为奇数的白色节点。 考虑转移：假设已经求出 $f[i][k][x][y]$。枚举第 $i+1$ 个节点的颜色。 当第 $i+1$ 个节点为白色时： 如果 $x=0$，即不存在 $g()$ 为奇数的黑色节点，那么无论如何连边，总的原方案的奇偶性一定会发生改变。考虑如果有黑色节点向 $i+1$ 连边，则交错路径会增加偶数条（即增加 $g()$）；如果有白色节点向其连边，则交错路径数不变；第 $i+1$ 个节点单独作为一条路径，因此交错路径增加了奇数条，奇偶性发生改变。 转移方程： f[i+1][k\\oplus1][x][1]=f[i+1][k\\oplus1][x][1]+2^i\\times f[i][k][x][y]如果 $x=1$，那么情况会略微复杂；注意到如果有偶数个 $g()$ 为奇数的黑色节点向 $i+1$ 连边，则奇偶性一定改变；如果有奇数个 $g()$ 为奇数的黑色节点向 $i+1$ 连边，则奇偶性不会改变。假设 $g()$ 为奇数的黑色节点共有 $t$ 个。那么转移方程如下： f[i+1][k\\oplus1][x][1]=f[i+1][k\\oplus1][x][1]+({t\\choose0}+{t\\choose2}+..+{t\\choose 2m})\\times 2^{i-t}\\times f[i][k][x][y] f[i+1][k][x][y]=f[i+1][k][x][y]+({t\\choose1}+{t\\choose3}+..+{t\\choose 2m+1})\\times 2^{i-t}\\times f[i][k][x][y]可以证明： {t\\choose0}+{t\\choose2}+..+{t\\choose 2m}={t\\choose1}+{t\\choose3}+..+{t\\choose 2m+1}=2^{t-1}因此转移方程可以简化为： f[i+1][k\\oplus1][x][1]=f[i+1][k\\oplus1][x][1]+2^{i-1}\\times f[i][k][x][y] f[i+1][k][x][y]=f[i+1][k][x][y]+2^{i-1}\\times f[i][k][x][y]当第 $i+1$ 个节点为黑色时，情况类似。 代码实现非常简单，不再赘述。 Code12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 200005;const int MOD = 998244353;int n, p;int f[MAXN][2][2][2];int c[MAXN];int pow2[MAXN];int main() { scanf(\"%d%d\", &amp;n, &amp;p); for (int i = 1; i &lt;= n; ++i) scanf(\"%d\", &amp;c[i]); pow2[0] = 1; for (int i = 1; i &lt;= n; ++i) { pow2[i] = pow2[i - 1] &lt;&lt; 1; if (pow2[i] &gt; MOD) pow2[i] -= MOD; } f[0][0][0][0] = 1; for (int i = 0; i &lt; n; ++i) for (int k = 0; k &lt;= 1; ++k) for (int x = 0; x &lt;= 1; ++x) for (int y = 0; y &lt;= 1; ++y) { int cur = f[i][k][x][y]; if (c[i + 1] == -1 || c[i + 1] == 0) { if (x == 0) f[i + 1][k ^ 1][x][1] = (f[i + 1][k ^ 1][x][1] + 1ll * pow2[i] * cur) % MOD; else f[i + 1][k ^ 1][x][1] = (f[i + 1][k ^ 1][x][1] + 1ll * pow2[i - 1] * cur) % MOD, f[i + 1][k][x][y] = (f[i + 1][k][x][y] + 1ll * pow2[i - 1] * cur) % MOD; } if (c[i + 1] == -1 || c[i + 1] == 1) { if (y == 0) f[i + 1][k ^ 1][1][y] = (f[i + 1][k ^ 1][1][y] + 1ll * pow2[i] * cur) % MOD; else f[i + 1][k ^ 1][1][y] = (f[i + 1][k ^ 1][1][y] + 1ll * pow2[i - 1] * cur) % MOD, f[i + 1][k][x][y] = (f[i + 1][k][x][y] + 1ll * pow2[i - 1] * cur) % MOD; } } printf(\"%d\", (f[n][p][0][0] + f[n][p][0][1] + f[n][p][1][0] + f[n][p][1][1]) % MOD); return 0;}","link":"/2019/10/30/solution-loj-6497/"},{"title":"「雅礼集训 2018 Day4」Magic","text":"#6503. 「雅礼集训 2018 Day4」Magic Summarize题目概括征集中~ Solution由于题意中本质不同的方案不是特别好处理，我们可以在每张卡片上标号，将计算出的答案乘上 $\\prod_{i=1}^m\\frac{1}{a_i!}$ 即可。 考虑容斥。记 $f[i]$ 为至少有 $i$ 个魔法对的方案数，则答案为 $\\sum_{i=k}^n(-1)^{i-k}\\times{i\\choose k}\\times f[i]$。 注意：「TJOI2019」唱、跳、rap 和篮球 即为本题 $k=0$ 的特例。 考虑如何计算 $f[i]$。设第一种颜色至少有 $i_1$ 个魔法对，第二种颜色至少有 $i_2$ 个魔法对……以此类推。考虑以下构造序列的方法：第 $j$ 种颜色保留 $i_j$ 张卡片作为预留卡片，将剩余的卡片任意排列，然后依次将所有预留的卡片插入到原序列中与之颜色相同的卡片的后面。不难发现，按照该方法构造序列的方案数为 $(n-k)!\\times\\prod_{j=1}^m{a_j\\choose i_j}\\times \\frac{(a_j-1)!}{(a_j-i_j-1)!}$，并且该序列中至少有 $\\sum_{j=1}^mi_j$ 个魔法对。 因此，得到 $f[i]$ 的计算方法： f[i]=\\sum_{i_1=0}^{a_1-1}\\sum_{i_2=0}^{a_2-1}...\\sum_{i_m=0}^{a_m-1}\\[i_1+i_2+...+i_m=i](n-i)!\\times\\prod_{j=1}^m{a_j\\choose i_j}\\times \\frac{(a_j-1)!}{(a_j-i_j-1)!}注意到这是一个 $m$ 维卷积的形式，但是如果用暴力生成函数 + NTT 计算，复杂度为 $O(mn\\log n)$，不能通过本题。我们可以用类似启发式合并的策略，交换多项式乘法运算顺序，每次将两个阶数最小的多项式相乘，即可将复杂度控制在 $O(m\\log^2 n)$。 Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int MAXN = 100005, MAXM = 20005;const ll MOD = 998244353, G = 3;inline ll qpow(ll a, ll k) { ll ret = 1; while (k) { if (k &amp; 1) ret = ret * a % MOD; a = a * a % MOD; k &gt;&gt;= 1; } return ret;}namespace FFT { int n, r[MAXN &lt;&lt; 1]; void NTT(ll *a, int op) { int k = 0; for (; (1 &lt;&lt; k) &lt; n; ++k); for (int i = 0; i &lt; n; ++i) { r[i] = r[i &gt;&gt; 1] &gt;&gt; 1 | (i &amp; 1) &lt;&lt; (k - 1); if (i &lt; r[i]) swap(a[i], a[r[i]]); } for (int l = 2; l &lt;= n; l &lt;&lt;= 1) { int m = l &gt;&gt; 1; ll w = qpow(G, (MOD - 1) / l); if (op == -1) w = qpow(w, MOD - 2); for (int i = 0; i &lt; n; i += l) { ll wk = 1; for (int j = 0; j &lt; m; ++j, wk = wk * w % MOD) { ll p = a[i + j], q = wk * a[i + j + m] % MOD; a[i + j] = (p + q) % MOD; a[i + j + m] = (p - q + MOD) % MOD; } } } } void DFT(ll *a) { NTT(a, 1); } void IDFT(ll *a) { NTT(a, -1); ll inv = qpow(n, MOD - 2); for (int i = 0; i &lt; n; ++i) a[i] = a[i] * inv % MOD; }}int m, n, k;int a[MAXM];vector&lt;ll&gt; b[MAXM &lt;&lt; 1];priority_queue&lt;pair&lt;int, int&gt; &gt; q;ll x[MAXN &lt;&lt; 1], y[MAXN &lt;&lt; 1], ans;ll fac[MAXN], inv[MAXN], facinv[MAXN];inline ll C(int n, int k) { return fac[n] * facinv[k] % MOD * facinv[n - k] % MOD;}int main() { scanf(\"%d%d%d\", &amp;m, &amp;n, &amp;k); fac[0] = facinv[0] = 1; fac[1] = inv[1] = facinv[1] = 1; for (int i = 2; i &lt;= n; ++i) { fac[i] = fac[i - 1] * i % MOD; inv[i] = (MOD - MOD / i) * inv[MOD % i] % MOD; facinv[i] = facinv[i - 1] * inv[i] % MOD; } for (int i = 1; i &lt;= m; ++i) { scanf(\"%d\", &amp;a[i]); for (int j = 0; j &lt; a[i]; ++j) b[i].push_back(C(a[i], j) * fac[a[i] - 1] % MOD * facinv[a[i] - j - 1] % MOD); q.push(make_pair(-b[i].size(), i)); } int cnt = m; while (q.size() &gt; 1) { int id1 = q.top().second, sz1 = -q.top().first; q.pop(); int id2 = q.top().second, sz2 = -q.top().first; q.pop(); FFT::n = 1; while (FFT::n &lt;= sz1 + sz2) FFT::n &lt;&lt;= 1; for (int i = 0; i &lt;= FFT::n; ++i) x[i] = y[i] = 0; for (int i = 0; i &lt; sz1; ++i) x[i] = b[id1][i]; for (int i = 0; i &lt; sz2; ++i) y[i] = b[id2][i]; FFT::DFT(x), FFT::DFT(y); for (int i = 0; i &lt;= FFT::n; ++i) x[i] = x[i] * y[i] % MOD; FFT::IDFT(x); cnt++; for (int i = 0; i &lt;= sz1 + sz2 - 2; ++i) b[cnt].push_back(x[i]); q.push(make_pair(-b[cnt].size(), cnt)); } int id = q.top().second, sz = -q.top().first; for (int i = k; i &lt; sz; ++i) { ll tmp = C(i, k) * fac[n - i] % MOD * b[id][i] % MOD; if ((i - k) &amp; 1) ans = (ans - tmp + MOD) % MOD; else ans = (ans + tmp) % MOD; } for (int i = 1; i &lt;= m; ++i) ans = ans * qpow(fac[a[i]], MOD - 2) % MOD; printf(\"%lld\", ans); return 0;}","link":"/2019/11/23/solution-loj-6503/"},{"title":"题解-LibreOJ-6498「雅礼集训 2018 Day2」农民","text":"题目链接(LibreOJ) 题目概括征集中~ @oy么么哒 神仙码量题。 观察题意，进行问题转化。对于树上每一条边，可以通过它的肥料权值必定是一段区间：若这条边连接父节点与左儿子，则对应区间为 $(-\\infty,a[\\text{fa}])$；反之，则为 $(a[\\text{fa}], \\infty)$。 因此，我们需要维护一棵线段树，每个节点存储状态值 0/1 以及权值 val 。需要支持以下操作： 单点权值修改 区间状态值翻转 区间查询状态为 0/1 的最值 具体地，在线段树的每个节点上维护 max0, min0, max1, min1 。区间状态值翻转则只需交换 max0, max1 和 min0, min1。区间查询与单点修改不再赘述。 对二叉树进行树链剖分，每次查询只需查找该节点到根节点的限制范围；若该节点权值在范围之内，则可以吸收到肥料，反之不能。 注意：线段树的 max、min需要赋极值作为初值；交换时需理清变量所代表的意义代码实现细节极多，尤其是线段树异常毒瘤。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174#include&lt;bits/stdc++.h&gt;using namespace std;#define lson(u) node[u].l#define rson(u) node[u].r#define val(u) node[u].val#define tag(u) node[u].tagconst int maxn = 100005;const int inf = 0x3f3f3f3f;struct Node { int l, r, val[2][2]; int tag;}node[maxn * 3];int cnt = 0, R;pair&lt;int, int&gt; t[maxn];inline void pushdown(int u) { if (tag(u)) { swap(val(lson(u))[0][0], val(lson(u))[1][0]); swap(val(lson(u))[0][1], val(lson(u))[1][1]); swap(val(rson(u))[0][0], val(rson(u))[1][0]); swap(val(rson(u))[0][1], val(rson(u))[1][1]); tag(lson(u)) ^= 1, tag(rson(u)) ^= 1; tag(u) = 0; }}inline void pushup(int u) { val(u)[0][0] = min(val(lson(u))[0][0], val(rson(u))[0][0]); val(u)[0][1] = max(val(lson(u))[0][1], val(rson(u))[0][1]); val(u)[1][0] = min(val(lson(u))[1][0], val(rson(u))[1][0]); val(u)[1][1] = max(val(lson(u))[1][1], val(rson(u))[1][1]);}void build(int&amp; u, int l, int r) { u = ++cnt; val(u)[0][0] = val(u)[1][0] = inf; val(u)[0][1] = val(u)[1][1] = -inf; if (l == r) { int d = t[l].first, w = t[l].second; val(u)[d][0] = val(u)[d][1] = w; return; } int mid = (l + r) &gt;&gt; 1; build(lson(u), l, mid); build(rson(u), mid + 1, r); pushup(u);}void modify_range_reverse(int u, int l, int r, int ql, int qr) { if (ql &lt;= l &amp;&amp; r &lt;= qr) { swap(val(u)[0][0], val(u)[1][0]); swap(val(u)[0][1], val(u)[1][1]); tag(u) ^= 1; return; } pushdown(u); int mid = (l + r) &gt;&gt; 1; if (ql &lt;= mid) modify_range_reverse(lson(u), l, mid, ql, qr); if (mid &lt; qr) modify_range_reverse(rson(u), mid + 1, r, ql, qr); pushup(u);}void modify_point(int u, int l, int r, int p, int val) { if (l == r) { if (val(u)[0][0] != inf) val(u)[0][0] = val(u)[0][1] = val; else val(u)[1][0] = val(u)[1][1] = val; return; } pushdown(u); int mid = (l + r) &gt;&gt; 1; if (p &lt;= mid) modify_point(lson(u), l, mid, p, val); else modify_point(rson(u), mid + 1, r, p, val); pushup(u);}pair&lt;int, int&gt; query_range(int u, int l, int r, int ql, int qr) { // first: 1:max // second: 0:min if (ql &lt;= l &amp;&amp; r &lt;= qr) return make_pair(val(u)[1][1], val(u)[0][0]); pushdown(u); int mid = (l + r) &gt;&gt; 1; int first = -inf, second = inf; if (ql &lt;= mid) { pair&lt;int, int&gt; t = query_range(lson(u), l, mid, ql, qr); first = max(first, t.first); second = min(second, t.second); } if (mid &lt; qr) { pair&lt;int, int&gt; t = query_range(rson(u), mid + 1, r, ql, qr); first = max(first, t.first); second = min(second, t.second); } return make_pair(first, second);}int N, M;vector&lt;int&gt; G[maxn];int fa[maxn];int dir[maxn], w[maxn];int dep[maxn], size[maxn], son[maxn];int top[maxn], dfn[maxn], dfn_idx;void dfs1(int u) { dep[u] = dep[fa[u]] + 1; size[u] = 1; for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; dfs1(v); size[u] += size[v]; if (size[v] &gt; size[son[u]]) son[u] = v; }}void dfs2(int u, int topc) { dfn[u] = ++dfn_idx; t[dfn[u]] = make_pair(dir[u], w[fa[u]]); top[u] = topc; if (son[u]) dfs2(son[u], topc); for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; if (v == son[u]) continue; dfs2(v, v); }}int main() { scanf(\"%d%d\", &amp;N, &amp;M); for (int i = 1; i &lt;= N; ++i) { int x, y; scanf(\"%d%d%d\", &amp;w[i], &amp;x, &amp;y); dir[x] = 0, dir[y] = 1; fa[x] = fa[y] = i; if (x) G[i].push_back(x); if (y) G[i].push_back(y); } dfs1(1); dfs2(1, 1); build(R, 1, N); while (M--) { int op, x, y; scanf(\"%d%d\", &amp;op, &amp;x); if (op == 1) { scanf(\"%d\", &amp;y); for (vector&lt;int&gt;::iterator it = G[x].begin(); it != G[x].end(); it++) { int v = *it; modify_point(R, 1, N, dfn[v], y); } w[x] = y; } else if (op == 2) { modify_range_reverse(R, 1, N, dfn[x], dfn[x] + size[x] - 1); modify_range_reverse(R, 1, N, dfn[x], dfn[x]); } else { int val = w[x]; int first = -inf, second = inf; while (top[x] != 1) { pair&lt;int, int&gt; t = query_range(R, 1, N, dfn[top[x]], dfn[x]); first = max(first, t.first); second = min(second, t.second); x = fa[top[x]]; } if (x != 1) { pair&lt;int, int&gt; t = query_range(R, 1, N, 2, dfn[x]); first = max(first, t.first); second = min(second, t.second); } if (val &gt; first &amp;&amp; val &lt; second) puts(\"YES\"); else puts(\"NO\"); } } return 0;}","link":"/2019/10/16/solution-loj-6498/"},{"title":"题解-LibreOJ-6513「雅礼集训 2018 Day10」足球大战","text":"题目链接(LibreOJ) 足球比赛共 $n$ 秒中，主队每秒进球概率为 $p$，客队每秒进球概率为 $q$，求主队获胜概率。 $n \\le 10000000$ 记 $f(i,j)$ 表示 $n$ 秒种后，主队进 $i$ 个球，客队进 $j$ 个球的概率。则有： f(i,j)={n \\choose i}\\times p^i\\times (1-p)^{n-i} \\times {n\\choose j}\\times q^j \\times (1-q)^{n-j}要使得 $i&gt;j$ ，即求： \\sum_{i=1}^n\\sum_{j=0}^{i-1}{n\\choose i}\\times p^i\\times (1-p)^{n-i}\\times {n\\choose j}\\times q^j \\times (1-q)^{n-j}化简，得： \\sum_{i=1}^n {n\\choose i}\\times p^i\\times (1-p)^{n-i}\\times(\\sum_{j=0}^{i-1}{n\\choose j}\\times q^j \\times (1-q)^{n-j})$O(n)$ 预处理逆元与 $p$、$q$ 的 $n$ 次方即可。组合数可以递推计算以卡常。 注意实现细节，本题还是挺水的。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 10000005;const int mod = 1e9 + 7;inline int qpow(int a, int b) { int ret = 1; while (b) { if (b &amp; 1) ret = 1ll * ret * a % mod; a = 1ll * a * a % mod; b &gt;&gt;= 1; } return ret;}int inv[maxn];int n, ans;int p, q, p2, q2;int invp2, invq2;int pa, pb, qa, qb;int powp, powq;int powp2, powq2;int sq;int C;int main() { scanf(\"%d\", &amp;n); scanf(\"%d%d\", &amp;pa, &amp;pb); p = 1ll * pa * qpow(pb, mod - 2) % mod; p2 = (1 - p + mod) % mod; scanf(\"%d%d\", &amp;qa, &amp;qb); q = 1ll * qa * qpow(qb, mod - 2) % mod; q2 = (1 - q + mod) % mod; if (p == 1) return printf(\"%d\", (1 - qpow(q, n) + mod) % mod), 0; inv[1] = 1; for (int i = 2; i &lt;= n; ++i) { inv[i] = 1ll * (mod - mod / i) * inv[mod % i] % mod; } C = 1; powp = 1, powq = 1; powp2 = qpow(p2, n), powq2 = qpow(q2, n); invp2 = qpow(p2, mod - 2), invq2 = qpow(q2, mod - 2); int tp = 1ll * powp * powp2 % mod, tq = 1ll * powq * powq2 % mod; int mp = 1ll * p * invp2 % mod, mq = 1ll * q * invq2 % mod; sq = powq2; for (int i = 1; i &lt;= n; ++i) { C = 1ll * C * (n - i + 1) % mod * inv[i] % mod; tp = 1ll * tp * mp % mod; tq = 1ll * tq * mq % mod; ans = (ans + 1ll * tp % mod * sq % mod * C) % mod; sq = (sq + 1ll * tq % mod * C) % mod; } printf(\"%d\", ans); return 0;}","link":"/2019/10/19/solution-loj-6513/"},{"title":"题解-LibreOJ-6514「雅礼集训 2018 Day10」文明","text":"题目链接 题目概括大力征集中~ 首先感谢 这篇文章 让我学会了换根树链剖分的相关操作。 首先考虑查询次数为 1 的解法。将黈力所在的国家作为根节点，求出其他所有国家与根节点的中点。不难发现，求出的中点及其子树会被其他国家所占领。求出所有中点后，从根节点开始 dfs 整棵树，注意不能访问被标记出的中点。被访问到的节点总数即为所求。 考虑优化。用 “ dfs 序 + 线段树” 维护一个支持子树修改、子树查询的树形数据结构。每求出一个中点，就将中点及其子树的权值改为 1 。所有操作结束后，节点总数 $N$ 减去所有节点的权值总和即为所求。 对于查询次数不为 1 的数据，可以在上述数据结构中加上“换根”操作。具体实现可以参考 这篇文章 及我的代码。 略有点毒瘤。代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136#include &lt;bits/stdc++.h&gt;using namespace std;#define lson(u) node[u].l#define rson(u) node[u].r#define sum(u) node[u].sum#define tag(u) node[u].tagconst int maxn = 500005;struct Node { int sum, l, r, tag;}node[maxn * 3];int R, cnt;void build(int&amp; u, int l, int r) { u = ++cnt; tag(u) = -1; if (l == r) return; int mid = (l + r) &gt;&gt; 1; build(lson(u), l, mid); build(rson(u), mid + 1, r);}inline void pushdown(int u, int l, int r) { int mid = (l + r) &gt;&gt; 1; int llen = mid - l + 1, rlen = r - mid; if (tag(u) != -1) { sum(lson(u)) = llen * tag(u); sum(rson(u)) = rlen * tag(u); tag(lson(u)) = tag(u); tag(rson(u)) = tag(u); tag(u) = -1; }}void modify(int u, int l, int r, int ql, int qr, int val) { if (ql &lt;= l &amp;&amp; r &lt;= qr) { sum(u) = (r - l + 1) * val; tag(u) = val; return; } pushdown(u, l, r); int mid = (l + r) &gt;&gt; 1; if (ql &lt;= mid) modify(lson(u), l, mid, ql, qr, val); if (mid &lt; qr) modify(rson(u), mid + 1, r, ql, qr, val); sum(u) = sum(lson(u)) + sum(rson(u));}int query(int u, int l, int r, int ql, int qr) { if (ql &lt;= l &amp;&amp; r &lt;= qr) return sum(u); pushdown(u, l, r); int mid = (l + r) &gt;&gt; 1, ret = 0; if (ql &lt;= mid) ret += query(lson(u), l, mid, ql, qr); if (mid &lt; qr) ret += query(rson(u), mid + 1, r, ql, qr); return ret;}int N, Q, K, root;vector&lt;int&gt; G[maxn];int f[maxn][20], dep[maxn];int dfn[maxn], dfn_idx, size[maxn];int p[maxn];void dfs(int u, int fa) { size[u] = 1; dfn[u] = ++dfn_idx; dep[u] = dep[fa] + 1; f[u][0] = fa; for (int i = 1; i &lt;= 19; ++i) f[u][i] = f[f[u][i - 1]][i - 1]; for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; if (v == fa) continue; dfs(v, u); size[u] += size[v]; }}inline int Lca(int u, int v) { if (dep[u] &lt; dep[v]) swap(u, v); for (int i = 19; ~i; --i) if (dep[f[u][i]] &gt;= dep[v]) u = f[u][i]; if (u == v) return u; for (int i = 19; ~i; --i) if (f[u][i] != f[v][i]) u = f[u][i], v = f[v][i]; return f[u][0];}inline int Jump(int u, int d) { for (int i = 19; ~i; --i) if (d - (1 &lt;&lt; i) &gt;= 0) u = f[u][i], d -= (1 &lt;&lt; i); return u;}int main() { scanf(\"%d%d\", &amp;N, &amp;Q); for (register int i = 1; i &lt; N; ++i) { int u, v; scanf(\"%d%d\", &amp;u, &amp;v); G[u].push_back(v); G[v].push_back(u); } dfs(1, 0); build(R, 1, N); while (Q--) { scanf(\"%d\", &amp;K); for (register int i = 1; i &lt;= K; ++i) scanf(\"%d\", &amp;p[i]); root = p[1]; for (register int i = 2; i &lt;= K; ++i) { int t = p[i]; int lca = Lca(root, t); int dis = dep[t] + dep[root] - 2 * dep[lca]; if (dis &amp; 1) dis = (dis &gt;&gt; 1); else dis = (dis &gt;&gt; 1) - 1; int dis_root = dep[root] - dep[lca]; int dis_t = dep[t] - dep[lca]; int u = 0; // Get Middle Point if (dis &lt;= dis_t) { u = Jump(t, dis); } else u = Jump(root, dis_root + dis_t - dis); if (Lca(root, u) != u) // Situation II modify(R, 1, N, dfn[u], dfn[u] + size[u] - 1, 1); else { // Situation III int v = Jump(root, dep[root] - dep[u] - 1); // * Find the nearest node * if (dfn[v] - 1 &gt;= 1) modify(R, 1, N, 1, dfn[v] - 1, 1); if (dfn[v] + size[v] &lt;= N) modify(R, 1, N, dfn[v] + size[v], N, 1); } } printf(\"%d\\n\", N - query(R, 1, N, 1, N)); modify(R, 1, N, 1, N, 0); } return 0;}","link":"/2019/10/11/solution-loj-6514/"},{"title":"题解-LibreOJ-6515「雅礼集训 2018 Day10」贪玩蓝月","text":"题目链接(LibreOJ) 题目概括大力征集中~ 提示：动态背包 一道神仙题。 Solution 1: 在线类似动态 dp，本题要求对双端队列操作的同时进行若干次 01 背包处理。 考虑到双端队列的性质，我们可以维护两个栈，用来模拟双端队列。需要注意的是，如果在一个栈执行多次删除操作后该栈为空，则需将另一个栈中所有元素取出进行暴力重构。通过均摊复杂度分析可得复杂度仍为线性。 均摊复杂度证明？ 记录动态规划数组 $f1[i][j]$ 和 $f2[i][j]$ ，分别表示取第 1/2 个栈中的前 $i$ 件物品得到的最有价值。该数组在栈中插入元素时需要暴力计算。 考虑如何统计答案。假设在左右栈中取出特征值总和分别为 $x,y$，则 $(x+y)\\mod p\\in [l,r]$。不难发现，在确定 $x,y$ 中的一个之后，另一个所在的范围即为一个区间。将对应的 $f$ 数组做一次单调队列统计答案即可。 注意：暴力重构栈时，若需要重构的栈长度为 1 ，则必须将该元素移动至另一个栈；否则会导致删除元素时出现问题 代码异常毒瘤，尤其是单调队列部分，强烈建议手推一遍。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 50005;const ll inf = 1ll * 50005 * 1000000000;int TestCase;int M;ll P;pair&lt;int, ll&gt; s1[maxn], s2[maxn];pair&lt;int, ll&gt; t[maxn];ll f1[maxn][505], f2[maxn][505];int len1, len2;ll q[maxn], l, r;inline void Add1(pair&lt;int, ll&gt; t) { s1[++len1] = t; int w = t.first; ll v = t.second; for (int i = 0; i &lt; P; ++i) { f1[len1][i] = max(f1[len1 - 1][i], f1[len1 - 1][(i - w + P) % P] + v); }}inline void Add2(pair&lt;int, ll&gt; t) { s2[++len2] = t; int w = t.first; ll v = t.second; for (int i = 0; i &lt; P; ++i) { f2[len2][i] = max(f2[len2 - 1][i], f2[len2 - 1][(i - w + P) % P] + v); }}inline void Rebuild1() { int cnt = 0; for (int i = 1; i &lt;= len1; ++i) t[++cnt] = s1[i]; int mid = cnt &gt;&gt; 1; mid++; for (int i = mid; i &gt;= 1; --i) Add2(t[i]); len1 = 0; for (int i = mid + 1; i &lt;= cnt; ++i) Add1(t[i]);}inline void Rebuild2() { int cnt = 0; for (int i = 1; i &lt;= len2; ++i) t[++cnt] = s2[i]; int mid = cnt &gt;&gt; 1; mid++; for (int i = mid; i &gt;= 1; --i) Add1(t[i]); len2 = 0; for (int i = mid + 1; i &lt;= cnt; ++i) Add2(t[i]);}inline void Solve(int ql, int qr) { ll *x = f1[len1], *y = f2[len2]; ll ans = -1; l = 0, r = 0, q[0] = 0; for (int i = P - qr + ql; i &lt; P; ++i) { while (l &lt; r &amp;&amp; x[(q[r - 1] + P) % P] &lt;= x[i]) r--; q[r++] = i - P; } for (int i = 0; i &lt; P; ++i) { while (l &lt; r &amp;&amp; q[l] &lt; i - qr + ql) l++; while (l &lt; r &amp;&amp; x[(q[r - 1] + P) % P] &lt;= x[i]) r--; q[r++] = i; ans = max(ans, x[(q[l] + P) % P] + y[(qr - i + P) % P]); } printf(\"%lld\\n\", ans);}int main() { scanf(\"%d\", &amp;TestCase); scanf(\"%d%lld\", &amp;M, &amp;P); for (int i = 1; i &lt; P; ++i) f1[0][i] = f2[0][i] = -inf; while (M--) { string op; cin &gt;&gt; op; if (op == \"IF\") { int w; ll v; scanf(\"%d%lld\", &amp;w, &amp;v), w %= P; Add1(make_pair(w, v)); } else if (op == \"IG\") { int w; ll v; scanf(\"%d%lld\", &amp;w, &amp;v), w %= P; Add2(make_pair(w, v)); } else if (op == \"DF\") { if (len1 == 0) Rebuild2(); len1--; } else if (op == \"DG\") { if (len2 == 0) Rebuild1(); len2--; } else if (op == \"QU\") { int l, r; scanf(\"%d%d\", &amp;l, &amp;r); Solve(l, r); } } return 0;} #### Solution 2: 离线 离线解法","link":"/2019/10/14/solution-loj-6515/"},{"title":"题解-luogu-cf1195c Basketball Exercise","text":"题目链接 给定一个$2*n$的矩阵，从中选出若干数，且任意两个数不上下或左右相邻，求这些数的最大总和 $1\\le n \\le 100000,1 \\le h_{i,j}\\le 1000000000$ 很水的一道C题……目测难度在黄~绿左右。请各位切题者合理评分。 注意到可以选择的球员编号是严格递增的，因此可以把状态的第一维定义为球员编号，第二维描述编号同为 $i$ 的两名球员的选取情况。 定义状态：$f[i][0/1/2]$ 表示选取了编号在 $i$ 及以前的球员，所能得到的身高总和最大值。其中，第二维的 $0$ 表示编号为 $i$ 的球员一个都不选；$1$ 表示只选上面一个；$i$ 表示只选下面一个。（显然没有上下都选的情况） 状态转移方程： f[i][0]=max\\lbrace f[i-1][0],f[i-1][1],f[i-1][2]\\rbrace f[i][1]=max\\lbrace f[i-1][0],f[i-1][2]\\rbrace+height[i][1] f[i][2]=max\\lbrace f[i-1][0],f[i-1][1]\\rbrace+height[i][2]Update: 用贪心可以证明，在最优解中，不会出现连续两列一个不取的情况。因此， $f[i][0]$ 其实没有必要考虑来自 $f[i-1][0]$ 的状态转移。 代码如下：123456789101112131415161718192021#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int N;ll h[100005][3];ll f[100005][3];int main() { cin &gt;&gt; N; for (register int i = 1; i &lt;= N; ++i) cin &gt;&gt; h[i][1]; for (register int i = 1; i &lt;= N; ++i) cin &gt;&gt; h[i][2]; f[1][0] = 0; f[1][1] = h[1][1]; f[1][2] = h[1][2]; for (register int i = 2; i &lt;= N; ++i) { f[i][0] = max(f[i - 1][0], max(f[i - 1][1], f[i - 1][2])); f[i][1] = max(f[i - 1][0], f[i - 1][2]) + h[i][1]; f[i][2] = max(f[i - 1][0], f[i - 1][1]) + h[i][2]; } cout &lt;&lt; max(f[N][0], max(f[N][1], f[N][2])); return 0;}","link":"/2019/07/18/solution-luogu-cf1195c/"},{"title":"题解-luogu-p1022计算器的改良","text":"题目链接 本题是一道非常漂亮的模拟。只要能理清思路，代码并不会特别复杂。 首先分析题目。解一元一次方程最简单的方法就是移项，把常数移到等号右侧，把一次项系数移到等号左侧，用常数除以系数即为答案。那么在读入字符串的过程中，便可以进行操作。 对于字符串中的数据，我们可以用类似快读的方法读入。然而，要判断这些数据从哪里来，到哪里去，便是本题的关键所在。 对于每个数据，要想清楚地辨别它的身份，我们只需解决三个问题： 1.该数据是正数还是负数？ 3.该数据在等号左侧还是在等号右侧？ 2.该数据是常数还是系数？ 第一个问题看似十分无脑，用一个变量f1来存储符号即可（将f1赋值为1或-1，在读入数据结束时将得到的数据乘以f1）。但需特别注意，在一个表达式的开头（等号左侧和等号右侧的表达式）不会有‘+’、‘-’符号，所以在程序的开头和读入‘=’号是，要将f1赋值为1。 第二个问题也非常简单，可以用变量f2来存储。因为这个问题与移项运算的符号有关，因此也可以将f2赋值为1或-1，并约定在等号左侧时f2为1，在等号右侧时f2为-1。（当然你也可以反着约定） 第三个问题同样不难解决。在读入数据结束后（即读入了一个符号），判断这个符号是运算符还是字母即可。如果是字母，则将得到的数据移到等号右侧，否则将数据移到等号左侧。但是还有一个注意点：如果一个未知数的系数为1，我们会将系数省略。因此在读入数据为0时，我们要将其更改为1。 经过分析，你会发现本题一点也不难实现。其关键在于对数据状态的准确描述。用清晰、简洁的变量描述状态，根据不同的状态采取不同的措施，这便是编程学习的一大基本素养。 代码如下： 1234567891011121314151617181920212223242526272829303132333435#include&lt;bits/stdc++.h&gt;using namespace std;int l,r;//l代表系数，r代表常数 char x; //用x存储字母 void solve(){ char c; int f1=1,f2=1,tmp=0; while(~scanf(\"%c\",&amp;c)) { if(c&gt;='0'&amp;&amp;c&lt;='9')//类似快读的读入方式 { tmp*=10; tmp+=c-'0'; } else { if(c&gt;='a'&amp;&amp;c&lt;='z') l+=(tmp==0)?f2*f1:tmp*f2*f1,x=c;//判断系数是否为1 else r+=tmp*(-f2)*f1; tmp=0; } if(c=='+') {f1=1;continue;} if(c=='-') {f1=-1;continue;} if(c=='=') {f2=-1;f1=1;continue;} }}int main(){ solve(); printf(\"%c=%0.3f\",x,(float)r/l==0?abs((float)r/l):(float)r/l); return 0;}","link":"/2018/12/19/solution-luogu-p1022/"},{"title":"题解-luogu-p1080国王游戏","text":"题目链接 高精度怎能少了Python3题解。。。 贪心策略一楼dalao已经讲得很清楚了，上一发超短代码（学Python就是为了水高精） 123456789101112131415N=int(input())s=input().split()S=int(s[0])T=int(s[1])a=[]for i in range(1,N+1): k=input().split() a.append((int(k[0]),int(k[1])))a.sort(key=lambda x:x[0]*x[1])ans=0for i in range(0,N): if(S//(a[i])[1]&gt;ans): ans=S//(a[i])[1] S*=(a[i])[0]print(ans)","link":"/2019/01/26/solution-luogu-p1080/"},{"title":"题解-luogu-p1204挤牛奶","text":"题目链接 介绍一种本题的贪心解法。 本题要求读入一些挤牛奶的时间段，求最长至少有一人在挤牛奶的时间段和最长没有人在挤牛奶的时间段。把读入的区间视作线段，则题意转变为求至少有一条线段覆盖的最大区间和没有线段覆盖的区间。 假设读入数据如下： 首先按照4条线段的起点位置排序（具体原因后面解释）。将begin设置为第一条线段的起点，将end设置为第一条线段的终点。 然后从第二条线段开始判断。如果该线段的起点小于end，则说明这两条线段有重合部分，将end更新为max{end,该线段的终点位置}。如果该线段的起点大于end，则说明该线段及以后的线段再也不会与前面的线段产生任何重合部分（这也就是排序的作用），那么可以更新ans1和ans2的值：ans1更新为max{ans1,end-begin},ans2更新为max{ans2,该线段的起点位置-end}。具体参见图中第4条线段，ans1被更新为1200-0，ans2被更新为1400-1200。 程序已经基本成型，但要注意在输出答案前更新一遍ans1的值，这是为了避免所有线段均有重合部分而无法判断的情况。另外，ans1和ans2要初始化为0。 程序如下： 1234567891011121314151617181920212223242526272829303132333435#include&lt;bits/stdc++.h&gt;using namespace std;int N; struct node{ int begin,end;}m[5005];bool cmp(node a,node b){ return a.begin&lt;b.begin;}int main(){ scanf(\"%d\",&amp;N); for(register int i=1;i&lt;=N;++i) scanf(\"%d%d\",&amp;m[i].begin,&amp;m[i].end); sort(m+1,m+1+N,cmp); int begin=m[1].begin; int end=m[1].end; int ans1=0,ans2=0; for(register int i=2;i&lt;=N;++i){ if(m[i].begin&lt;=end) end=max(end,m[i].end); else{ ans1=max(ans1,end-begin); ans2=max(ans2,m[i].begin-end); begin=m[i].begin; end=m[i].end; } } ans1=max(ans1,end-begin); printf(\"%d %d\",ans1,ans2); return 0;}","link":"/2018/12/15/solution-luogu-p1204/"},{"title":"题解-luogu-p1273有线电视网","text":"题目链接 背包类树形dp。本题需要运用分组背包模型。 首先定义状态：$f[u][i]$表示以$u$为根的子树上，选择$i$个用户时的最大利润。由于电视公司可能亏本，因此$f$数组应赋极小初值。 可以将选择的用户个数看作背包的容量维度，将获得的利润看作背包的价值维度。可以设计出如下的状态转移： f[u][i]=\\max_{v\\in son(u)}\\{f[u][i-j]+f[v][j]-w\\}其中，$v$为$u$的子节点，$w$为这条边的权值。在$u$每个子节点上有许多“物品”，“物品”总数即为以$v$为根的子树上用户的个数；每个“物品”所具有的价值即为其最大利润，即$f[v][j]$。同时不应忽略边权对利润带来的影响。 注意细节处理及边界。代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;using namespace std;struct Edge{ int v,w,nxt;}mem[3005*2];int head[3005],cnt;int size[3005];inline void AddEdge(int u,int v,int w){ mem[++cnt].v=v; mem[cnt].w=w; mem[cnt].nxt=head[u]; head[u]=cnt;}int N,M;int leaf[3005];int f[3005][3005];inline void dfs(int u){ if(leaf[u]){ f[u][1]=leaf[u]; size[u]=1; return; } for(register int i=head[u];i;i=mem[i].nxt){ int v=mem[i].v,w=mem[i].w; dfs(v); size[u]+=size[v]; for(register int j=M;j&gt;=1;--j) for(register int k=0;k&lt;=min(size[v],j);++k) f[u][j]=max(f[u][j],f[u][j-k]+f[v][k]-w); }}int main(){ memset(f,0xcf,sizeof(f)); scanf(\"%d%d\",&amp;N,&amp;M); for(register int i=1;i&lt;=N-M;++i){ int k; scanf(\"%d\",&amp;k); for(register int j=1;j&lt;=k;++j){ int a,c; scanf(\"%d%d\",&amp;a,&amp;c); AddEdge(i,a,c); } } for(register int i=1;i&lt;=M;++i) scanf(\"%d\",&amp;leaf[N-M+i]); for(register int i=1;i&lt;=N;++i) f[i][0]=0; dfs(1); for(register int i=M;i&gt;=1;--i){ if(f[1][i]&gt;=0){ printf(\"%d\",i); return 0; } } return 0;}","link":"/2019/04/25/solution-luogu-p1273/"},{"title":"题解-luogu-p1311选择客栈","text":"题目链接 现在我随机@一个人 这个人必须帮我写题目概括 @gzn7264 这篇题解就不在洛谷博客上发布了。 首先枚举点对的右端点。显而易见，合法的左端点必须满足： 左端点与右端点颜色相同 左端点到右端点之间必须存在至少一个客栈，使得其费用小于等于 $P$ 第二个条件有点麻烦，我们可以稍微转化一下。记 $l_i$ 为客栈 $i$ 的左侧第一个费用小于等于 $P$ 的客栈编号。那么，以 $i$ 为右端点的情况下，左端点的可选位置即为 $1-l_i$ 种所有颜色与客栈 $i$ 相同的客栈个数。 由于本题卡空间，必须采用滚动数组。数组 $s_i$ 记录颜色 $i$ 的出现次数，数组 $c_i$ 记录颜色 $i$ 的可选左端点个数。每次更新答案时，加上 $c_{color}$ 即可。 在示例代码中，可选的左端点包括其本身，因此当 $money\\le P$ 时存在重复计算，答案减一。 代码如下： 12345678910111213141516171819#include &lt;bits/stdc++.h&gt;using namespace std;long long ans;int N, K, P;int c[50], s[50];int main() { scanf(\"%d%d%d\", &amp;N, &amp;K, &amp;P); for (register int i = 1; i &lt;= N; ++i) { int color, money; scanf(\"%d%d\", &amp;color, &amp;money); s[color]++; if (money &lt;= P) for (register int j = 0; j &lt; K; ++j) c[j] = s[j]; ans += c[color] - (money &lt;= P); } printf(\"%I64d\", ans); return 0;}","link":"/2019/09/09/solution-luogu-p1311/"},{"title":"题解-luogu-p1314聪明的质监员","text":"题目链接 咕咕咕 本题难度不大，第一眼就能看出需要用二分答案或倍增答案解决。 需要解决的第一个问题是如何根据一个猜测的参数 $W$ ，快速计算出检验结果 $Y$ 。由于只有 $w_j \\ge W$ 的矿石才会对检验结果做出贡献，因此我们可以将 $w_j &lt; W$ 的矿石忽略并预处理前缀和，并且回答 $M$ 个询问即可。 接下来应该考虑如何计算猜测值 $W$ 。观察到 $Y(W)$ 是单调不增的，我们可以用倍增求出满足 $Y \\ge S$ 的最大 $W$ 值，那么满足 $Y&lt;S$ 的最小 $W$ 值一定为 $W+1$ 。 最终答案即为 $\\min\\lbrace |Y(W)-S|,|Y(W+1)-S|\\rbrace$ 。 代码如下： 12345678910111213141516171819202122#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int N, M, ans = 1; ll S;int w[200005], v[200005], l[200005], r[200005]; ll s1[200005], s2[200005];inline ll Y(int W) { for (register int i = 1; i &lt;= N; ++i) s1[i] = w[i] &gt;= W ? s1[i - 1] + 1 : s1[i - 1], s2[i] = w[i] &gt;= W ? s2[i - 1] + v[i] : s2[i - 1]; ll ret = 0; for (register int i = 1; i &lt;= M; ++i) ret += (s1[r[i]] - s1[l[i] - 1]) * (s2[r[i]] - s2[l[i] - 1]); return ret;}int main() { scanf(\"%d%d%lld\", &amp;N, &amp;M, &amp;S); for (register int i = 1; i &lt;= N; ++i) scanf(\"%d%d\", &amp;w[i], &amp;v[i]); for (register int i = 1; i &lt;= M; ++i) scanf(\"%d%d\", &amp;l[i], &amp;r[i]); for (register int i = 17; i &gt;= 0; --i) ans += Y(ans + (1 &lt;&lt; i)) &gt;= S ? (1 &lt;&lt; i) : 0; printf(\"%lld\", min(Y(ans) - S, S - Y(ans + 1)));}","link":"/2019/08/27/solution-luogu-p1314/"},{"title":"题解-luogu-p1600天天爱跑步(Beta)","text":"题目链接 $n$个点的树上有$m$条路径$(S_i, T_i)$，每条路径上各有一个人从$S_i$跑到$T_i$。他们在第$0$时刻同时跑，每秒能跑一条边。回答$n$个询问，询问恰好在第$W_i$时刻到达节点$i$的人数。 $1 \\le n \\le 300000,1 \\le m \\le 300000 $ 感谢@tth37 的贡献 准备写一篇较为详细的题解。部分思路来自《算法竞赛进阶指南》。 游戏地图构成树形结构，为方便处理，可以取$1$号节点作为根，转化为有根树处理。 可以发现，从S到T的路径有且只有一条，并且必将经过$lca(S,T)$。 不妨设$x$节点上有一名观察员，其观察时间为$W[x]$。我们可以对$x$的位置进行分情况讨论。 $x$在$S$到$lca(S,T)$的路径上（该路径包含$lca(S,T)$）。 为方便说明，假设$S=6$，$T=4$。那么，此时$x$可能为$1$，$3$或$6$。如果此观察员可以观察到当前玩家，当且仅当$W[x]=d[S]-d[x]$（$d$数组表示节点深度）。对上式移项，得到$W[x]+d[x]=d[S]$。 接下来，我们给每一个节点分配若干个权值，即在每一个节点上开一个一维数组，记录各个权值。根据上式，我们可以将$S$到$lca(S,T)$的路径上每一个节点的$d[S]$号权值加一。按照这种方式处理完所有玩家的信息之后，我们遍历所有节点，每个节点上的$(W[x]+d[x])$号权值即为所求。 该方法的正确性应该不难理解。$(W[x]+d[x])$号权值的意义即为该节点上满足前文所述等式的玩家个数，而满足等式意味着玩家将会在观察员探头时经过观察点，符合题意。 但是这种暴力方法显然还有优化的空间。在有根树的一条链上进行权值更改，可以尝试用树上差分的知识解决。在节点$S$上的$d[S]$号权值加一，节点$fa[lca(S,T)]$上的$d[S]$号权值减一（可以在每个节点上开一个不定长数组vector记录当前节点上的加减操作），最后进行统计时，计算当前子树所有$(W[x]+d[x])$号权值和即可。但即便如此，答案统计也并不容易实现；我们可以使用以下方法： 建立全局数组$s$，其中$s[i]$表示$i$号权值之和。深度优先遍历所有节点，在刚访问到当前节点时，记录$cnt=s[W[x]+d[x]]$。遍历当前节点上的vector，执行加减操作（例如：vector中的一项操作把$3$号权值减一，则$s[3]=s[3]-1$）。递归访问当前节点的所有子节点。访问结束后，$(s[W[x]+d[x]]-cnt)$即为所求。 结合dfs序的相关知识，访问完当前节点的所有子节点之后，$s$数组已经记录了以$x$为根的子树上所有操作。因此将访问后与访问前的权值相减，即为树上差分所得到的答案。 别忘了才分类讨论了一半呢…… $x$在$lca(S,T)$到$T$的路径上（该路径不包含$lca(S,T)$）。同样假设$S=6$，$T=4$。此时$x$可能为$2$或$4$。如果此观察员可以观察到当前玩家，当且仅当$W[x]=(d[S]-d[lca(S,T)])+(d[x]-d[lca(S,T)])$。对上式移项，得到$W[x]-d[x]=d[S]-2*d[lca(S,T)]$。 类似地，我们只需将操作改为对$(d[S]-2*d[lca(S,T)])$号权值的操作即可。由于权值有可能为负，需要将序号整体平移$N$个单位，即改为对$(d[S]-2*d[lca(S,T)]+N)$号权值的操作。在每个节点上另开一个操作vector，统计答案时另开一个$s$数组，将计算出的答案与第一种情况的答案相加即可。 Q：为什么必须另开操作vector和$s$数组？ A：回顾一下提到的两个式子：$W[x]+d[x]=d[S]$，$W[x]-d[x]=d[S]-2*d[lca(S,T)]$如果将两者合起来操作，有可能产生“将$d[S]$号权值加一，碰巧统计答案时$W[x]-d[x]=d[S]$”的情况。然而，上述等式是没有任何意义的：$x$号节点根本无法观察到玩家。为了避免此类错误，必须将两种操作分开处理。 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 300005;struct opt {int id, op;};vector&lt;int&gt; G[MAXN];vector&lt;opt&gt; opt1[MAXN], opt2[MAXN];int N, M;int W[MAXN];int f[MAXN][20], d[MAXN];void dfs1(int u, int fa) { f[u][0] = fa, d[u] = d[fa] + 1; for (register int i = 1; i &lt;= 19; ++i) f[u][i] = f[f[u][i-1]][i-1]; for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; if (v == fa) continue; dfs1(v, u); }}inline int Lca(int u, int v) { if (d[u] &lt; d[v]) swap(u, v); for (register int i = 19; i &gt;= 0; --i) { if (d[f[u][i]] &gt;= d[v]) u = f[u][i]; } if (u == v) return u; for (register int i = 19; i &gt;= 0; --i) { if (f[u][i] != f[v][i]) u = f[u][i], v = f[v][i]; } return f[u][0];}int s1[MAXN*3], s2[MAXN*3];int ans[MAXN];void dfs2(int u, int fa) { int cnt1 = s1[W[u] + d[u] + N]; int cnt2 = s2[W[u] - d[u] + N]; for (vector&lt;opt&gt;::iterator it = opt1[u].begin(); it != opt1[u].end(); it++) s1[it-&gt;id] += it-&gt;op; for (vector&lt;opt&gt;::iterator it = opt2[u].begin(); it != opt2[u].end(); it++) s2[it-&gt;id] += it-&gt;op; for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; if (v == fa) continue; dfs2(v, u); } ans[u] = s1[W[u] + d[u] + N] - cnt1 + s2[W[u] - d[u] + N] - cnt2;}int main() { scanf(\"%d%d\", &amp;N, &amp;M); for (register int i = 1; i &lt; N; ++i) { int u, v; scanf(\"%d%d\", &amp;u, &amp;v); G[u].push_back(v), G[v].push_back(u); } dfs1(1, 0); for (register int i = 1; i &lt;= N; ++i) scanf(\"%d\", &amp;W[i]); for (register int i = 1; i &lt;= M; ++i) { int S, T; scanf(\"%d%d\", &amp;S, &amp;T); int lca = Lca(S, T); opt1[S].push_back((opt){d[S] + N, 1}); opt1[f[lca][0]].push_back((opt){d[S] + N, -1}); opt2[T].push_back((opt){d[S] - 2*d[lca] + N, 1}); opt2[lca].push_back((opt){d[S] - 2*d[lca] + N, -1}); } dfs2(1, 0); for (register int i = 1; i &lt;= N; ++i) printf(\"%d \", ans[i]); return 0;}","link":"/2019/06/07/solution-luogu-p1600/"},{"title":"题解-luogu-p1641生成字符串","text":"题目链接 将$n$个$1$和$m$个$0$组成字符串，使得在任意的前$k$个字符中，$1$的个数不能少于$0$的个数。求满足条件的字符串共有多少个。 $1\\le m \\le n \\le 1000000$ 本题是卡特兰数的一个简单变式。 回忆卡特兰数的推导过程，可以生成的所有字符串共有$C_{n+m}^n$个，其中不合法的字符串有$C_{n+m}^{n+1}$个。最终答案即为$C_{n+m}^{n}-C_{n+m}^{n+1}$。计算组合数前须预处理出阶乘逆元。 代码如下： 1234567891011121314151617181920#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int p = 20100403;int N, M;int inv[2000005], fac[2000005], facinv[2000005];int C(int n, int m) { return (ll) fac[n] * facinv[m] % p * facinv[n - m] % p;}int main() { cin &gt;&gt; N &gt;&gt; M; inv[1] = 1; fac[0] = fac[1] = 1; facinv[1] = 1; for (register int i = 2; i &lt;= N + M; ++i) { inv[i] = (ll) (p - p / i) * inv[p % i] % p; fac[i] = (ll) i * fac[i - 1] % p; facinv[i] = (ll) facinv[i - 1] * inv[i] % p; } cout &lt;&lt; (C(N + M, N) - C(N + M, N + 1) + p) % p; return 0;}","link":"/2019/07/13/solution-luogu-p1641/"},{"title":"题解-luogu-p1792种树","text":"题目链接 给定一个环，环上有 $n$ 个节点。选出 $m$ 个互不相邻的节点，使得选出节点的权值总和最大。 $n\\le 200000$ 比较巧妙的贪心。 引理：如果 $A[i]$ 最大，在最终的方案中不可能只选 $A[i-1],A[i+1]$ 中的一个。 假设最终方案中只选了 $A[i-1]$，那么将 $A[i-1]$ 替换为 $A[i]$ 会导致答案更优。 因此，在取出节点 $i$ 之后，应该设置一个反悔的机会：将节点 $i$ 的权值改为 $A[i-1]+A[i+1]-A[i]$，表示放弃节点 $i$，并同时在 $i-1$、$i+1$ 位置种树。节点的相对位置关系可以用链表维护。 可删堆可以用两个普通的大根堆实现。 代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;bits/stdc++.h&gt;#define pre(u) node[u].l#define nxt(u) node[u].r#define val(u) node[u].valusing namespace std;const int maxn = 200005;struct Node { int l, r, val;}node[maxn];struct Heap { priority_queue&lt;pair&lt;int, int&gt; &gt; a, b; inline void push(pair&lt;int, int&gt; t) {a.push(t);} inline void pop() { while (b.size() &amp;&amp; a.top() == b.top()) a.pop(), b.pop(); a.pop(); } inline void erase(pair&lt;int, int&gt; t) {b.push(t);} inline pair&lt;int, int&gt; top() { while (b.size() &amp;&amp; a.top() == b.top()) a.pop(), b.pop(); return a.top(); }}q;inline void del(int p) { nxt(pre(p)) = nxt(p); pre(nxt(p)) = pre(p);}int N, M;int main() { scanf(\"%d%d\", &amp;N, &amp;M); if (M * 2 &gt; N) return puts(\"Error!\"), 0; for (register int i = 1; i &lt;= N; ++i) scanf(\"%d\", &amp;node[i].val), node[i].l = i - 1, node[i].r = i + 1, q.push(make_pair(node[i].val, i)); node[1].l = N, node[N].r = 1; int ans = 0; for (register int i = 1; i &lt;= M; ++i) { ans += q.top().first; int p = q.top().second; q.pop(); val(p) = val(pre(p)) + val(nxt(p)) - val(p); q.erase(make_pair(val(pre(p)), pre(p))), q.erase(make_pair(val(nxt(p)), nxt(p))); q.push(make_pair(val(p), p)); del(pre(p)), del(nxt(p)); } printf(\"%d\", ans); return 0;}","link":"/2019/10/04/solution-luogu-p1792/"},{"title":"题解-luogu-p1941飞扬的小鸟","text":"题目链接 给定 $n*m$ 的游戏界面，求是否可以通过操作使小鸟通过所有管道以及最少操作次数。 $n\\le 10000,m\\le 1000$ 这篇博客不会在洛谷发表，所以内容可能比较放飞自我。 神仙shiwt巨佬早在去年的这个时候就已经切掉了这个神仙题。 记 $f[i][j]$ 表示从起点飞到坐标 $(i,j)$ 所需的最小步数。考虑 $f[i][j]$ 的转移。它要么是从 $(i-1,j+Y)$ 那里掉下来的，也有可能是从 $(i-1,j-kX)$ 那里升上来的。 考虑优化。 $(i-1,j-kX)$ 的枚举较为啰嗦；不难发现如果小鸟🐦可以飞到 $(i,j-X)$ ，那么它再飞一下不就到 $(i,j)$ 了吗？ 状态转移方程如下： f[i][j]=\\min \\{f[i-1][j+Y],f[i][j-X]+1,f[i-1][j-X]+1\\}不妨写个滚动数组。 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 10005;const int MAXM = 1005;const int INF = 0x3f3f3f3f;int N, M, K;int X[MAXN], Y[MAXN];int L[MAXN], R[MAXN];int f[2][MAXM * 2];int cnt, minn;int main() { scanf(\"%d%d%d\", &amp;N, &amp;M, &amp;K); for (register int i = 1; i &lt;= N; ++i) scanf(\"%d%d\", &amp;X[i], &amp;Y[i]); for (register int i = 1; i &lt;= K; ++i) { int p, l, h; scanf(\"%d%d%d\", &amp;p, &amp;l, &amp;h); L[p] = l, R[p] = h; } for (register int i = 1; i &lt;= N; ++i) { int cur = i &amp; 1; minn = INF; for (register int j = 0; j &lt;= M + X[i]; ++j) f[cur][j] = INF; for (register int j = X[i]; j &lt;= M + X[i]; ++j) f[cur][j] = min(f[cur][j], min(f[cur ^ 1][j - X[i]] + 1, f[cur][j - X[i]] + 1)); for (register int j = M + 1; j &lt;= M + X[i]; ++j) f[cur][M] = min(f[cur][M], f[cur][j]); for (register int j = 0; j &lt;= M - Y[i]; ++j) f[cur][j] = min(f[cur][j], f[cur ^ 1][j + Y[i]]); if (L[i] || R[i]) { for (register int j = 0; j &lt;= L[i]; ++j) f[cur][j] = INF; for (register int j = R[i]; j &lt;= M; ++j) f[cur][j] = INF; } f[cur][0] = INF; for (register int j = 0; j &lt;= M; ++j) minn = min(minn, f[cur][j]); if (minn == INF) { puts(\"0\"); printf(\"%d\", cnt); return 0; } cnt += L[i] || R[i]; } puts(\"1\"); printf(\"%d\", minn); return 0;}","link":"/2019/09/19/solution-luogu-p1941/"},{"title":"题解-luogu-p1979华容道","text":"题目链接 给定一个 $n * m$ 的棋盘，共 $q$ 次询问，每次询问在华容道游戏中将目标块移动到目标位置的最少步数 $n,m\\le 30, q\\le 300$ 本题的正解比较难想，正常人看到这题可能都会在搜索剪枝的不归路上越走越远。 如果采用搜索的策略，每次需要记录下棋盘的完整状态，状态数量和转移数量过于庞大，以致于无法在规定时间内求解。 观察到棋盘中的非障碍位置只可能有空格、普通棋子或目标棋子三种可能，因此我们只需确定目标棋子和空格的位置，就可以将整张棋盘的状态确定下来。 显然，如果想要挪动目标棋子，则目标棋子的上下左右四个方向之一必须为空格。可以定义状态为三元组 $(x,y,d)$ ，表示目标棋子位于 $(x,y)$ ，并且其 $d(0\\le d\\le 3)$ 方向为空格。 假设位于 $(x1,y1)$ 的目标棋子向 $d1$ 方向移动一个单位后到达 $(x2,y2)$ ，不难发现状态 $(x1,y1,d1)$ 可以转移到状态 $(x2,y2,d2)$。而此次转移需要的代价，即为将空格从原始位置移动到 $(x2,y2)$ 的 $d2$ 方向所需的最小步数。这里可以用 bfs 求解。（注意障碍方块和 $(x2,y2)$ 位置是不可以经过的） 将每个状态 $(x,y,d)$ 抽象为节点，可以转移的状态之间连一条有向边，边权即为转移的最小步数。对于每次询问，计算出抽象后的图中最短路径即可。 getdis(x,y,px,py) 的功能：求出以 (x,y) 为起点，不能经过障碍及 (px,py)，到达所有位置的最短路 代码如下：（略丑） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#include&lt;bits/stdc++.h&gt;using namespace std;#define id(x, y, d) ((x - 1) * M + y) + N * M * (d)const int INF = 0x3f3f3f3f;struct Edge { int v, w; Edge(int v, int w): v(v), w(w) {}};vector&lt;Edge&gt; G[35 * 35 * 5];int nx[] = {0, -1, 0, 1};int ny[] = {-1, 0, 1, 0};int N, M, Q;int h[35][35];int t[35][35];bool vis[35][35];void getdis(int x, int y, int px, int py) { memset(t, 0x3f, sizeof(t)); memset(vis, 0, sizeof(vis)); if (h[x][y] == 0) return; queue&lt;pair&lt;int, int&gt; &gt; q; t[x][y] = 1, vis[x][y] = 1; q.push(make_pair(x, y)); while (q.size()) { int ux = q.front().first, uy = q.front().second; q.pop(); for (int d = 0; d &lt;= 3; ++d) { int tx = ux + nx[d], ty = uy + ny[d]; if (tx &lt; 1 || tx &gt; N || ty &lt; 1 || ty &gt; M) continue; if (tx == px &amp;&amp; ty == py) continue; if (h[tx][ty] == 0 || vis[tx][ty]) continue; t[tx][ty] = t[ux][uy] + 1; q.push(make_pair(tx, ty)); vis[tx][ty] = 1; } }}inline void AddEdge(int u, int v, int w) { G[u].push_back(Edge(v, w));}bool v[35 * 35 * 5];int d[35 * 35 * 5];void Dijkstra(int S) { memset(v, 0, sizeof(v)); memset(d, 0x3f, sizeof(d)); d[S] = 0; priority_queue&lt;pair&lt;int, int&gt; &gt; q; q.push(make_pair(0, S)); while (q.size()) { int u = q.top().second; q.pop(); if (v[u]) continue; v[u] = 1; for (vector&lt;Edge&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = it-&gt;v, w = it-&gt;w; if (d[u] + w &lt; d[v]) { d[v] = d[u] + w; q.push(make_pair(-d[v], v)); } } }}int main() { scanf(\"%d%d%d\", &amp;N, &amp;M, &amp;Q); for (int i = 1; i &lt;= N; ++i) for (int j = 1; j &lt;= M; ++j) scanf(\"%d\", &amp;h[i][j]); for (int x = 1; x &lt;= N; ++x) { for (int y = 1; y &lt;= M; ++y) { if (h[x][y] == 0) continue; for (int d = 0; d &lt;= 3; ++d) { int tx = x + nx[d], ty = y + ny[d]; if (tx &lt; 1 || tx &gt; N || ty &lt; 1 || ty &gt; M) continue; if (h[tx][ty] == 0) continue; getdis(x, y, tx, ty); for (int d2 = 0; d2 &lt;= 3; ++d2) { int tx2 = tx + nx[d2], ty2 = ty + ny[d2]; if (tx2 &lt; 1 || tx2 &gt; N || ty2 &lt; 1 || ty2 &gt; M) continue; if (t[tx2][ty2] &gt;= INF) continue; AddEdge(id(x, y, d), id(tx, ty, d2), t[tx2][ty2]); } } } } while (Q--) { int ex, ey, sx, sy, tx, ty; scanf(\"%d%d%d%d%d%d\", &amp;ex, &amp;ey, &amp;sx, &amp;sy, &amp;tx, &amp;ty); if (sx == tx &amp;&amp; sy == ty) { puts(\"0\"); continue; } getdis(ex, ey, sx, sy); int ans = INF; for (int d1 = 0; d1 &lt;= 3; ++d1) { int fx = sx + nx[d1], fy = sy + ny[d1]; if (fx &lt; 1 || fx &gt; N || fy &lt; 1 || fy &gt; M) continue; if (t[fx][fy] &gt;= INF) continue; int cur = INF; Dijkstra(id(sx, sy, d1)); for (int d2 = 0; d2 &lt;= 3; ++d2) cur = min(cur, d[id(tx, ty, d2)]); cur += t[fx][fy] - 1; ans = min(ans, cur); } if (ans &gt;= INF) puts(\"-1\"); else printf(\"%d\\n\", ans); } return 0;}","link":"/2019/09/18/solution-luogu-p1979/"},{"title":"题解-luogu-p2279消防局的设立","text":"题目链接 给定一棵有 $n$ 个节点的树，求至少需要标记多少个点使得树上任意两个点的距离均小于等于 $2$ $n \\le 1000$ 感谢@oy的贡献 实际上就是这道题的简化版。 首先定义状态。$f[u][4]$ 表示节点 $u$ 的二级祖先（父亲的父亲）及以下节点被完全覆盖，所需的最小代价。$f[u][3]$ 表示节点 $u$ 的一级祖先及以下节点被完全覆盖所需最小代价。以此类推， $f[u][0]$ 表示节点 $u$ 的二级儿子（儿子的儿子）及以下节点被完全覆盖所需的最小代价。 考虑 $f[u][4]$ 的推导。由于每个节点被选中后只能覆盖到与其距离小于等于二的节点，要使 $u$ 的二级祖先被覆盖到，则节点 $u$ 必须被选取。对节点 $u$ 的各个儿子没有要求。因此，$f[u][4]=1+\\Sigma f[v][0…4]$ 。 考虑 $f[u][3]$。由于只需要覆盖到节点 $u$ 的父亲，只需使节点 $u$ 的至少一个子节点可以覆盖到其二级祖先即可。同时，该子节点在覆盖到节点 $u$ 的二级祖先时，可以同时覆盖到节点 $u$ 的其他儿子，因此节点 $u$ 的其他儿子不必被覆盖。$f[u][3]=f[k][4]+\\Sigma f[v][1…4]$。 $f[u][2]$ 的情况与 $f[u][3]$ 类似，只需保证一个儿子能将节点 $u$ 覆盖即可。 $f[u][2]=f[k][3]+\\Sigma f[v][2…4]$ 。 $f[u][1]$ 与 $f[u][0]$ 的推导相对简单，因为各个子节点之间不会相互影响。 $f[u][1]=\\Sigma f[v][2…4]$，$f[u][0]=\\Sigma f[v][1…4]$。 对转移方程进行简单优化即可。代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;bits/stdc++.h&gt;using namespace std;vector&lt;int&gt; G[1005];int N;int f[1005][10];void dp(int u, int fa) { f[u][3] = 0x3f3f3f3f; f[u][2] = 0x3f3f3f3f; f[u][4] = 1; for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; if (v == fa) continue; dp(v, u); f[u][0] += f[v][1]; f[u][1] += f[v][2]; f[u][2] = min(f[u][2], f[v][3] - f[v][2]); f[u][3] = min(f[u][3], f[v][4] - f[v][1]); f[u][4] += f[v][0]; } f[u][2] += f[u][1]; f[u][3] += f[u][0]; f[u][3] = min(f[u][3], f[u][4]); f[u][2] = min(f[u][2], f[u][3]); f[u][1] = min(f[u][1], f[u][2]); f[u][0] = min(f[u][0], f[u][1]); }int main() { scanf(\"%d\", &amp;N); for (register int u = 2; u &lt;= N; ++u) { int v; scanf(\"%d\", &amp;v); G[u].push_back(v); G[v].push_back(u); } dp(1, 0); printf(\"%d\", f[1][2]); return 0;}","link":"/2019/08/19/solution-luogu-p2279/"},{"title":"题解-luogu-p2495消耗战","text":"题目链接 现在我随机@一个人 这个人必须帮我写题目概括 @xj 这是一篇虚树入门题解。 考虑题目中 $m=1$ 的情况。树上动规，定义状态 $f[u]$ 表示切断节点 $u$ 与该子树内所有关键点的路径，最小总代价。状态转移方程如下： f[u]= \\begin{equation} \\begin{cases} w(u,v) \\ \\texttt{if h[v]=1} \\\\ \\min(w(u,v),f[v])\\ \\texttt{if h[v]=0} \\end{cases} \\end{equation}动态规划部分不再赘述。该算法复杂度为 $O(n)$ 。 考虑题目中 $m\\not= 1$ 的情况。如果对于每一次查询，都进行一次 $O(n)$ 复杂度的遍历显然无法接受。观察到题目中 $\\Sigma{k}$ 的取值不大，可以考虑针对没个询问，舍弃树上的一些非关键点，仅保留一棵包含原树上部分节点的虚树，并在虚树上进行动态规划。 那么，在虚树上应该保留原树上的哪些点呢？ 首先，每次讯问中给出的 $k$ 个关键点（资源丰富的岛屿）显然应该包含在虚树中。其次，任意两个关键点的最近公共祖先也应该包含在虚树中；因为在本题中，切断一条边可以同时切断根节点与多个关键点间的路径，最近公共祖先的存在为动态规划提供了这种状态转移。最后为了方便，我们可以将 $1$ 号节点（即根节点）也加入到虚树中。 构造虚树的方法很多，在这里介绍一种用栈建树的算法流程。 令 $1$ 号节点为虚树的根。 将所有关键点按照其在原树中的 dfs 序升序排序。假设当前正在处理的关键点为 $u$ 。 维护一个栈，使得栈底到栈顶的元素依次为虚树上从根节点到节点 $u$ 的一条链。 这里为什么要维护一个栈呢？ 如图：在处理完 $3$ 号关键点后，虚树中只有 $1$ 、 $3$ 两个节点，栈中的元素依次为 $1$ 、 $3$ 。但是这条链是不完整的，可以观察到在处理 $4$ 号关键点时，还需要将 $2$ 号节点添加到虚树中。利用栈的性质，我们可以动态维护一条虚树上的链，并在必要的时候添加节点。 回到刚才的叙述，当前正在处理关键点 $u$ 。根据栈的定义，上一个处理的关键点一定为 $stack.top()$ 。 由于进行过排序，即节点 $u$ 的 dfs 序大于上一个关键点的 dfs 序，因此节点 $u$ 要么是上一个关键点的后代，要么与其没有祖先-后代的关系。 显然，如果节点 $u$ 是 $stack.top()$ 的后代，那么只需将节点 $u$ 入栈即可，因为 $u$ 在虚树中，一定是上一个关键点的儿子。 但是如果节点 $u$ 与 $stack.top()$ 没有祖先-后代的关系，那么此时的讨论将比较复杂。 可以结合上图观察，假设当前正在处理 $4$ 号关键点。我们可以首先将栈顶弹出，因为 $stack.top()$ 一定不在根节点到节点 $u$ 的链上。此时，栈中剩余的元素只有 $1$ 。然而， $3$ 与 $4$ 的最近公共祖先 $2$ 号节点还不在栈中；因此我们需要把 $2$ 号节点入栈，并将刚刚弹出的节点与新的栈顶在虚树中连边。处理结束后，将 $4$ 入栈。 接下来处理 $5$ 号关键点，此时栈中的元素依次为 $1$ 、$2$ 、$4$ 。首先将栈顶弹出，但由于我们接下来需要维护的链为 $1-&gt;5$ ，栈中仍然有节点 $2$ ，因此我们需要将 $2$ 和刚刚弹出的节点 $4$ 连边，并且重复以上操作。将新的栈顶 $2$ 弹出后，栈中只剩下节点 $1$ 。这时发现 $1$ 号节点恰好为 $5$ 与上一次处理的关键点 $4$ 的最近公共祖先，因此将 $1$ 与 $2$ 连边后，弹栈可以中止了。处理结束后，将 $5$ 入栈。 此时我们已经处理完了所有关键点，但是栈中的元素间还没有连边。将栈中的节点依次连边后，虚树的构建就完成了。 伪代码如下： 123456789101112131415将关键点按照 dfs 序排序stack.push(1)for u = 1 ~ k: // 假设当前正在处理节点 u lca = Lca(u, stack.top()) while stack.top() != lca: tmp = stack.top() stack.pop() if dfn[stack.top()] &lt; dfn[lca] stack.push(lca) AddEdge(stack.top(), tmp) stack.push(u)while stack.top() != 1: tmp = stack.top() stack.pop() AddEdge(stack.top(), tmp) 可以证明，对于本题，虚树上的边权一定对应原树上两节点之间边权的最小值。证明不再赘述。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;struct Edge {int v;ll w;Edge(int a, ll b) {v = a, w = b;}};struct Key {int u, dfn;}keys[250005];int keys_cnt;inline bool cmp(Key a, Key b) { return a.dfn &lt; b.dfn;}int N, M;vector&lt;Edge&gt; G[250005], VT[250005];int f[250005][19], g[250005][19], dep[250005];ll d[250005];bool h[250005];int dfn[250005], dfn_idx;int lg[250005];void dfs(int u, int fa, ll w) { dep[u] = dep[fa] + 1; dfn[u] = ++dfn_idx; f[u][0] = fa, g[u][0] = w; for (int i = 1; i &lt;= 18; ++i) f[u][i] = f[f[u][i - 1]][i - 1], g[u][i] = min(g[f[u][i - 1]][i - 1], g[u][i - 1]); for (vector&lt;Edge&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = it -&gt; v; ll w = it -&gt; w; if (v == fa) continue; dfs(v, u, w); }}void dp(int u) { for (vector&lt;Edge&gt;::iterator it = VT[u].begin(); it != VT[u].end(); it++) { int v = it -&gt; v; ll w = it -&gt; w; dp(v); if (h[v]) d[u] += w; else d[u] += min(w, d[v]); h[v] = 0; d[v] = 0; } VT[u].clear();}inline int Lca(int u, int v) { if (dep[u] &lt; dep[v]) swap(u, v); while (dep[u] &gt; dep[v]) { u = f[u][lg[dep[u] - dep[v]]]; } if (u == v) return u; for (int i = lg[dep[u]]; i &gt;= 0; --i) if (f[u][i] != f[v][i]) u = f[u][i], v = f[v][i]; return f[u][0];}inline int query(int u, int v) { int ans = 0x3f3f3f3f; while (dep[u] &gt; dep[v]) { ans = min(ans, g[u][lg[dep[u] - dep[v]]]); u = f[u][lg[dep[u] - dep[v]]]; } return ans;}inline void AddEdge(int u, int v) { int w = query(v, u); VT[u].push_back(Edge(v, w));}int main() { for (register int i = 2; i &lt;= 250000; ++i) lg[i] = lg[i &gt;&gt; 1] + 1; memset(g, 0x3f, sizeof(g)); scanf(\"%d\", &amp;N); for (register int i = 1; i &lt; N; ++i) { int u, v; ll w; scanf(\"%d%d%lld\", &amp;u, &amp;v, &amp;w); G[u].push_back(Edge(v, w)); G[v].push_back(Edge(u, w)); } dfs(1, 0, 0); scanf(\"%d\", &amp;M); while (M--) { int k; keys_cnt = 0; scanf(\"%d\", &amp;k); for (register int i = 1; i &lt;= k; ++i) { scanf(\"%d\", &amp;keys[++keys_cnt].u); h[keys[keys_cnt].u] = 1; keys[keys_cnt].dfn = dfn[keys[keys_cnt].u]; } stack&lt;int&gt; s; sort(keys + 1, keys + keys_cnt + 1); s.push(1); for (register int i = 1; i &lt;= keys_cnt; ++i) { int u = keys[i].u; int lca = Lca(u, s.top()); while (s.top() != lca) { int tmp = s.top(); s.pop(); if (dfn[s.top()] &lt; dfn[lca]) s.push(lca); AddEdge(s.top(), tmp); } s.push(u); } while (s.top() != 1) { int tmp = s.top(); s.pop(); AddEdge(s.top(), tmp); } dp(1); printf(\"%lld\\n\", d[1]); d[1] = 0; } return 0;}","link":"/2019/08/30/solution-luogu-p2495/"},{"title":"题解-luogu-p2627修剪草坪","text":"题目链接 读入$n$个整数，选取其中若干个数，最多连续取$k$个，求取到数字和的最大值 $1\\le k \\le n \\le 100000$ 感谢@oy 的贡献 一道单调队列入门题。 面对动规题，首先设计状态转移方程。令$f[i]$表示$1-i$中连取不超过$K$个数，且第$i$个数不取所能累加的最大和。 因为第$i$个数不取，所以在$i$之前一定连取了一段数。这段数的长度可能为$0-K$（注意是$0-K$而不是$1-K$，可以通过手推样例发现最优解中可能存在连着两个数不取的情况）。连取的一段数所能累加的和可以用前缀和计算。考虑边界条件后，状态转移方程如下： f[i]=\\max_{i-K-1\\le j \\le i-1} \\lbrace f[j]+s[i-1]-s[j] \\rbrace由于$max$函数的循环变量是$j$，所以只与$i$相关的变量$s[i-1]$可以作为常数提出到$max$函数之外，即： f[i]=\\max_{i-K-1\\le j \\le i-1}\\lbrace f[j]-s[j]\\rbrace +s[i-1]将状态转移方程化简到这样，就已经可以用单调队列进行优化了。我们可以用单调队列维护$f[j]-s[j]$的最值，在循环时将其最大值取出再加上$s[i-1]$即为$f[i]$。 如果想不到该如何操作，也可以这样理解： g[i]=f[i]-s[i] f[i]=\\max_{i-K-1\\le j \\le i-1}\\lbrace g[j]\\rbrace+s[i-1]由于我们定义$f[i]$是第$i$个数不取的最优解，可以强行求解$f[N+1]$（虽然它似乎没有实际意义）作为本题的最终答案。 代码如下： 12345678910111213141516171819202122232425#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int N, K;ll s[100005], f[100005];int q[100005];int main() { scanf(\"%d%d\", &amp;N, &amp;K); for (register int i = 1; i &lt;= N; ++i) { scanf(\"%lld\", &amp;s[i]); s[i] += s[i-1]; } int l = 0, r = 1; q[0] = 0, f[0] = 0; for (register int i = 1; i &lt;= N + 1; ++i) { while (l &lt; r &amp;&amp; q[l] &lt; i - K - 1) l++; f[i] = f[q[l]] - s[q[l]] + s[i-1]; while (l &lt; r &amp;&amp; f[q[r - 1]] - s[q[r - 1]] &lt; f[i] - s[i]) r--; q[r++] = i; } printf(\"%lld\", f[N + 1]); return 0;}","link":"/2019/06/09/solution-luogu-p2627/"},{"title":"题解-luogu-p2633 Count on a tree(COT)","text":"题目链接 给定一棵$n$个节点的树，每个节点上有一个权值。对于$m$次询问，需要输出$u$到$v$的最短路径上第$k$小的点权。 $1\\le n\\le 100000,1 \\le m\\le 100000$ 感谢@tth37 的贡献 这题不难呀，怎么调了这么久？ ——Mr. G 前置知识是主席树。在利用主席树求解区间第K小数时可以发现，主席树是一种类似前缀和的数据结构，具有和前缀和类似的区间加减及差分等优秀性质。在求解线性区间的第K小数时，我们需要将该区间内的所有数值信息扔到一棵主席树中，并在这棵主席树上左右递归，以找到第K小数；同样的，我们可以类比树上前缀和的操作，定义$s[u]$为从根节点到第$u$号节点的“前缀主席树”（感性理解谢谢）。那么，包含$u$到$v$上所有数值信息的主席树就应该是： s[u]+s[v]-s[lca(u,v)]-s[fa[lca(u,v)]]理解上式后，问题基本可以解决了。另外注意离散化和主席树的代码细节。代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include&lt;bits/stdc++.h&gt;using namespace std;// 离散化操作#define id(x) (lower_bound(b+1,b+L+1,a[x])-b)#define rid(x) (b[x])const int MAXN = 100005;struct Node { int l, r, sum;}node[10000005];int head[MAXN],cnt;vector&lt;int&gt; G[MAXN];int N, M, L, lastans;int a[MAXN], b[MAXN];int f[MAXN][19], dep[MAXN];inline void build(Node &amp;u, int l, int r) { u.sum = 0; if (l == r) return; int mid = (l + r) &gt;&gt; 1; build(node[u.l = ++cnt], l, mid); build(node[u.r = ++cnt], mid + 1, r);}inline void insert(Node c, Node &amp;u, int l, int r, int p) { u.sum = c.sum + 1; if (l == r) return; int mid = (l + r) &gt;&gt; 1; if(p &lt;= mid) insert(node[c.l], node[u.l = ++cnt], l, mid, p), u.r = c.r; else insert(node[c.r], node[u.r = ++cnt], mid+1, r, p), u.l = c.l;}inline void dfs(int u, int fa) { insert(node[head[fa]], node[head[u] = ++cnt], 1, L, id(u)); f[u][0] = fa; dep[u] = dep[fa] + 1; for (register int i = 1; i &lt;= 18; ++i) f[u][i] = f[f[u][i-1]][i-1]; for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; if (v == fa) continue; dfs(v, u); }}inline int Lca(int u, int v) { if (dep[u] &lt; dep[v]) swap(u, v); for (register int i = 18; i &gt;= 0; --i) { if (dep[f[u][i]] &gt;= dep[v]) u = f[u][i]; } if (u == v) return u; for (register int i = 18; i &gt;= 0; --i) { if (f[u][i] != f[v][i]) u = f[u][i], v = f[v][i]; } return f[u][0];}inline int query(Node x, Node y, Node z, Node w, int l, int r, int k) { if (l == r) return l; int sum = node[x.l].sum + node[y.l].sum - node[z.l].sum - node[w.l].sum; int mid = (l + r) &gt;&gt; 1; if(sum &gt;= k) return query(node[x.l], node[y.l], node[z.l], node[w.l], l, mid, k); return query(node[x.r], node[y.r], node[z.r], node[w.r], mid+1, r, k - sum);}inline int querypath(int u, int v, int k) { int lca = Lca(u, v); return rid(query(node[head[u]], node[head[v]], node[head[lca]], node[head[f[lca][0]]], 1, L, k));}int main() { scanf(\"%d%d\", &amp;N, &amp;M); for (register int i = 1; i &lt;= N; ++i) scanf(\"%d\", &amp;a[i]), b[i] = a[i]; for (register int i = 1; i &lt; N; ++i) { int u, v; scanf(\"%d%d\", &amp;u, &amp;v); G[u].push_back(v); G[v].push_back(u); } sort(b + 1, b + N + 1); L = unique(b + 1, b + N + 1) - (b + 1); build(node[head[0] = ++cnt], 1, L); dfs(1, 0); for (register int i = 1; i &lt;= M; ++i) { int u, v, k; scanf(\"%d%d%d\", &amp;u, &amp;v, &amp;k); int nowans = querypath(u^lastans, v, k); printf(\"%d\\n\", nowans); lastans = nowans; }}","link":"/2019/05/20/solution-luogu-p2633/"},{"title":"题解-luogu-p2680运输计划(Beta)","text":"题目链接 证明及优化树上路径求交算法后 将会在洛谷博客上发布 这是一道暑假集训被劝退的神仙题 在今天的信息课上奇迹般地一遍过 根据题意，将某一条边的边权从 $w$ 改为 $0$，即为将经过该条边的路径总长度减去 $w$。而我们要做的，就是改造树上的某一条边，使得最长的路径长度最短。 题目乍一看可以二分，但在这篇题解中采用贪心策略。 首先将所有路径按照长度降序排序。不难发现，只有在“改造”操作能够同时减小前 $x$ 条路径的长度，该操作才是有意义的，否则不会对答案产生贡献。 那么如何使“改造”操作同时减小前 $x$ 条路径的长度呢？显然，此时选取的边一定属于前 $x$ 条路径的交。路径的交一定仍是路径，根据贪心，只需在路径的交上选取最大的边权，将这条边的边权改为 $0$，然后更新答案即可。 仅剩的问题在于如何快速求出前 $x$ 条路径的交。这里介绍一种 tth37 算法。（开始口胡） 引理：路径 $p(u1,v1)$ 与 $p(u2,v2)$ 如果存在交，则路径的交的端点一定为 $lca(u1,u2),lca(u1,v2),lca(v1,u2),lca(v1,v2)$ 中同时属于两条路径的最远点对。 尚未证明。未完待续。","link":"/2019/09/20/solution-luogu-p2680/"},{"title":"题解-luogu-p2774方格取数问题","text":"题目链接 不难发现，每个方格会与其上下左右四个方格产生矛盾。编程的任务即找到一种不产生矛盾的选择方案，并且使得取出的数总和最大。 首先对图进行黑白染色，目的是使产生矛盾的两个位置分别位于不同的色块中，方便建图。 源点与所有白色位置相连，权值为该位置上的数字；所有黑色位置与汇点相连，权值也为该位置上的数字；所有白色位置与其上下左右（注意边界情况）的黑色位置相连，权值为无穷大。 如此建图后，可以发现存在源点到汇点的增广路，这也意味着原图中存在产生矛盾的两个位置。假设一开始选取M*N网格中的所有方块，我们的任务是割掉网络中的一些边（即删去一些方块），使得割去的边权最小。割去网络中的边就相当于删掉两个矛盾位置中的其中一个，因此当网络中不再有源点到汇点的增广路，就意味着矛盾全部消除。 问题便转化为求解最小割（最大流）的问题。输出答案为全局和减去最小割。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int INF=0x3f3f3f3f;const int MAXN=100005;int N,M,S,T;ll sum;int nx[]={0,1,0,-1};int ny[]={1,0,-1,0};struct Edge{ int v,w,nxt;}mem[MAXN];int head[MAXN],cnt=1;inline void AddEdge(int u,int v,int w){ mem[++cnt].w=w; mem[cnt].v=v; mem[cnt].nxt=head[u]; head[u]=cnt;}int d[MAXN];bool vis[MAXN];inline bool bfs(){ memset(vis,0,sizeof(vis)); vis[S]=1;d[S]=0; queue&lt;int&gt; q; q.push(S); while(q.size()){ int u=q.front();q.pop(); for(register int i=head[u];i;i=mem[i].nxt){ int v=mem[i].v,w=mem[i].w; if(vis[v]||(w==0)) continue; vis[v]=1;d[v]=d[u]+1; q.push(v); } } return vis[T];}inline int dfs(int u,int flow){ if(u==T) return flow; int rflow; for(register int i=head[u];i;i=mem[i].nxt){ int v=mem[i].v,w=mem[i].w; if(w==0||d[u]+1!=d[v]) continue; if(rflow=dfs(v,min(flow,w))){ mem[i].w-=rflow; mem[i^1].w+=rflow; return rflow; } } return 0;}inline int Dinic(){ int maxflow=0,lowflow; while(bfs()){ while(lowflow=dfs(S,INF)) maxflow+=lowflow; } return maxflow;}int main(){ scanf(\"%d%d\",&amp;M,&amp;N); S=0,T=M*N+1; for(register int i=1;i&lt;=M;++i){ for(register int j=1;j&lt;=N;++j){ int w; scanf(\"%d\",&amp;w); sum+=w; if((i+j)&amp;1){ AddEdge(S,(i-1)*N+j,w); AddEdge((i-1)*N+j,S,INF); for(register int k=0;k&lt;=3;++k){ int tx=i+nx[k],ty=j+ny[k]; if(tx&lt;1||tx&gt;M||ty&lt;1||ty&gt;N) continue; AddEdge((i-1)*N+j,(tx-1)*N+ty,INF); AddEdge((tx-1)*N+ty,(i-1)*N+j,0); } } else{ AddEdge((i-1)*N+j,T,w); AddEdge(T,(i-1)*N+j,INF); } } } printf(\"%lld\",sum-Dinic()); return 0;}","link":"/2019/03/24/solution-luogu-p2774/"},{"title":"题解-luogu-p2831愤怒的小鸟","text":"题目链接 在平面直角坐标系中给定$n$个位于第一象限的点，求至少需要从原点引出多少条开口向下的抛物线，使它们经过所有的点。 $ 1 \\le n \\le 18 $ 感谢@oy的贡献 一道并不是特别难的状压dp。 状态定义：$f[s]$表示将所有剩余的猪消灭至少需要多少只小鸟，其中$s$表示已经消灭的猪的集合。 考虑状态转移，发射一个小鸟可以消灭尚未被消灭的猪。记$curve[i][j]$为一个二进制集合，表示经过第$i$、$j$号猪的抛物线能消灭哪些猪。 即： f[s]=min\\lbrace f[s|curve[i][j]]+1\\rbrace可以用记忆化搜索实现，注意精度控制和触摸状态。 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;bits/stdc++.h&gt;using namespace std;const int INF = 0x3f3f3f3f;const double EPS = 1e-7;int T;int N, M;double x[19], y[19];int curve[19][19];int f[524289];inline void equals(double&amp; a, double&amp; b, double x1, double y1, double x2, double y2) { a = (y1 * x2 - x1 * y2) / (x1 * x1 * x2 - x2 * x2 * x1); b = (y1 - x1 * x1 * a) / x1;}inline int dp(int s) { if (f[s] != -1) return f[s]; if (s == (1 &lt;&lt; N) - 1) return f[s] = 0; f[s] = INF; for (register int i = 1; i &lt;= N; ++i) { for (register int j = i; j &lt;= N; ++j) { f[s] = min(f[s], dp(s | curve[i][j]) + 1); } } return f[s];}int main() { scanf(\"%d\", &amp;T); while (T--) { memset(curve, 0, sizeof(curve)); scanf(\"%d%d\", &amp;N, &amp;M); for (register int i = 1; i &lt;= N; ++i) scanf(\"%lf%lf\", &amp;x[i], &amp;y[i]); for (register int p1 = 1; p1 &lt;= N; ++p1) { for (register int p2 = p1 + 1; p2 &lt;= N; ++p2) { double a, b; equals(a, b, x[p1], y[p1], x[p2], y[p2]); if (a &gt;= 0) continue; for (register int i = 1; i &lt;= N; ++i) { if (x[i] * x[i] * a + x[i] * b &gt;= y[i] - EPS &amp;&amp; x[i] * x[i] * a + x[i] * b &lt;= y[i] + EPS) { curve[p1][p2] |= (1 &lt;&lt; (i - 1)); curve[p2][p1] |= (1 &lt;&lt; (i - 1)); } } } } for (register int p = 1; p &lt;= N; ++p) curve[p][p] = (1 &lt;&lt; (p - 1)); memset(f, -1, sizeof(f)); printf(\"%d\\n\", dp(0)); } return 0;}","link":"/2019/07/03/solution-luogu-p2831/"},{"title":"题解-luogu-p3275糖果","text":"题目链接 给定一个长度为$n$的序列以及$k$个条件，每个条件要求序列当中一个点的权值大于/小于/不大于/不小于/等于另一个点。求这个序列总和的最小值 $1 \\le k,n \\le 100000$ 感谢@oy 的贡献 差分约束系统的模板题。 记 $d$ 数组为以 $S$ 为源点到各个节点的最长路。根据最长路的性质，如果存在一条边 $(u,v,w)$ ，则一定满足以下不等式： d[u]+w(u,v)\\le d[v]我们可以将题目中给出的不等关系转化为图中的有向边，然后通过单源最长路求出的一组 $\\lbrace d_n\\rbrace$ 即为差分约束系统的一组解。 因此，在图中连一条边 $(u,v,w)$ 相当于对 $d[u]$ 和 $d[v]$ 的取值作出限制，我们只需在构造出一张有向图，并求出其单源最长路即为答案。 有向边的构造方式如下： 限制 $d[A]=d[B]$ d[A]=d[B] \\Leftrightarrow (d[B]\\le d[A])\\wedge(d[A]\\le d[B]) \\Leftrightarrow (d[B]+0\\le d[A])\\wedge(d[A]+0\\le d[B])连边：$(A,B,0)$，$(B,A,0)$ 限制 $d[A]&lt;d[B]$ d[A]d[B]\\Leftrightarrow d[B]+1\\le d[A] 连边：$(B,A,1)$ 限制 $d[A]\\le d[B]$ 连边：$(A,B,0)$ 限制 $d[i]&gt;0$ 连边：$(S,i,1)$ 连完所有的边后，跑一遍单源最长路；如果存在正环则输出无解。 统计答案时记得开$long$ $long$。 代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;bits/stdc++.h&gt;using namespace std;#define die {puts(\"-1\"); exit(0);}typedef long long ll;const int MAXN = 100005;struct Edge { int v, w; Edge(int v, int w) { this -&gt; v = v, this -&gt; w = w; }};vector&lt;Edge&gt; G[MAXN];int N, K;bool inq[MAXN];int d[MAXN], cnt[MAXN];inline void AddEdge(int u, int v, int w) { G[u].push_back(Edge(v, w));}void SPFA() { queue&lt;int&gt; q; q.push(N + 1); d[N + 1] = 0; inq[N + 1] = 1; while (q.size()) { int u = q.front(); q.pop(); if (cnt[u] &gt;= N) die cnt[u]++; inq[u] = 0; for (vector&lt;Edge&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = it -&gt; v, w = it -&gt; w; if (d[u] + w &gt; d[v]) { d[v] = d[u] + w; if (inq[v] == 0) { inq[v] = 1; q.push(v); } } } }}int main() { scanf(\"%d%d\", &amp;N, &amp;K); for (register int i = 1; i &lt;= K; ++i) { int X, A, B; scanf(\"%d%d%d\", &amp;X, &amp;A, &amp;B); switch (X) { case 1: AddEdge(A, B, 0); AddEdge(B, A, 0); break; case 2: if (A == B) die AddEdge(A, B, 1); break; case 3: AddEdge(B, A, 0); break; case 4: if (A == B) die AddEdge(B, A, 1); break; case 5: AddEdge(A, B, 0); break; } } for (register int i = 1; i &lt;= N; ++i) AddEdge(N + 1, i, 1); SPFA(); ll ans = 0; for (register int i = 1; i &lt;= N; ++i) ans += d[i]; printf(\"%lld\", ans); return 0;}","link":"/2019/07/23/solution-luogu-p3275/"},{"title":"题解-luogu-p3953逛公园","text":"题目链接 给定一个$n$个点$m$条边的有向带权图，设起点到终点的最短路为$d$，求起点到终点满足权值总和小于等于$(d+k)$的路径数量 $1 \\le p\\le 10^9 $ , $1 \\le n\\le 10^5$ , $1 \\le m\\le 2 \\times 10^5$ , $1 \\le k\\le 50$ 感谢@oy 的贡献 一道看似图论实则可以用动态规划解决的题目。 朴素的状态定义：$f[u][k]$表示从$1$号节点走到$u$号节点，路径长度为$k$的方案总数。状态转移方程： f[u][k]=\\sum_{(u,v)\\in E}f[v][k-w(u,v)]但是这样的状态定义有一个严重的问题：空间消耗过大。考虑到题目中给出的$K$值并不大，我们可以利用题目所要求的信息来优化状态设计。 优化后的状态定义：$d[u]$表示从$1$号节点走到$u$号节点的最短路长度，$f[u][k]$表示从$1$号节点走到$u$号节点，路径长度为$d[u]+k$的方案总数。 如此一来，状态所需的空间大大减少，但相应的状态转移略显复杂。不妨设$f[u][k]$状态可以由$f[v][x]$转移得到，则： d[v]+x+w(u,v)=d[u]+k移项，得到： x=d[u]-d[v]+k-w(u,v)因此，完整的状态转移方程如下： f[u][k]=\\sum_{(u,v)\\in E}f[v][d[u]-d[v]+k-w(u,v)]我们最终要求的答案即为$\\sum_{i=0}^Kf[N][i]$，用记忆化搜索实现即可。 代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182// luogu-judger-enable-o2#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 100001;struct Edge {int v, w;};vector&lt;Edge&gt; G1[MAXN], G2[MAXN];int T, N, M, K, P;bool fail;int f[MAXN][51];int d[MAXN];bool vis[MAXN];bool ins[MAXN][51];void Dijkstra() { memset(vis, 0, sizeof(vis)); memset(d, 0x3f, sizeof(d)); priority_queue&lt;pair&lt;int, int&gt; &gt; q; q.push(make_pair(0, 1)); d[1] = 0; while (q.size()) { int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (vector&lt;Edge&gt;::iterator it = G1[u].begin(); it != G1[u].end(); it++) { int v = it-&gt;v, w = it-&gt;w; if (d[u] + w &lt; d[v]) { d[v] = d[u] + w; q.push(make_pair(-d[v], v)); } } }}inline int dp(int u, int k) { if (k &lt; 0) return 0; if (ins[u][k]){ fail = 1; return 0; } if (f[u][k]) return f[u][k]; ins[u][k] = 1; int ans = 0; for (vector&lt;Edge&gt;::iterator it = G2[u].begin(); it != G2[u].end(); it++) { int p = it-&gt;v, w = it-&gt;w; ans = (ans + dp(p, d[u] - d[p] + k - w))%P; if (fail == 1) return 0; } ins[u][k] = 0; return f[u][k] = ans;}int main() { scanf(\"%d\", &amp;T); while (T--) { scanf(\"%d%d%d%d\", &amp;N, &amp;M, &amp;K, &amp;P); for (register int i = 1; i &lt;= M; ++i) { int u, v, w; scanf(\"%d%d%d\", &amp;u, &amp;v, &amp;w); G1[u].push_back((Edge){v, w}); G2[v].push_back((Edge){u, w}); } Dijkstra(); dp(1, 0); f[1][0] = 1; int ans = 0; for (register int i = 0; i &lt;= K; ++i) { ans = (ans + dp(N, i))%P; } if(fail == 1) puts(\"-1\"); else printf(\"%d\\n\", ans); fail = 0; memset(f, 0, sizeof(f)); memset(ins, 0, sizeof(ins)); for (register int i = 1; i &lt;= N; ++i) { G1[i].clear(), G2[i].clear(); } }}","link":"/2019/06/19/solution-luogu-p3953/"},{"title":"题解-luogu-p3959宝藏","text":"题目链接 输入一个有$n$个点$m$条边的有权无向图。选定任意节点作为根节点。构造一棵生成树，使得树上所有真实边权的总和最小。真实边权的计算公式：$w(u,v)\\times L$，其中$L$为根节点到$u$路径上的节点总数。 $1\\le n \\le 12,1 \\le m \\le 1000$ 感谢@oy的贡献 这道题做了很长时间，从一开始推出错误的状态转移方程，到埋头优化正确的状态转移，前后花了一个多星期…… 本题题解可以保证正确性（当然欢迎Hack），却在速度上略有欠缺。 状态定义：$f[s][u][d]$ $s$表示当前已联通的点集，$u$表示当前点集生成树的树根，$d$表示$u$到起点的距离。（注意：$u$不是起点） 状态转移：状态肯定是通过挖通道来转移的。如果将$u$和$v$之间挖通，则$u$所在的连通块和$v$所在的连通块将会合并。如果以$u$作为根，$u$到起点的距离为$d$，则$v$到起点的距离为$(d+1)$。方程如下： f[s][u][d]=min\\lbrace f[s1][u][d]+f[s2][v][d+1]+w(u,v)*d\\rbrace其中： s1 \\cup s2=s,u\\in s1,v\\in s2,w(u,v)\\not= \\inf最终要求的答案即为$\\min_{1\\le i \\le n}f[(1&lt;&lt;n)-1][i][1]$，采用记忆化搜索实现。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142#pragma GCC optimize(3)#include &lt;bits/stdc++.h&gt;using namespace std;const int INF = 0x3f3f3f3f;int N, M;int w[13][13];int f[1&lt;&lt;13][13][13];inline int dp(int s, int u, int d) { if (f[s][u][d] != -1) return f[s][u][d]; if (s == (1 &lt;&lt; (u - 1))) return f[s][u][d] = 0; int&amp; ans = f[s][u][d] = INF; for (register int s1 = s; s1; s1 = (s1 - 1) &amp; s) { if (!(s1 &amp; (1 &lt;&lt; (u - 1)))) continue; for (register int v = 1; v &lt;= N; ++v) { if (!(s &amp; (1 &lt;&lt; (v - 1)))) continue; if (w[u][v] == INF) continue; int s2 = s ^ s1; ans = min(ans, dp(s1, u, d) + dp(s2, v, d + 1) + w[u][v] * d); } } return ans;}int main() { memset(w, 0x3f, sizeof(w)); memset(f, -1, sizeof(f)); scanf(\"%d%d\", &amp;N, &amp;M); for (register int i = 1; i &lt;= M; ++i) { int u, v, t; scanf(\"%d%d%d\", &amp;u, &amp;v, &amp;t); w[u][v] = w[v][u] = min(w[u][v], t); } int ans = INF; for (register int u = 1; u &lt;= N; ++u) { ans = min(ans, dp((1 &lt;&lt; N) - 1, u, 1)); } printf(\"%d\", ans); return 0;}","link":"/2019/06/30/solution-luogu-p3959/"},{"title":"题解-luogu-p3960列队","text":"题目链接 给定一个$n \\times m$的矩阵，每个点编号为$(i - 1) \\times m + j$每次抽取一个点，然后让队列先向左再向前，最后将这个点放在$(n,m)$的位置，告知每次离队点的位置，求离队点的编号 $1 \\le n,m,q \\le 3 \\times 10^5$ 感谢@oy的贡献 一道非常有意思的题。 假设我们有一个神奇的数据结构，它可以动态地维护一个长度为 $n$ 的队列，其初始元素为 $1,2,…,n$ 。该队列可以支持两种操作，第一种为删除队列的第 $k$ 项元素，执行“向前看齐”操作，并在队列的末尾补充 $n+1$ （以此类推）。第二种为查询队列的第 $k$ 项元素的数值。 拥有这样一个数据结构，本题就简单多了；观察到“向前看齐”命令只对最后一列产生影响，我们可以在每一行维护一个动态队列，最后一列用另一个动态队列单独处理。 如果出列的同学位于最后一列，则只需对最后一列进行一次删除操作即可；如果出列的同学不在最后一列，则需要对出列同学所在的那一行与最后一列同时进行操作。实现细节不再赘述。 现在我们来考虑一下如何实现神奇的动态队列。在本题的情况中，假设每个动态队列最多有 $Q$ 次删除操作，那么动态队列的时空复杂度必须只与 $Q$ 相关，否则 $O(n^2)$ 的时空复杂度无法承受。似乎这里可以用平衡树实现，而我采用了较为好写的动态开点权值线段树来维护动态队列。 初始状态，权值线段树下标为 $1,2,…,n$ 的节点大小均为 $1$ 。对于删除操作，我们只需将对应的权值大小减一，并在权值 $n+1$ 的大小加一即可。对于查询操作，只需在权值线段树中查询第 $k$ 小元素即为对应数值。实现细节同样不再赘述。 记得开 long long 。代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;bits/stdc++.h&gt;#define lson(u) (node[u].l)#define rson(u) (node[u].r)#define sum(u) (node[u].sum)using namespace std;typedef long long ll;const int MAXN = 300005;struct Node { int l, r, sum;}node[MAXN * 42];int cnt;int root[MAXN], size[MAXN];vector&lt;ll&gt; ins[MAXN];int N, M, Q, T;void modify(int&amp; u, int l, int r, int p, int val) { if (u == 0) u = ++cnt; if (l == r) { sum(u) += val; return; } int mid = (l + r) &gt;&gt; 1; if (p &lt;= mid) modify(lson(u), l, mid, p, val); else modify(rson(u), mid + 1, r, p, val); sum(u) = sum(lson(u)) + sum(rson(u));}int query(int u, int l, int r, int k) { if (l == r) return l; int mid = (l + r) &gt;&gt; 1; int lsum = sum(lson(u)); if (l &lt;= T) { lsum += (mid &gt; T) ? T - l + 1 : mid - l + 1; } if (k &lt;= lsum) return query(lson(u), l, mid, k); else return query(rson(u), mid + 1, r, k - lsum);}int main() { scanf(\"%d%d%d\", &amp;N, &amp;M, &amp;Q); int Case = Q; while (Case--) { int x, y; scanf(\"%d%d\", &amp;x, &amp;y); ll ans = 0, tmp = 0; if (y == M) { T = N; ans = query(root[N + 1], 1, N + Q, x); modify(root[N + 1], 1, N + Q, ans, -1); modify(root[N + 1], 1, N + Q, N + (++size[N + 1]), 1); if (ans &lt;= N) ans = ans * (ll)M; else ans = ins[N + 1][ans - N - 1]; ins[N + 1].push_back(ans); printf(\"%lld\\n\", ans); } else { T = M - 1; ans = query(root[x], 1, M + Q, y); modify(root[x], 1, M + Q, ans, -1); modify(root[x], 1, M + Q, M - 1 + (++size[x]), 1); if (ans &lt;= M - 1) ans += (ll)(x - 1) * M; else ans = ins[x][ans - M]; T = N; tmp = query(root[N + 1], 1, N + Q, x); modify(root[N + 1], 1, N + Q, tmp, -1); modify(root[N + 1], 1, N + Q, N + (++size[N + 1]), 1); if (tmp &lt;= N) tmp = tmp * (ll)M; else tmp = ins[N + 1][tmp - N - 1]; ins[N + 1].push_back(ans); ins[x].push_back(tmp); printf(\"%lld\\n\", ans); } } return 0;}","link":"/2019/09/24/solution-luogu-p3960/"},{"title":"题解-luogu-p4103大工程","text":"题目链接 给定一棵有 $n$ 个节点的树，边权为 $1$ 。共有 $q$ 次询问，每次给出 $k$ 个节点，求： $k$ 个节点间两两距离之总和；最短距离；最长距离。 $1\\le n \\le 1000000,1 \\le q \\le 1000000, \\Sigma{k}\\le 2 * n$ 感谢@tth37 的贡献 本题用到了一些点分治的思想。 考虑 $q=1$ 的情况。一种朴素的做法是：枚举当前节点的所有子节点，并计算子树间关键点形成的路径、更新答案。但是本题与一般点分治题目略有不同，我们可以通过预处理子树信息来优化点分治过程。 稍加观察可以发现，只需预处理每个子树中树根到关键点的最小距离、最大距离，以及子树中关键点的个数、所有关键点到树根的距离总和即可完成点分治全部过程，时间复杂度 $O(n)$ 。 对于 $q\\not=1$ 的情况，观察到 $\\Sigma{k}$ 与 $n$ 同阶，可以对每次查询建立一棵虚树，在虚树上点分治即可。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 1000005;typedef long long ll;struct Edge {int v, w; Edge(int a, int b) {v = a, w = b;}};struct Key {int u, dfn;}keys[MAXN];bool cmp(Key a, Key b) {return a.dfn &lt; b.dfn;}vector&lt;Edge&gt; G[MAXN], VT[MAXN];int N, Q, K;int f[MAXN][21], dep[MAXN], dfn[MAXN], dfn_idx;int lg[MAXN];bool h[MAXN];ll g[MAXN];int m[MAXN], n[MAXN];int c[MAXN];ll ans1;int ans2, ans3;inline void dfs0(int u, int fa) { dfn[u] = ++dfn_idx; dep[u] = dep[fa] + 1; f[u][0] = fa; for (int i = 1; i &lt;= lg[dep[u]]; ++i) f[u][i] = f[f[u][i - 1]][i - 1]; for (vector&lt;Edge&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = it -&gt; v; if (v == fa) continue; dfs0(v, u); }}void dfs1(int u) { g[u] = 0; c[u] = h[u]; m[u] = 0x3f3f3f3f; n[u] = -0x3f3f3f3f; if (h[u]) m[u] = n[u] = 0; for (vector&lt;Edge&gt;::iterator it = VT[u].begin(); it != VT[u].end(); it++) { int v = it -&gt; v, w = it -&gt; w; dfs1(v); c[u] += c[v]; g[u] += g[v] + 1ll * w * c[v]; m[u] = min(m[u], w + m[v]); n[u] = max(n[u], w + n[v]); }}void dfs2(int u) { ll sum = 0; int cnt = h[u]; int minn = 0x3f3f3f3f, maxx = -0x3f3f3f3f; if (h[u]) minn = maxx = 0; for (vector&lt;Edge&gt;::iterator it = VT[u].begin(); it != VT[u].end(); it++) { int v = it -&gt; v, w = it -&gt; w; ans1 += 1ll * sum * c[v] + 1ll * w * cnt * c[v] + 1ll * g[v] * cnt; ans2 = min(ans2, minn + w + m[v]); ans3 = max(ans3, maxx + w + n[v]); sum += g[v] + 1ll * c[v] * w; cnt += c[v]; minn = min(minn, w + m[v]); maxx = max(maxx, w + n[v]); dfs2(v); } h[u] = 0; VT[u].clear();}inline int Lca(int u, int v) { if (dep[u] &lt; dep[v]) swap(u, v); while (dep[u] &gt; dep[v]) u = f[u][lg[dep[u] - dep[v]]]; if (u == v) return u; for (int i = lg[dep[u]]; i &gt;= 0; --i) { if (f[u][i] != f[v][i]) u = f[u][i], v = f[v][i]; } return f[u][0];}int main() { for (register int i = 2; i &lt;= 1000000; ++i) lg[i] = lg[i &gt;&gt; 1] + 1; scanf(\"%d\", &amp;N); for (register int i = 1; i &lt; N; ++i) { int u, v; scanf(\"%d%d\", &amp;u, &amp;v); G[u].push_back(Edge(v, 1)); G[v].push_back(Edge(u, 1)); } dfs0(1, 0); scanf(\"%d\", &amp;Q); while (Q--) { scanf(\"%d\", &amp;K); for (register int i = 1; i &lt;= K; ++i) { int u; scanf(\"%d\", &amp;u); h[u] = 1; keys[i].u = u, keys[i].dfn = dfn[u]; } sort(keys + 1, keys + K + 1, cmp); stack&lt;int&gt; s; s.push(1); for (register int i = 1; i &lt;= K; ++i) { int u = keys[i].u; if (u == 1) continue; int lca = Lca(u, s.top()); while (s.top() != lca) { int tmp = s.top(); s.pop(); if (dfn[s.top()] &lt; lca) s.push(lca); VT[s.top()].push_back(Edge(tmp, dep[tmp] - dep[s.top()])); } s.push(u); } while (s.top() != 1) { int tmp = s.top(); s.pop(); VT[s.top()].push_back(Edge(tmp, dep[tmp] - dep[s.top()])); } dfs1(1); ans1 = ans3 = 0; ans2 = 0x3f3f3f3f; dfs2(1); printf(\"%lld %d %d\\n\", ans1, ans2, ans3); } return 0;}","link":"/2019/08/30/solution-luogu-p4103/"},{"title":"题解-luogu-p4175网络管理","text":"题目链接 给定一棵$n$个节点的树，进行$q$次操作：单点修改，或查询一条树链上的第$k$小值。 $n,q \\le 80000,0 \\le k \\le n$ 感谢@oy的贡献 思路：树链剖分+树状数组套主席树 考虑到权值线段树自带buff——整体二分，不难想到对树链上的权值线段树求和，并在合并后的权值线段树上求第 $k$ 大即可愉快地解决本题。 在树链上的求和操作可以用树剖加线性数据结构进行维护。本题需要支持的操作只有单点修改和区间查询，所以可以用树状数组套主席树维护 dfs 序上的信息。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123#include &lt;bits/stdc++.h&gt;using namespace std;#define id(x) (lower_bound(b + 1, b + L + 1, x) - b)#define rid(x) (b[x])#define lson(x) (node[x].l)#define rson(x) (node[x].r)#define sum(x) (node[x].sum)#define lowbit(x) (x &amp; (-x))const int MAXN = 80005 * 2;vector&lt;int&gt; G[MAXN];struct opt {int k, a, b;} op[MAXN];struct Node { int l, r, sum; Node() {l = r = sum = 0;}} node[MAXN * 80];int c[MAXN], cnt;int N, Q, L;int t[MAXN], b[MAXN];int q1[MAXN], q2[MAXN], len1, len2;int dep[MAXN], dfn[MAXN], f[MAXN], son[MAXN], top[MAXN], size[MAXN], dfn_idx;void insert(int&amp; u, int l, int r, int p, int val) { if (u == 0) u = ++cnt; sum(u) += val; if (l == r) return; int mid = (l + r) &gt;&gt; 1; if (p &lt;= mid) insert(lson(u), l, mid, p, val); else insert(rson(u), mid + 1, r, p, val);}void modify(int u, int p, int val) { for (; u &lt;= N; u += lowbit(u)) insert(c[u], 1, L, p, val);}void dfs1(int u, int fa) { dep[u] = dep[fa] + 1; f[u] = fa; size[u] = 1; for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; if (v == fa) continue; dfs1(v, u); if (size[v] &gt; size[son[u]]) son[u] = v; size[u] += size[v]; }}void dfs2(int u, int topc) { dfn[u] = ++dfn_idx; top[u] = topc; modify(dfn[u], t[u], 1); if (son[u]) dfs2(son[u], topc); for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; if (v == son[u] || v == f[u]) continue; dfs2(v, v); }}void pre_bin(int u, int* a, int&amp; len) { for (; u &gt;= 1; u -= lowbit(u)) a[++len] = c[u];}int pre(int u, int v) { len1 = len2 = 0; while (top[u] != top[v]) { if (dep[top[u]] &lt; dep[top[v]]) swap(u, v); pre_bin(dfn[u], q1, len1); pre_bin(dfn[top[u]] - 1, q2, len2); u = f[top[u]]; } if (dep[u] &lt; dep[v]) swap(u, v); pre_bin(dfn[u], q1, len1); pre_bin(dfn[v] - 1, q2, len2); return v;}int query(int l, int r, int k) { if (l == r) return l; int mid = (l + r) &gt;&gt; 1, rsum = 0; for (int i = 1; i &lt;= len1; ++i) rsum += sum(rson(q1[i])); for (int i = 1; i &lt;= len2; ++i) rsum -= sum(rson(q2[i])); if (k &lt;= rsum) { for (int i = 1; i &lt;= len1; ++i) q1[i] = rson(q1[i]); for (int i = 1; i &lt;= len2; ++i) q2[i] = rson(q2[i]); return query(mid + 1, r, k); } else { for (int i = 1; i &lt;= len1; ++i) q1[i] = lson(q1[i]); for (int i = 1; i &lt;= len2; ++i) q2[i] = lson(q2[i]); return query(l, mid, k - rsum); }}int main() { scanf(\"%d%d\", &amp;N, &amp;Q); for (register int i = 1; i &lt;= N; ++i) scanf(\"%d\", &amp;t[i]), b[++L] = t[i], c[i] = ++cnt; for (register int i = 1; i &lt; N; ++i) { int u, v; scanf(\"%d%d\", &amp;u, &amp;v); G[u].push_back(v), G[v].push_back(u); } for (register int i = 1; i &lt;= Q; ++i) { scanf(\"%d%d%d\", &amp;op[i].k, &amp;op[i].a, &amp;op[i].b); if (op[i].k == 0) b[++L] = op[i].b; } sort(b + 1, b + L + 1); L = unique(b + 1, b + L + 1) - b - 1; for (register int i = 1; i &lt;= N; ++i) t[i] = id(t[i]); dfs1(1, 0); dfs2(1, 1); for (register int i = 1; i &lt;= Q; ++i) { int k = op[i].k, a = op[i].a, b_ = op[i].b; if (k == 0) { b_ = id(b_); modify(dfn[a], t[a], -1); t[a] = b_; modify(dfn[a], t[a], 1); } else { int lca = pre(a, b_); int maxk = dep[a] + dep[b_] - dep[lca] * 2 + 1; if (maxk &lt; k) { puts(\"invalid request!\"); continue; } printf(\"%d\\n\", rid(query(1, L, k))); } } return 0;}","link":"/2019/07/21/solution-luogu-p4175/"},{"title":"题解-luogu-p4516潜入行动","text":"这是一个并不简单的背包类树形dp…… 很自然地想到状态定义：$f[u][k][0/1][0/1]$表示以$u$为根的子树中，总共选择$k$个结点，其中除了$u$以外的所有结点均被监听到，$u$结点选或不选，$u$结点是否被覆盖的情况下，一共有多少种方案。 状态转移看似十分麻烦。每个结点$u$都有许多子结点，很难统计出每个子结点的所有情况（似乎在组合数学的范畴）。但是我们可以用十分巧妙的树形背包来进行状态转移。树上背包的转移套路是： f[u][i+j]=combine(f[u][i],f[v][j])相当于每递归访问完一个子结点，就把子节点上的状态与当前已经处理的状态一一配对，保证不重不漏且兼顾效率。具体的转移方程为： f[u][i+j][0][0]=\\sum f[u][i][0][0]*f[v][j][0][1] f[u][i+j][1][0]=\\sum f[u][i][1][0]*(f[v][j][0][0]+f[v][j][0][1]) f[u][i+j][0][1]=\\sum (f[u][i][0][1]\\*(f[v][j][0][1]+f[v][j][1][1])+f[u][i][0][0]\\*f[v][j][1][1] f[u][i+j][1][1]=\\sum (f[u][i][1][0]\\*(f[v][j][1][0]+f[v][j][1][1])+f[u][i][1][1]\\*(f[v][j][0][0]+f[v][j][0][1]+f[v][j][1][0]+f[v][j][1][1]))具体实现时还应注意：因为阶段（即扫描子结点个数）的划分，在每次转移前都要先记录原始的$u$结点上的数据，否则会导致混乱。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int MAXN=100005;const int mod=1000000007;int N,K;int f[MAXN][105][2][2];int g[105][2][2];int size[MAXN];vector&lt;int&gt; G[MAXN];inline int Mod(ll x,ll y){ x%=mod,y%=mod; return (int)(x+y)%mod;}void dp(int u,int fa){ size[u]=1; f[u][0][0][0]=f[u][1][1][0]=1; for(vector&lt;int&gt;::iterator it=G[u].begin();it!=G[u].end();it++){ int v=*it; if(v==fa) continue; dp(v,u); for(register int i=0;i&lt;=min(size[u],K);++i){ g[i][0][0]=f[u][i][0][0],f[u][i][0][0]=0; g[i][0][1]=f[u][i][0][1],f[u][i][0][1]=0; g[i][1][0]=f[u][i][1][0],f[u][i][1][0]=0; g[i][1][1]=f[u][i][1][1],f[u][i][1][1]=0; } for(register int i=0;i&lt;=min(size[u],K);++i){ for(register int j=0;j&lt;=min(size[v],K-i);++j){ f[u][i+j][0][0]=Mod((ll)f[u][i+j][0][0],(ll)g[i][0][0]*(ll)f[v][j][0][1]); f[u][i+j][0][1]=Mod((ll)f[u][i+j][0][1],(ll)g[i][0][0]*(ll)f[v][j][1][1]+(ll)g[i][0][1]*((ll)f[v][j][1][1]+(ll)f[v][j][0][1])); f[u][i+j][1][0]=Mod((ll)f[u][i+j][1][0],(ll)g[i][1][0]*((ll)f[v][j][0][0]+(ll)f[v][j][0][1])); f[u][i+j][1][1]=Mod((ll)f[u][i+j][1][1],(ll)g[i][1][0]*((ll)f[v][j][1][0]+(ll)f[v][j][1][1])+(ll)g[i][1][1]*((ll)f[v][j][0][0]+(ll)f[v][j][0][1]+(ll)f[v][j][1][0]+(ll)f[v][j][1][1])); } } size[u]+=size[v]; }}int main(){ scanf(\"%d%d\",&amp;N,&amp;K); for(register int i=1;i&lt;N;++i){ int u,v; scanf(\"%d%d\",&amp;u,&amp;v); G[u].push_back(v); G[v].push_back(u); } dp(1,0); printf(\"%d\",(int)(f[1][K][0][1]+f[1][K][1][1])%mod); return 0;}","link":"/2019/03/28/solution-luogu-p4516/"},{"title":"题解-luogu-p4559列队","text":"题目链接 给定数轴上$n$个点，给出$m$条独立的指令，将编号为$[l,r]$ 的点集中到$[k,k+r-l]$的位置且这些点个点位置不能重合，求每次命令中移动的点的距离和的最小值（$n,m≤5×10^5, 1≤a_i,K≤10^6$） 感谢@oy的贡献 本题是主席树的一个简单应用。 阅读题目，不难得出贪心策略。在编号位于$[l,r]$的所有人中，其位置最靠前的跑到$K$位置，位置第二靠前的跑到$K+1$位置，以此类推，可以使体力值总和最小。正确性不给出证明。（不会证） 对于所有学生的位置序列，我们可以建立主席树，并可以用主席树的基本查询操作提取出区间为$[l,r]$的学生位置值域信息。 为了方便学生左右跑动时体力值的统计，我们可以在主席树上额外记录两个数值：$gl$和$gr$，分别表示当前节点对应的区间内所有学生跑动至左端点和右端点所消耗的体力值。在建树过程中即可对这两个变量进行统计，其中$gl$等于当前节点$u$的左儿子上的$gl$，加上$u$的右儿子上的$gl$，再加上右儿子上所有学生从右儿子的左端点跑到$u$的左端点所要消耗的体力值。（可以自己在数轴上模拟一下） 接下来设计查询函数。参数包括值域的左端点和右端点$l$和$r$，以及目标位置区间的左端点和右端点$ql$和$qr$。显然对于以下情况，函数可以直接通过计算得出答案： $r\\le ql$ 此时处于当前值域内的所有学生都要往右跑 $qr\\le l$ 此时处于当前值域内的所有学生都要往左跑 当前值域内没有学生 返回 $0$ 否则，必须将值域拆分，递归到左右子节点进行统计。 本题最绕的地方在于学生编号和学生位置是两个不同的东西，在设计查询函数时必须区分值域和编号的概念。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566// luogu-judger-enable-o2#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int MAXN=500005;const int L=1000005;int N,M;struct Node{ int l,r; ll gl,gr,sum;}node[L*22+5];int head[MAXN];int cnt;inline void build(Node&amp; u,int l,int r){ u.sum=u.gl=u.gr=0; if(l==r) return; int mid=(l+r)&gt;&gt;1; build(node[u.l=++cnt],l,mid); build(node[u.r=++cnt],mid+1,r);}inline void insert(Node c,Node&amp; u,int l,int r,int p){ u.sum=c.sum+1;u.gl=u.gr=0; if(l==r) return; int mid=(l+r)&gt;&gt;1; if(p&lt;=mid) insert(node[c.l],node[u.l=++cnt],l,mid,p),u.r=c.r; else insert(node[c.r],node[u.r=++cnt],mid+1,r,p),u.l=c.l; u.gl=node[u.l].gl+node[u.r].gl+node[u.r].sum*(mid-l+1); u.gr=node[u.r].gr+node[u.l].gr+node[u.l].sum*(r-mid);}inline ll query(Node x,Node y,int l,int r,ll ql,ll qr){ ll sum=y.sum-x.sum; ll gl=y.gl-x.gl,gr=y.gr-x.gr; if(sum==0) return 0; if(qr&lt;=l) return gl+(2*l-ql-qr)*(qr-ql+1)/2; if(ql&gt;=r) return gr+(ql+qr-2*r)*(qr-ql+1)/2; int mid=(l+r)&gt;&gt;1; ll lsum=node[y.l].sum-node[x.l].sum; return query(node[x.l],node[y.l],l,mid,ql,ql+lsum-1)+ query(node[x.r],node[y.r],mid+1,r,ql+lsum,qr);}int main(){ scanf(\"%d%d\",&amp;N,&amp;M); build(node[0],1,L); for(register int i=1;i&lt;=N;++i){ int a; scanf(\"%d\",&amp;a); insert(node[head[i-1]],node[head[i]=++cnt],1,L,a); } for(register int i=1;i&lt;=M;++i){ ll l,r,k; scanf(\"%lld%lld%lld\",&amp;l,&amp;r,&amp;k); printf(\"%lld\\n\",query(node[head[l-1]],node[head[r]],1,L,k,k+r-l)); } return 0;}","link":"/2019/04/10/solution-luogu-p4559/"},{"title":"题解-luogu-p5021赛道修建","text":"题目链接 给定一个有$n$个节点的树，在其中选出$m$条没有公共边的路径，并使得$m$条路径中最短路径的长度尽可能大。输出这个最短路径的长度。 $2\\le n \\le 50000,1\\le m\\le n-1 $ 题目要求使$m$条赛道中最短赛道的长度尽可能大，不难想到二分最短赛道的长度$len$，并判定是否能修建出$m$条赛道。 定义$f[u]$为自节点$u$向下延伸的不作为赛道的最长链长度。假设已知所有的$f[v]+w(u,v) (v\\in son(u))$（即自节点$u$向下延伸的所有链的长度），则我们应在保证这些链能组成最多赛道的前提下，使保留下来的$f[v]+w(u,v)$最大。 考虑贪心。对于$f[v]+w(u,v)\\ge len$的情况，可以直接将其作为一条赛道。而剩余的链，只能将它们两两拼接成赛道。由于需要使保留下来的$f[v]+w(u,v)$取最大值，所以我们可以优先使较短的链得到匹配，在剩余的无法匹配的链中取最值作为新的$f[u]$。 贪心操作可以用$multiset$实现。 代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 50005;struct Edge {int v, w;};vector&lt;Edge&gt; G[MAXN];int N, M, L, cnt;int f[MAXN];inline bool cmp(int a, int b) {return a &gt; b;}inline void dfs(int u, int fa) { multiset&lt;int&gt; s; for (vector&lt;Edge&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = it -&gt; v, w = it -&gt; w; if (v == fa) continue; dfs(v, u); if (f[v] + w &gt;= L) cnt++; else s.insert(f[v] + w); } while (!s.empty()) { multiset&lt;int&gt;::iterator it = s.begin(); s.erase(it); multiset&lt;int&gt;::iterator it1 = s.lower_bound(L - *it); if (it1 == s.end()) f[u] = max(f[u], *it); else { cnt++; s.erase(it1); } }}inline bool check() { memset(f, 0, sizeof(f)); cnt = 0; dfs(1, 0); if (cnt &gt;= M) return 1; return 0;}int main() { scanf(\"%d%d\", &amp;N, &amp;M); for (register int i = 1; i &lt; N; ++i) { int u, v, w; scanf(\"%d%d%d\", &amp;u, &amp;v, &amp;w); G[u].push_back((Edge){v, w}); G[v].push_back((Edge){u, w}); } int l = 0, r = 500000000; int ans = 0; while (l &lt;= r) { int mid = (l + r) &gt;&gt; 1; L = mid; if (check()) { ans = mid; l = mid + 1; } else r = mid - 1; } printf(\"%d\", ans); return 0;}","link":"/2019/07/13/solution-luogu-p5021/"},{"title":"题解-luogu-p5283异或粽子","text":"题目链接 给定一个长度为$n$的数组$a$，取$k$个各不相同的连续区间$[l,r]$ 使得这些区间所有元素的异或和的和最大，求这个最大值（$ 1 \\le n \\le 5 \\times 10^5,1\\le k \\le min(\\frac{n(n-1)}{2},2\\times 10^5),0\\le a_i \\le 4294967295$） 感谢@oy的贡献 分析题意，即找出$n$个数中互不相同且异或和最大的前$k$段区间。 用异或前缀和$s[i]$表示$a[1]\\oplus a[2]\\oplus … \\oplus a[i]$。根据异或运算的性质，区间$[l,r]$的异或和即为$s[r] \\oplus s[l-1]$。 将$s[1]$到$s[n]$依次插入$01trie$树中，每次找出对于固定的右端点$r$，与$s[r]$异或值最大的$s[l]$。显然，此次操作找到的是固定右端点为$r$时的最大区间异或和。 将每个不同的$r$值所对应的最大区间异或和插入堆中，显然堆顶的元素即为$n$个数中任意区间的最大异或和。取出堆顶元素，并同时得到这是以$r$为右端点的第$1$大区间异或和。向堆中插入以$r$为右端点的第$2$大区间异或和。 在查询以$r$为右端点的第$k$大区间异或和时，只需稍微更改在$01trie$树上查找的方式即可，与主席树查询区间第$k$小数的思想类似。由于需要访问$01trie$树的历史状态，因此$01trie$需要可持久化。 注意：以$r$为右端点的区间异或和一共只有$r$个，因此查询以$r$为右端点的第$r+1$大区间异或和是没有意义的。 另外，在将(1&lt;&lt;d)这样的式子转long long时，不能写成(long long)(1&lt;&lt;d)，而是((long long)1&lt;&lt;d)。 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int MAXN=500005;const int DEP=31;int N,M;ll ans,s[MAXN];struct State{ ll val; int r,k; bool operator &lt;(const State&amp; rhs) const {return val&lt;rhs.val;}};priority_queue&lt;State&gt; q;struct Node{ int son[2],sum;}trie[MAXN*(DEP+2)];int head[MAXN],cnt;inline void insert(Node c,Node&amp; u,ll val,int d){ u.sum=c.sum+1; if(d&lt;0) return; int x=(val&gt;&gt;d)&amp;1; u.son[!x]=c.son[!x]; insert(trie[c.son[x]],trie[u.son[x]=++cnt],val,d-1);}inline ll query(Node u,ll val,int d,int k){ if(d&lt;0) return 0; int x=(val&gt;&gt;d)&amp;1; int lsum=trie[u.son[!x]].sum; if(lsum&gt;=k) return ((ll)1&lt;&lt;d)+(ll)query(trie[u.son[!x]],val,d-1,k); return (ll)query(trie[u.son[x]],val,d-1,k-lsum);}int main(){ trie[0].son[0]=trie[0].son[1]=trie[0].sum=0; insert(trie[0],trie[head[0]=++cnt],0,DEP); scanf(\"%d%d\",&amp;N,&amp;M); for(register int i=1;i&lt;=N;++i){ ll a; scanf(\"%lld\",&amp;a); s[i]=s[i-1]^a; insert(trie[head[i-1]],trie[head[i]=++cnt],s[i],DEP); q.push((State){query(trie[head[i-1]],s[i],DEP,1),i,1}); } for(register int i=1;i&lt;=M;++i){ ans+=q.top().val; int r=q.top().r,k=q.top().k; q.pop(); if(k==r) continue; q.push((State){query(trie[head[r-1]],s[r],DEP,k+1),r,k+1}); } printf(\"%lld\",ans); return 0;} $p.s.$洛谷评测机有点小慢，不开O2会小概率发生TLE QwQ","link":"/2019/04/09/solution-luogu-p5283/"},{"title":"题解-luogu-p5290春节十二响","text":"题目链接 给定一棵有 $n$ 个节点的树，将树上所有节点分为若干组，其中每一组中的任意两个节点不能存在祖先-后代关系，每一组的权值为该组中所有节点权值的最大值，求所有组的权值总和最小值。 $1 \\le n \\le 200000$ 我感谢我自己 首先考虑树退化为链的情况。树根最多有两棵子树，树根需要被单独分为一段，其余段中不能出现同一棵子树内的两个点。 这时我们需要将左子树中的节点与右子树中的节点配对。可以证明，将左子树中的最大值与右子树中的最大值、左子树中的次大值与右子树中的次大值以此类推两两配对，可以使所有段的权值总和最小。 如此一来，两条链实则被合并成为一条链。同理，多条链也可以使用类似的方式合并为一条链。 因此，我们可以维护每个节点到叶子节点的一条等效链，并且要求高效地将两条链合并为一条新链。 不难看出，由于我们需要取最大值的性质，可以使用堆来维护链信息。即，在每个节点上建立一个堆，堆中存储从当前节点到叶子节点的等效链上所有权值信息。 接下来需要解决的即为链的合并即堆的合并问题。假设需要合并堆 $q1$ ，$q2$ 。 如果 $q1.size()&gt;q2.size()$，那么只需取出 $q1$ 的前 $q2.size()$ 项，并将它们与 $q2$ 中的所有元素取最大值即可。时间复杂度 $O(q2.size()\\log q2.size())$ 。 如果 $q1.size()&lt;q2.size()$，那么不仅需要取出 $q1$ 的所有项，并将它们与 $q2$ 中的前 $q1.size()$ 项取最大值，还需将 $q2$ 中剩余的元素插入 $q1$ 中。时间复杂度 $O(q2.size()\\log q2.size())$ 。 不难看出，将大堆合并进入小堆，时间复杂度在 $O(max(q1.size(),q2.size()))$ 级别。但如果换一种思路，将小堆合并进入大堆，时间复杂度就降到 $O(min(q1.size(),q2.size()))$ 级别。此方法与并查集的按秩合并有异曲同工之妙，被成为启发式合并。 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int N;vector&lt;int&gt; G[200005];int M[200005];priority_queue&lt;int&gt; q[200005];int tmp[200005], cnt;void dfs(int u) { for (vector&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) { int v = *it; dfs(v); cnt = 0; if (q[u].size() &lt; q[v].size()) swap(q[u], q[v]); while(q[v].size()) { tmp[++cnt] = max(q[u].top(), q[v].top()); q[u].pop(), q[v].pop(); } for (int i = 1; i &lt;= cnt; ++i) q[u].push(tmp[i]); } q[u].push(M[u]);}int main() { scanf(\"%d\", &amp;N); for (register int i = 1; i &lt;= N; ++i) scanf(\"%d\", &amp;M[i]); for (register int i = 2; i &lt;= N; ++i) { int f; scanf(\"%d\", &amp;f); G[f].push_back(i); } dfs(1); ll ans = 0; while (q[1].size()) ans += q[1].top(), q[1].pop(); printf(\"%lld\", ans); return 0;}","link":"/2019/09/12/solution-luogu-p5290/"},{"title":"题解-luogu-p5502最大公约数","text":"题目链接 咕咕咕 对于求解区间权值 $=value *length$ 的最值问题时，我们通常可以枚举区间左端点，然后高效地找出右端点更新答案。 朴素的想法是枚举右端点 $r\\in [l,n]$ 。根据显然的贪心策略，如果右端点在某一区间移动时，$\\gcd(a_l,a_{l+1},…,a_r)$ 保持不变，则右端点越大越好。 因此可以用倍增优化右端点的确定。但是在倍增的过程中，需要多次查询区间最大公约数；我们可以用ST表的思路对序列预处理，做到 $O(1)$ 复杂度查询。 但是，如果已经确定左端点 $l$ ，不同的右端点选取会对应许多不同的最大公约数值，那么该算法的复杂度将无法承受。 稍加观察，可以发现当左端点确定时，右端点右移一个单位，原子段的最大公约数要么维持不变；要么变为原最大公约数的一个约数。换言之，当左端点确定时，不同的右端点最多对应 $\\log_2n$ 个不同的最大公约数值。算法复杂度得以控制在 $O(n(\\log n)^2)$ 。 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b);}int T, N;ll ans;ll a[100005];ll st[100005][18];int lg[100005];inline ll query(int l, int r) { int k = lg[r - l + 1]; return gcd(st[l][k], st[r - (1 &lt;&lt; k) + 1][k]);}int main() { lg[1] = 0; for (register int i = 2; i &lt;= 100000; ++i) lg[i] = lg[i &gt;&gt; 1] + 1; scanf(\"%d\", &amp;N); for (register int i = 1; i &lt;= N; ++i) scanf(\"%lld\", &amp;st[i][0]); for (register int j = 1; j &lt;= lg[N]; ++j) for (register int i = 1; i + (1 &lt;&lt; j) - 1 &lt;= N; ++i) st[i][j] = gcd(st[i][j - 1], st[i + (1 &lt;&lt; (j - 1))][j - 1]); for (register int l = 1; l &lt;= N; ++l) { int r = l; while (r &lt;= N) { ll cur = query(l, r); for (register int i = lg[N]; i &gt;= 0; --i) { if (r + (1 &lt;&lt; i) &lt;= N &amp;&amp; query(l, r + (1 &lt;&lt; i)) == cur) r += (1 &lt;&lt; i); } ans = max(ans, cur * (r - l + 1)); r += 1; } } printf(\"%lld\", ans); return 0;}","link":"/2019/08/23/solution-luogu-p5502/"},{"title":"题解-luogu-uva11021麻球繁衍","text":"题目链接 有 $k$ 只麻球，每只活一天就会死亡，临死前可能会生出一些新的麻球。具体来说，生 $i$ 只麻球的概率为 $P_i$ 。给定 $m$ ，求 $m$ 天后所有麻球均死亡的概率。 我感谢我自己 每只麻球均可视为一个独立的问题。设 $f[i]$ 表示第一天只有 $1$ 只麻球，在第 $i$ 天它及它的后代全部死亡的概率。由全概率公式，有 f[i]=P_0+P_1f[i-1]+P_2f[i-1]^2+P_3f[i-1]^3+...+P_{n-1}f[i-1]^{n-1}其中 $P_jf[i-j]^j$ 的含义是这个麻球生了 $j$ 个后代，并且它们在 $i-1$ 天后全部死亡的概率。由于一开始有 $k$ 只麻球，最终答案为 $f[m]^k$ 。 代码如下： 1234567891011121314151617181920212223242526#include&lt;bits/stdc++.h&gt;using namespace std;int T;int N, K, M;double P[1005];double f[1005];int main() { cin &gt;&gt; T; for (register int Case = 1; Case &lt;= T; ++Case) { cin &gt;&gt; N &gt;&gt; K &gt;&gt; M; for (register int i = 0; i &lt; N; ++i) cin &gt;&gt; P[i]; f[0] = 0; for (register int i = 1; i &lt;= M; ++i) { f[i] = 0; for (register int j = 0; j &lt; N; ++j) f[i] += P[j] * pow(f[i - 1], j); } cout &lt;&lt; \"Case #\" &lt;&lt; Case &lt;&lt; \": \"; cout &lt;&lt; fixed &lt;&lt; setprecision(8) &lt;&lt; pow(f[M], K) &lt;&lt; endl; } return 0;}","link":"/2019/08/23/solution-luogu-uva11021/"},{"title":"题解-luogu-p5503灯塔","text":"题目链接 咕咕咕 由于根号的存在，本题并没有什么明显的单调性，不能通过二分或单调队列实现。 本题的关键在于问题转化。记 $l_i$ 表示在山峰 $i$ 上建灯塔，并使得山峰 $1…i$ 全部被照亮的最小高度。 h_j\\le h_i+l_i - \\sqrt{i-j} (1\\le j\\le i) h_j+\\sqrt{i-j}-h_i\\le l_i(1\\le j\\le i) l_i=\\max_{1\\le j\\le i}\\lbrace h_j+\\lceil (\\sqrt{i-j}) \\rceil \\rbrace-h_i这样 ${l}$ 数组的求解即转化为区间求解最值问题，然而 $\\max$ 函数中的 $\\lceil (\\sqrt{i-j}) \\rceil$ 似乎有些棘手。然而观察到当 $\\lceil (\\sqrt{i-j}) \\rceil$ 相等时，只有该区间内最大的 $h_j$ 才会对答案产生贡献。因此我们可以枚举 $\\lceil (\\sqrt{i-j}) \\rceil$ 的值，求出对应的 $j$ 区间内 $h_j$ 的最值作为 $l_i$ 的候选答案。 $r_i$ 的定义与 $l_i$ 类似，最终的 $p_i$ 即为 $\\max \\lbrace l_i,r_i\\rbrace$ 。 求解区间最值可以用 ST 表实现。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;bits/stdc++.h&gt;using namespace std;int st[100005][18];int lg[100005];int power[320];int p[100005];int N;inline int query(int l, int r) { int s = lg[r - l + 1]; return max(st[l][s], st[r - (1 &lt;&lt; s) + 1][s]);}int main() { lg[1] = 0; for (register int i = 2; i &lt;= 100000; ++i) lg[i] = lg[i &gt;&gt; 1] + 1; for (register int i = 1; i &lt;= 319; ++i) { power[i] = i * i; } scanf(\"%d\", &amp;N); for (register int i = 1; i &lt;= N; ++i) scanf(\"%d\", &amp;st[i][0]); for (register int j = 1; j &lt;= lg[N]; ++j) for (register int i = 1; i + (1 &lt;&lt; j) - 1 &lt;= N; ++i) st[i][j] = max(st[i][j - 1], st[i + (1 &lt;&lt; (j - 1))][j - 1]); for (register int i = 1; i &lt;= N; ++i) { int delta = 0, l = i, r = i; while (l &gt;= 1) { p[i] = max(p[i], query(l, r) + delta - st[i][0]); r = l - 1, l = i - power[++delta]; } if (r &gt;= 1) p[i] = max(p[i], query(1, r) + delta - st[i][0]); } for (register int i = N; i &gt;= 1; --i) { int delta = 0, l = i, r = i; while (r &lt;= N) { p[i] = max(p[i], query(l, r) + delta - st[i][0]); l = r + 1, r = i + power[++delta]; } if (l &lt;= N) p[i] = max(p[i], query(l, N) + delta - st[i][0]); } for (register int i = 1; i &lt;= N; ++i) printf(\"%d\\n\", p[i]); return 0;}","link":"/2019/08/26/solution-luogu-p5503/"},{"title":"模板-常数优化","text":"实用技巧 减少函数参数传递，开全局变量 血的教训 memset 实在是太慢了！避免大数组的多次 memset，可以在程序的其他位置（如遍历）顺手将数组清空 血的教训 快速读入123456789void readint() {}template&lt;class T1, class ...T2&gt;void readint(T1 &amp;i, T2&amp;... rest){ i=0;char c;bool f=false; while (!isdigit(c=getchar())) f=c=='-'; do i=(i&lt;&lt;3)+(i&lt;&lt;1)+c-'0'; while (isdigit(c=getchar())); if (f) i=-i; readint(rest...);} 快速输出1暂无","link":"/2019/08/26/template-optimization/"},{"title":"解题报告-NOIP2016提高组初赛","text":"NOIP 2016 提高组初赛试题 不完全解读！ 完结~ 第 4 题 与二进制小数 0.1 相等的八进进制数是（ ）。 A. 0.8 B. 0.4 C. 0.2 D. 0.1 二进制与八进制、十六进制之间可以使用技巧进行转化 第 5 题 以比较作为基本运算，在 N 个数中找最小数的最少运算次数为（ ）。 A. N B. N−1 C. N^2 D. logN 第二个数至第 N 个数依次比较 第 6 题 表达式 a*(b+c)-d 的后缀表达形式为（ ）。 A. abcd*+- B. abc+*d- C. abc*+d- D. -+*abcd 中缀表达式对应二叉树的中序遍历；后缀表达式对应后根遍历 第 8 题 G 是一个非连通简单无向图，共有 28 条边，则该图至少有（ ）个顶点。 A. 10 B. 9 C. 8 D. 7 对于连通的简单无向图，点数为 n，则最多有 n(n-1)/2 条边。 对于本题，构造 8 个节点的完全图再附带一个节点即可 第 9 题 某计算机的 CPU 和内存之间的地址总线宽度是 32 位（bit），这台计算机最多可以使用（ ）的内存。 A. 2GB B. 4GB C. 8GB D. 16GB 可以寻址的最大地址为 2^32 B。 2^32 B = 2 ^ 22 KB = 2 ^ 12 MB = 4 GB 第 11 题 有 7 个一模一样的苹果，放到 3 个一样的盘子中，一共有（ ）种放法。 A. 7 B. 8 C. 21 D. 3^7 暴力枚举 第 13 题 周末小明和爸爸妈妈三个人一起想动手做三道菜。小明负责洗菜、爸爸负责切菜、妈妈负责炒菜。假设做每道菜的顺序都是：先洗菜 10 分钟，然后切 菜 10 分钟，最后炒菜 10 分钟。那么做一道菜需要 30 分钟。注意：两道不同的菜的相同步骤不可以同时进行。例如第一道菜和第二道的菜不能同时洗，也不能同时切。那么做完三道菜的最短时间需要（ ）分钟。 A. 90 B. 60 C. 50 D. 40 问题转化，求拓扑排序最长路 第 16 题 以下属于无线通信技术的有（ ）。 A. 蓝牙 B. WiFi C. GPRS D. 以太网 GPRS: 通用分组无线服务（英语：General Packet Radio Service，缩写：GPRS）是GSM移动电话用户可以使用的一种移动数据业务/技术。它经常被描述成“2.5G”，意指这项技术介于第二代（2G）与第三代（3G）移动通讯技术之间。它是利用GSM网络中未使用的TDMA信道，提供中速的数据传输服务。起初有人想通过扩展GPRS来覆盖其他标准，只是这些网络都正在转而使用GSM标准，这样GSM就成了GPRS唯一能够使用的网络。GPRS在Release 97之后被集成进GSM标准，起先它是由ETSI标准化，但是现在已经移交3GPP负责。——中文维基百科 以太网（英语：Ethernet）是一种计算机局域网技术。IEEE组织的IEEE 802.3标准制定了以太网的技术标准，它规定了包括物理层的连线、电子信号和介质访问层协议的内容。以太网是当前应用最普遍的局域网技术，取代了其他局域网标准如令牌环、FDDI和ARCNET。 以太网的标准拓扑结构为总线型拓扑，但当前的快速以太网（100BASE-T、1000BASE-T标准）为了减少冲突，将能提高的网络速度和使用效率最大化，使用交换机（Switch hub）来进行网络连接和组织。如此一来，以太网的拓扑结构就成了星型；但在逻辑上，以太网仍然使用总线型拓扑和CSMA/CD（Carrier Sense Multiple Access/Collision Detection，即载波多重访问/碰撞侦测）的总线技术。 ——中文维基百科 第 21 题 一个 1×8 的方格图形（不可旋转）用黑、白两种颜色填涂每个方格。如果每个方格只能填涂一种颜色，且不允许两个黑格相邻，共有_种填涂方案。 $f[i][0/1]$ 表示前 $i$ 个方格，最后一个方格为 黑/白 的方案数。 化简状态转移方程发现 $f[i][0]$ 为斐波那契数列。 第 24 题 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;iostream&gt; using namespace std;int main(){ char a[100][100], b[100][100]; string c[100]; string tmp; int n, i = 0, j = 0, k = 0, total_len[100], length[100][3]; cin &gt;&gt; n; getline(cin, tmp); for (i = 0; i &lt; n; i++) { getline(cin, c[i]); total_len[i] = c[i].size(); } for (i = 0; i &lt; n; i++) { j = 0; while (c[i][j] != ':') { a[i][k] = c[i][j]; k = k + 1; j++; } length[i][1] = k - 1; a[i][k] = 0; k = 0; for (j = j + 1; j &lt; total_len[i]; j++) { b[i][k] = c[i][j]; k = k + 1; } length[i][2] = k - 1; b[i][k] = 0; k = 0; } for (i = 0; i &lt; n; i++) { if (length[i][1] &gt;= length[i][2]) cout &lt;&lt; \"NO,\"; else { k = 0; for (j = 0; j &lt; length[i][2]; j++) { if (a[i][k] == b[i][j]) k = k + 1; if (k &gt; length[i][1]) break; } if (j == length[i][2]) cout &lt;&lt; \"NO,\"; else cout &lt;&lt; \"YES,\"; } } cout &lt;&lt; endl; return 0;} 输入：3AB:ACDEbFBkBDAR:ACDBrTSARS:Severe Atypical Respiratory Syndrome输出：_ （注：输入各行前后均无空格） 观察程序，操作目的为判断冒号前的内容是否依次在冒号后的字符串中出现 第 25 题 123456789101112131415161718192021222324#include &lt;iostream&gt;using namespace std;int lps(string seq, int i, int j){ int len1, len2; if (i == j) return 1; if (i &gt; j) return 0; if (seq[i] == seq[j]) return lps(seq, i + 1, j - 1) + 2; len1 = lps(seq, i, j - 1); len2 = lps(seq, i + 1, j); if (len1 &gt; len2) return len1; return len2;}int main(){ string seq = \"acmerandacm\"; int n = seq.size(); cout &lt;&lt; lps(seq, 0, n - 1) &lt;&lt; endl; return 0;} 输出：_ 观察程序。找出最多的形如 axxxbxxxcxxxcxxxbxxxa中出现的字符 第 26 题 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;int map[100][100];int sum[100], weight[100];int visit[100];int n;void dfs(int node){ visit[node] = 1; sum[node] = 1; int v, maxw = 0; for (v = 1; v &lt;= n; v++) { if (!map[node][v] || visit[v]) continue; dfs(v); sum[node] += sum[v]; if (sum[v] &gt; maxw) maxw = sum[v]; } if (n - sum[node] &gt; maxw) maxw = n - sum[node]; weight[node] = maxw;}int main(){ memset(map, 0, sizeof(map)); memset(sum, 0, sizeof(sum)); memset(weight, 0, sizeof(weight)); memset(visit, 0, sizeof(visit)); cin &gt;&gt; n; int i, x, y; for (i = 1; i &lt; n; i++) { cin &gt;&gt; x &gt;&gt; y; map[x][y] = 1; map[y][x] = 1; } dfs(1); int ans = n, ansN = 0; for (i = 1; i &lt;= n; i++) if (weight[i] &lt; ans) { ans = weight[i]; ansN = i; } cout &lt;&lt; ansN &lt;&lt; \" \" &lt;&lt; ans &lt;&lt; endl; return 0;} 输入：111 21 32 42 52 63 77 87 116 99 10输出：_ 求树的重心。 第 28 题 (交通中断）有一个小国家，国家内有 n 座城市和 m 条双向的道路，每条道路连接着两座不同的城市。其中 1 号城市为国家的首都。由于地震频繁可能导致某一个城市与外界交通全部中断。这个国家的首脑想知道，如果只有第i(i&gt;1)个城市因地震而导致交通中断时，首都到多少个城市的最短路径长度会发生改变。如果因为无法通过第 i 个城市而导致从首都出发无法到达某个城市，也认为到达该城市的最短路径长度改变。 对于每一个城市 i，假定只有第 i 个城市与外界交通中断，输出有多少个 城市会因此导致到首都的最短路径长度改变。 我们采用邻接表的方式存储图的信息，其中 head[x]表示顶点 x 的第一条 边的编号，next[i]表示第 i 条边的下一条边的编号，point[i]表示第 i 条边的终点，weight[i]表示第 i 条边的长度。（第一空 2 分，其余 3 分） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;#define MAXN 6000#define MAXM 100000#define infinity 2147483647int head[MAXN], next[MAXM], point[MAXM], weight[MAXM];int queue[MAXN], dist[MAXN], visit[MAXN];int n, m, x, y, z, total = 0, answer;void link(int x, int y, int z){ total++; next[total] = head[x]; head[x] = total; point[total] = y; weight[total] = z; total++; next[total] = head[y]; head[y] = total; point[total] = x; weight[total] = z;}int main(){ int i, j, s, t; cin &gt;&gt; n &gt;&gt; m; for (i = 1; i &lt;= m; i++) { cin &gt;&gt; x &gt;&gt; y &gt;&gt; z; link(x, y, z); } for (i = 1; i &lt;= n; i++) dist[i] = infinity; (1); queue[1] = 1; visit[1] = 1; s = 1; t = 1; // 使用 SPFA 求出第一个点到其余各点的最短路长度 while (s &lt;= t) { x = queue[s % MAXN]; j = head[x]; while (j != 0) { if ((2)) { dist[point[j]] = dist[x] + weight[j]; if (visit[point[j]] == 0) { t++; queue[t % MAXN] = point[j]; visit[point[j]] = 1; } } j = next[j]; } (3); s++; } for (i = 2; i &lt;= n; i++) { queue[1] = 1; memset(visit, 0, sizeof(visit)); visit[1] = 1; s = 1; t = 1; while (s &lt;= t) { // 判断最短路长度是否不变 x = queue[s]; j = head[x]; while (j != 0) { if (point[j] != i &amp;&amp; (4) &amp;&amp; visit[point[j]] == 0) { (5); t++; queue[t] = point[j]; } j = next[j]; } s++; } answer = 0; for (j = 1; j &lt;= n; j++) answer += 1 - visit[j]; cout &lt;&lt; i &lt;&lt; \":\" &lt;&lt; answer - 1 &lt;&lt; endl; } return 0;} 第 5 空：如果被断掉的边在最短路上 即 dis[u]+weight=dis[v] 则最短路长度发生改变","link":"/2019/10/11/solution-noip2016pre/"},{"title":"解题报告-NOIP2017提高组初赛","text":"NOIP 2017 提高组初赛试题 完全解读！ 第 1 题 从（ ）年开始，NOIP 竞赛将不再支持 Pascal 语言。 A. 2020 B. 2021 C. 2022 D. 2023 送命题。 第 2 题 在 8 位二进制补码中，10101011 表示的数是十进制下的（ ）。 A. 43 B. -85 C. -43 D. -84 原码 补码 反码 正数 符号(0)+数值表示法 原码 原码 负数 符号(1)+数值表示法 符号位之外各位取反 符号位之外各位取反，最低位加1 [x]_{补}=10101011 [x]_{反}=10101010 [x]_{原}=11010101 x=-85 第 3 题 分辨率为 1600x900、16 位色的位图，存储图像信息所需的空间为（ ）。 A. 2812.5KB B. 4218.75KB C. 4320KB D. 2880KB 8 \\ \\text{bit}= 1\\ \\text{byte(B)}\\\\ 1024\\ \\text{B}=1\\ \\text{KB}\\\\ 1024\\ \\text{KB}=1\\ \\text{MB}\\\\ 1024\\ \\text{MB}=1\\ \\text{GB} 第 4 题 2017 年 10 月 1 日是星期日，1949 年 10 月 1 日是（ ）。 A. 星期三 B. 星期日 C. 星期六 D. 星期二 2017-&gt;2016：星期日-&gt;星期六 2016-&gt;2015：星期六-&gt;星期四 2015-&gt;2014：星期四-&gt;星期三 …… 1950-&gt;1949：星期日-&gt;星期六 第 5 题 设 G 是有 n 个结点、m 条边（n ≤ m）的连通图，必须删去 G 的（ ）条边， 才能使得 G 变成一棵树。 A. m – n + 1 B. m - n C. m + n + 1 D. n – m + 1 树有 n - 1 条边 第 6 题 若某算法的计算时间表示为递推关系式：T(N) = 2T(N / 2) + N log NT(1) = 1则该算法的时间复杂度为（ ）。 A. O(N) B. O(NlogN) C. O(Nlog^2N) D. O(N^2) $T$ 共有 $\\log N$ 次递归调用，每次复杂度为 $O(N\\log N)$ 第 7 题 表达式 a * (b + c) * d 的后缀形式是（ ）。 A. a b c d * + * B. a b c + * d * C. a * b c + * d D. b + c * a * d 普通表达式为中序遍历，后缀表达式为可能的后序遍历 第 8 题 由四个不同的点构成的简单无向连通图的个数是（ ）。 A. 32 B. 35 C. 38 D. 41 由四个点构成的简单无向连通图，它们之间只可能有 6 条不同的边。将四个点按序排列，这 6 条边可分为纵横向及斜向两种边。 纵横边有 1 条 该情况下，无向图有 4 种摆放位置。要使得图连通，斜向边只有 1 种摆法。 ans += 4 * 1 纵横边有 2 条 两纵/两横 ans += 2 * 3 一纵一横 ans += 4 * 2 纵横边有 3 条 ans += 4 * 4 纵横边有 4 条 ans += 1 * 4 第 9 题 将 7 个名额分给 4 个不同的班级，允许有的班级没有名额，有（ ）种不 同的分配方案。 A. 60 B. 84 C. 96 D. 120 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 插板法。考虑在七个名额间插入 3 个板子，将它们隔成 4 份。插板的方案数即为分配方案数。 C_{8+3-1}^{3}=120 第 10 题 若 f[0] = 0, f[1] = 1, f[n + 1] = (f[n] + f[n - 1]) / 2，则随着 i 的增大，f[i]将接近于( )。 A. 1/2 B. 2/3 C. (√5 − 1)/2 D. 1 还是不会 第 11 题 设 A 和 B 是两个长为 n 的有序数组，现在需要将 A 和 B 合并成一个排好序的 数组，请问任何以元素比较作为基本运算的归并算法最坏情况下至少要做 （ ）次比较。 A. n^2 B. nlogn C. 2n D. 2n-1 构造 A、B 分别为 [1,3,5,7…] [2,4,6,8,…] 此时需要 2n-1 次比较 第 12 题 在 n（n ≥ 3）枚硬币中有一枚质量不合格的硬币（质量过轻或质量过重）,如果只有一架天平可以用来称重且称重的硬币数没有限制，下面是找出这枚不合格的硬币的算法。请把 a-c 三行代码补全到算法中。a. A ← X ∪ Yb. A ← Zc. n ← |A| 12345678910算法 Coin(A, n)k ← ⌊n/3⌋将 A 中硬币分成 X，Y，Z 三个集合，使得|X| = |Y| = k,|Z| = n - 2kif W(X) ≠ W(Y) //W(X), W(Y)分别为 X 或 Y 的重量then _____else __________if n&gt;2 then goto 1if n=2 then 任取 A 中1枚硬币与拿走硬币比较，若不等，则它不合格； 若相等，则 A 中剩下的硬币不合格if n=1 then A 中硬币不合格 正确的填空顺序是（ ）。 A. b, c, a B. c, b, a C. c, a, b D. a, b, c 如果 X 和 Y 重量不等，则不合格的硬币在 X ∪ Y 中；否则在 Z 中。 第 13 题 有正实数构成的数字三角形排列形式如图所示。第一行的数为 a11；第二行的数从左到右依次为 a21, a22；… 第 n 行的数为 an1, an2, …, ann。从 a11 开始，每一行的数 aij 只有两条边可以分别通向 下一行的两个数 a(i+1)j 和 a(i+1)(j+1)。用动态规划算 法找出一条从 a11 向下通到 an1, an2, …, ann 中某个数的路径，使得该路径上的数之和达到最大。 令 C[i,j]是从 a11 到 aij 的路径上的数的最大和，并且 C[i,0]=C[0,j]=0, 则 C[i,j]=（ ）。 A. max{C[i-1,j-1], C[i-1,j]} + aij B. C[i-1,j-1] + C[i-1,j] C. max{C[i-1,j-1], C[i-1,j]} + 1 D. max{C[i,j-1],C[i-1,j]} + aij 数字三角形动态规划。 $f[i][j]=max(f[i-1][j],f[i-1][j-1])+a[i][j]$ 第 14 题 小明要去南美洲旅游，一共乘坐三趟航班才能到达目的地，其中第 1 个航班 准点的概率是 0.9，第 2 个航班准点的概率为 0.8, 第 3 个航班准点的概率为 0.9。如果存在第 i 个（i=1,2）航班晚点，第 i+1 个航班准点，则小明将赶不 上第 i+1 个航班，旅行失败；除了这种情况，其他情况下旅行都能成功。请 问小明此次旅行成功的概率是（ ）。 A. 0.5 B. 0.648 C. 0.72 D. 0.74 航班1 航班2 航班3 准点 0.9 0.8 0.9 晚点 0.1 0.2 0.1 枚举。共 8 种情况。 第 15 题 欢乐喷球：儿童游乐场有个游戏叫“欢乐喷球”，正方形场地中心能不断喷出彩色乒乓球，以场地中心为圆心还有一 个圆形轨道，轨道上有一列小火车在匀速运动，火车有六节车厢。假设乒乓球等概率落到正方形场地的每个地点，包括火车车厢。小朋友玩这个游戏时，只能坐在同一个火车车厢里，可以在自己的车厢里捡落在该车厢内的所有乒乓球，每个人每次游戏有三分钟时间，则一个小朋友独自玩一次游戏期望可以得到（ ）个乒乓球。假设乒乓球喷出的速度为 2 个/秒，每节车厢的面积是整个场地面积的 1/20。 A. 60 B. 108 C. 18 D. 20 2*3*60/20=18 第 16 题 以下排序算法在最坏情况下时间复杂度最优的有（ ）。 A. 冒泡排序 B. 快速排序 C. 归并排序 D. 堆排 期望复杂度 最劣复杂度 最优复杂度 是否稳定 冒泡排序 / $O(n^2)$ $O(n^2)$ 稳定 插入排序 / $O(n^2)$ $O(n)$ 稳定 选择排序 / $O(n^2)$ $O(n^2)$ 不稳定 快速排序 $O(n\\log n)$ $O(n^2)$ / 不稳定 归并排序 / $O(n\\log n)$ $O(n\\log n)$ 稳定 堆排序 / $O(n\\log n)$ $O(n\\log n)$ 不稳定 基数排序 / $O(nd)$ $O(nd)$ 稳定 希尔排序 / $O(n\\log^2 n)$ $O(n^{3/2})$ 不稳定 第 17 题 对于入栈顺序为 a, b, c, d, e, f, g 的序列，下列（ ）不可能是合法的出栈序 列。 A. a, b, c, d, e, f, g B. a, d, c, b, e, g, f C. a, d, b, c, g, f, e D. g, f, e, d, c, b, a 略 第 18 题 下列算法中，（ ）是稳定的排序算法。 A. 快速排序 B. 堆排序 C. 希尔排序 D. 插入排序 见 第 16 题 第 19 题 以下是面向对象的高级语言的有（ ）。 A. 汇编语言 B. C++ C. Fortran D. Java 面向对象语言：simula 67, Smalltalk, EIFFEL, C++, Java, C# 等 第 20 题 以下和计算机领域密切相关的奖项有（ ）。 A. 奥斯卡奖 B. 图灵奖 C. 诺贝尔奖 D. 王选奖 图灵奖（英语：ACM A.M. Turing Award），又译杜林奖、A.M.图灵奖，是计算机协会（ACM）于1966年设立的奖项，专门奖励对计算机事业作出重要贡献的个人。其名称取自世界计算机科学的先驱、英国科学家、曼彻斯特大学教授艾伦·图灵（A.M. Turing），这个奖设立目的之一是纪念这位现代计算机科学的奠基者。获奖者必须是在计算机领域具有持久而重大的先进性的技术贡献。大多数获奖者是计算机科学家。是计算机界最负盛名的奖项，有“计算机界诺贝尔奖”之称。——中文维基百科 中国计算机学会王选奖 是中国计算机学会于2005年起设立的奖项。该奖项最初名为中国计算机学会创新奖，2006年起更为现名，以纪念著名计算机科学家王选。——中文维基百科 第 21 题 如右图所示，共有 13 个格子。对任何一个格子进行一 次操作，会使得它自己以及与它上下左右相邻的格子中 的数字改变（由 1 变 0，或由 0 变 1）。现在要使得所 有的格子中的数字都变为 0，至少需要_次操作。 模拟即可。略 第 22 题 如下图所示，A 到 B 是连通的。假设删除一条细的边的代价是 1，删除一条粗的边的代价是 2，要让 A、B 不连通，最小代价是( )（2 分），最小代价的不同方案数是( )（3 分）。（只要有一条删除的边不同，就是不同的方案） 最小割=最大流，易得最大流为 4。 模拟，共 9 种不同的方案。 第 23 题 12345678910111213141516171819#include &lt;iostream&gt; using namespace std; int g(int m, int n, int x) { int ans = 0; int i; if (n == 1) return 1; for (i = x; i &lt;= m / n; i++) ans += g(m - i, n - 1, i); return ans; } int main() { int t, m, n; cin &gt;&gt; m &gt;&gt; n; cout &lt;&lt; g(m, n, 0) &lt;&lt; endl; return 0; } 输入：8 4输出：_ 大 模 拟 推出来 15 第 24 题 12345678910111213141516171819202122232425262728#include &lt;iostream&gt; using namespace std; int main() { int n, i, j, x, y, nx, ny; int a[40][40]; for (i = 0; i &lt; 40; i++) for (j = 0; j &lt; 40; j++) a[i][j] = 0; cin &gt;&gt; n; y = 0; x = n - 1; n = 2 * n - 1; for (i = 1; i &lt;= n * n; i++) { a[y][x] = i; ny = (y - 1 + n) % n; nx = (x + 1) % n; if ((y == 0 &amp;&amp; x == n - 1) || a[ny][nx] != 0) y = y + 1; else { y = ny; x = nx; } } for (j = 0; j &lt; n; j++) cout &lt;&lt; a[0][j] &lt;&lt; \" \"; cout &lt;&lt; endl; return 0; } 输入：3输出：____ 小套路题。构造数字幻方，并输出最上方一行。 第 25 题 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;iostream&gt;using namespace std;int n, s, a[100005], t[100005], i;void mergesort(int l, int r){ if (l == r) return; int mid = (l + r) / 2; int p = l; int i = l; int j = mid + 1; mergesort(l, mid); mergesort(mid + 1, r); while (i &lt;= mid &amp;&amp; j &lt;= r) { if (a[j] &lt; a[i]) { s += mid - i + 1; t[p] = a[j]; p++; j++; } else { t[p] = a[i]; p++; i++; } } while (i &lt;= mid) { t[p] = a[i]; p++; i++; } while (j &lt;= r) { t[p] = a[j]; p++; j++; } for (i = l; i &lt;= r; i++) a[i] = t[i];}int main(){ cin &gt;&gt; n; for (i = 1; i &lt;= n; i++) cin &gt;&gt; a[i]; mergesort(1, n); cout &lt;&lt; s &lt;&lt; endl; return 0;} 输入：62 6 3 4 5 1输出：_ 小套路题。归并排序求逆序对。 第 26 题 123456789101112131415161718192021222324252627282930#include &lt;iostream&gt;using namespace std;int main(){ int n, m; cin &gt;&gt; n &gt;&gt; m; int x = 1; int y = 1; int dx = 1; int dy = 1; int cnt = 0; while (cnt != 2) { cnt = 0; x = x + dx; y = y + dy; if (x == 1 || x == n) { ++cnt; dx = -dx; } if (y == 1 || y == m) { ++cnt; dy = -dy; } } cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; endl; return 0;} 输入 1：4 3输出 1：（2 分）输入 2：2017 1014输出 2：（3 分）输入 3：987 321输出 3：____（3 分） 样例 1：构造两个数列 [1,2,3,4,3,2,1,2,3,4,3,2,1,…], [1,2,3,2,1,2,3,2,1,…]。求这两个数列最靠前的位置，使得 $a_i=1,b_i=1$或$a_i=x,b_i=1$或$a_i=1,b_i=x$或$a_i=x,b_i=y$。 第 27 题 （大整数除法）给定两个正整数p和q，其中p不超过10100， q不超过100000， 求 p 除以 q 的商和余数。（第一空 2 分，其余 3 分） 输入：第一行是 p 的位数 n，第二行是正整数 p，第三行是正整数 q。 输出：两行，分别是 p 除以 q 的商和余数。 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;iostream&gt;using namespace std;int p[100];int n, i, q, rest;char c;int main(){ cin &gt;&gt; n; for (i = 0; i &lt; n; i++) { cin &gt;&gt; c; p[i] = c - '0'; } cin &gt;&gt; q; rest = (1); i = 1; while ((2) &amp;&amp; i &lt; n) { rest = rest * 10 + p[i]; i++; } if (rest &lt; q) cout &lt;&lt; 0 &lt;&lt; endl; else { cout &lt;&lt; (3); while (i &lt; n) { rest = (4); i++; cout &lt;&lt; rest / q; } cout &lt;&lt; endl; } cout &lt;&lt; (5) &lt;&lt; endl; return 0;} ​ 第 28 题 （最长路径）给定一个有向无环图，每条边长度为 1，求图中的最长路径长度。（第五空 2 分，其余 3 分） 输入：第一行是结点数 n（不超过 100）和边数 m，接下来 m 行，每行两个整数 a， b，表示从结点 a 到结点 b 有一条有向边。结点标号从 0 到(n-1)。 输出：最长路径长度。 提示：先进行拓扑排序，然后按照拓扑序计算最长路径。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;iostream&gt;using namespace std;int n, m, i, j, a, b, head, tail, ans;int graph[100][100]; // 用邻接矩阵存储图int degree[100]; // 记录每个结点的入度int len[100]; // 记录以各结点为终点的最长路径长度int queue[100]; // 存放拓扑排序结果int main(){ cin &gt;&gt; n &gt;&gt; m; for (i = 0; i &lt; n; i++) for (j = 0; j &lt; n; j++) graph[i][j] = 0; for (i = 0; i &lt; n; i++) degree[i] = 0; for (i = 0; i &lt; m; i++) { cin &gt;&gt; a &gt;&gt; b; graph[a][b] = 1; (1); } tail = 0; for (i = 0; i &lt; n; i++) if ((2)) { queue[tail] = i; tail++; } head = 0; while (tail &lt; n - 1) { for (i = 0; i &lt; n; i++) if (graph[queue[head]][i] == 1) { (3); if (degree[i] == 0) { queue[tail] = i; tail++; } } (4); } ans = 0; for (i = 0; i &lt; n; i++) { a = queue[i]; len[a] = 1; for (j = 0; j &lt; n; j++) if (graph[j][a] == 1 &amp;&amp; len[j] + 1 &gt; len[a]) len[a] = len[j] + 1; if ((5)) ans = len[a]; } cout &lt;&lt; ans &lt;&lt; endl; return 0;} DAG 上的动态规划。 \\text{len[u]}=\\max\\{\\text{len[v]}+1\\},(v,u)\\in E","link":"/2019/09/29/solution-noip2017pre/"}],"tags":[{"name":"动态规划","slug":"动态规划","link":"/tags/动态规划/"},{"name":"背包","slug":"背包","link":"/tags/背包/"},{"name":"树形dp","slug":"树形dp","link":"/tags/树形dp/"},{"name":"FFT/NTT","slug":"FFT-NTT","link":"/tags/FFT-NTT/"},{"name":"字符串","slug":"字符串","link":"/tags/字符串/"},{"name":"高斯消元","slug":"高斯消元","link":"/tags/高斯消元/"},{"name":"卡特兰数","slug":"卡特兰数","link":"/tags/卡特兰数/"},{"name":"数学","slug":"数学","link":"/tags/数学/"},{"name":"乘法逆元","slug":"乘法逆元","link":"/tags/乘法逆元/"},{"name":"素数","slug":"素数","link":"/tags/素数/"},{"name":"数论","slug":"数论","link":"/tags/数论/"},{"name":"群论","slug":"群论","link":"/tags/群论/"},{"name":"Pólya计数","slug":"Polya计数","link":"/tags/Polya计数/"},{"name":"数据结构","slug":"数据结构","link":"/tags/数据结构/"},{"name":"可持久化trie","slug":"可持久化trie","link":"/tags/可持久化trie/"},{"name":"主席树","slug":"主席树","link":"/tags/主席树/"},{"name":"线段树","slug":"线段树","link":"/tags/线段树/"},{"name":"点分治","slug":"点分治","link":"/tags/点分治/"},{"name":"动态点分治","slug":"动态点分治","link":"/tags/动态点分治/"},{"name":"树链剖分","slug":"树链剖分","link":"/tags/树链剖分/"},{"name":"dfs序","slug":"dfs序","link":"/tags/dfs序/"},{"name":"平衡树","slug":"平衡树","link":"/tags/平衡树/"},{"name":"树状数组","slug":"树状数组","link":"/tags/树状数组/"},{"name":"虚树","slug":"虚树","link":"/tags/虚树/"},{"name":"最近公共祖先","slug":"最近公共祖先","link":"/tags/最近公共祖先/"},{"name":"栈","slug":"栈","link":"/tags/栈/"},{"name":"二分图匹配","slug":"二分图匹配","link":"/tags/二分图匹配/"},{"name":"0/1分数规划","slug":"0-1分数规划","link":"/tags/0-1分数规划/"},{"name":"二分答案","slug":"二分答案","link":"/tags/二分答案/"},{"name":"哈希(hash)","slug":"哈希-hash","link":"/tags/哈希-hash/"},{"name":"异或","slug":"异或","link":"/tags/异或/"},{"name":"矩阵","slug":"矩阵","link":"/tags/矩阵/"},{"name":"强连通分量","slug":"强连通分量","link":"/tags/强连通分量/"},{"name":"概率","slug":"概率","link":"/tags/概率/"},{"name":"启发式合并","slug":"启发式合并","link":"/tags/启发式合并/"},{"name":"std::map","slug":"std-map","link":"/tags/std-map/"},{"name":"生成函数","slug":"生成函数","link":"/tags/生成函数/"},{"name":"组合计数","slug":"组合计数","link":"/tags/组合计数/"},{"name":"离散化","slug":"离散化","link":"/tags/离散化/"},{"name":"博弈论","slug":"博弈论","link":"/tags/博弈论/"},{"name":"搜索","slug":"搜索","link":"/tags/搜索/"},{"name":"计数dp","slug":"计数dp","link":"/tags/计数dp/"},{"name":"数学期望","slug":"数学期望","link":"/tags/数学期望/"},{"name":"容斥原理","slug":"容斥原理","link":"/tags/容斥原理/"},{"name":"单调队列","slug":"单调队列","link":"/tags/单调队列/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"贪心","slug":"贪心","link":"/tags/贪心/"},{"name":"排序","slug":"排序","link":"/tags/排序/"},{"name":"前缀和","slug":"前缀和","link":"/tags/前缀和/"},{"name":"倍增","slug":"倍增","link":"/tags/倍增/"},{"name":"树上差分","slug":"树上差分","link":"/tags/树上差分/"},{"name":"逆元","slug":"逆元","link":"/tags/逆元/"},{"name":"组合数","slug":"组合数","link":"/tags/组合数/"},{"name":"堆","slug":"堆","link":"/tags/堆/"},{"name":"最短路","slug":"最短路","link":"/tags/最短路/"},{"name":"树上前缀和","slug":"树上前缀和","link":"/tags/树上前缀和/"},{"name":"网络流","slug":"网络流","link":"/tags/网络流/"},{"name":"状态压缩","slug":"状态压缩","link":"/tags/状态压缩/"},{"name":"差分约束系统","slug":"差分约束系统","link":"/tags/差分约束系统/"},{"name":"树套树","slug":"树套树","link":"/tags/树套树/"},{"name":"二叉堆","slug":"二叉堆","link":"/tags/二叉堆/"},{"name":"ST算法","slug":"ST算法","link":"/tags/ST算法/"}],"categories":[{"name":"算法学习","slug":"算法学习","link":"/categories/算法学习/"},{"name":"数论专题","slug":"算法学习/数论专题","link":"/categories/算法学习/数论专题/"},{"name":"公告","slug":"公告","link":"/categories/公告/"},{"name":"CF游记","slug":"CF游记","link":"/categories/CF游记/"},{"name":"题目列表","slug":"题目列表","link":"/categories/题目列表/"},{"name":"计划","slug":"计划","link":"/categories/计划/"},{"name":"题解","slug":"题解","link":"/categories/题解/"},{"name":"LibreOJ","slug":"题解/LibreOJ","link":"/categories/题解/LibreOJ/"},{"name":"计蒜客","slug":"题解/计蒜客","link":"/categories/题解/计蒜客/"},{"name":"雅礼集训","slug":"题解/LibreOJ/雅礼集训","link":"/categories/题解/LibreOJ/雅礼集训/"},{"name":"模板","slug":"模板","link":"/categories/模板/"},{"name":"解题报告","slug":"解题报告","link":"/categories/解题报告/"}]}