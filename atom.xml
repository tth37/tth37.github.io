<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tth37&#39;s Blog</title>
  
  <subtitle>Think twice, Code once</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tth37.cn/"/>
  <updated>2019-12-01T17:30:21.054Z</updated>
  <id>https://tth37.cn/</id>
  
  <author>
    <name>tth37</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「NOI2014」动物园</title>
    <link href="https://tth37.cn/2019/12/02/solution-loj-2246/"/>
    <id>https://tth37.cn/2019/12/02/solution-loj-2246/</id>
    <published>2019-12-01T17:15:35.000Z</published>
    <updated>2019-12-01T17:30:21.054Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/2246" target="_blank" rel="noopener">#2246. 「NOI2014」动物园</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>题目概括征集中~</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>回顾一下我们在 <a href="https://tth37.cn/2019/12/01/algorithm-exkmp/">扩展 KMP</a> 算法中求出的 $\text{next}$ 函数：$\text{next}[i]$ 表示后缀 $i$ 即 $T[i..|T|]$ 与 $T$ 的最长公共前缀。 </p><p>如果我们对读入的字符串已经求出了 $\text{next}$ 数组，那么这题就迎刃而解了。</p><p>首先，我们不考虑 <em>前后缀不可重叠</em> 的限制，尝试计算 $\text{num}$ 数组。观察字符串 $S$ 的每一个后缀 $i$，不难发现这些后缀将对 $\text{num}[i..i+\text{next}[i]-1]$ 产生贡献。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 3 4</span><br><span class="line">a b a b a</span><br><span class="line"></span><br><span class="line">a    a b    a b a</span><br><span class="line">|    | |    | | |</span><br><span class="line">a    a b    a b a</span><br></pre></td></tr></table></figure><p>如果考虑 <em>前后缀不可重叠</em> 的限制条件，可以发现后缀 $i$ 不会对 $i\times 2$ 及以后的 $\text{num}$ 产生贡献。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 3 4</span><br><span class="line">a b a b a</span><br><span class="line"></span><br><span class="line">a    a b    a b a</span><br><span class="line">|    | |    X X X</span><br><span class="line">a    a b    a b a</span><br></pre></td></tr></table></figure><p>只需对 $\text{num}$ 数组进行差分即可。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> next next233</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> next[MAXN], num[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exKMP_pre</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *T)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(T);</span><br><span class="line">    next[<span class="hljs-number">0</span>] = n;</span><br><span class="line">    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (p + <span class="hljs-number">1</span> &lt; n &amp;&amp; T[p] == T[p + <span class="hljs-number">1</span>]) p++;</span><br><span class="line">    next[<span class="hljs-number">1</span>] = p;</span><br><span class="line">    <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">2</span>; x &lt; n; ++x) &#123;</span><br><span class="line">        p = k + next[k] - <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> l = next[x - k];</span><br><span class="line">        <span class="hljs-keyword">if</span> (x + l &lt;= p) next[x] = l;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> j = p - x + <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-number">0</span>) j = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">while</span> (x + j &lt; n &amp;&amp; T[x + j] == T[j]) j++;</span><br><span class="line">            next[x] = j;</span><br><span class="line">            k = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> T, ans;</span><br><span class="line"><span class="hljs-keyword">char</span> a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="hljs-keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="hljs-built_in">memset</span>(next, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(next));</span><br><span class="line">        <span class="hljs-built_in">memset</span>(num, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(num));</span><br><span class="line">        <span class="hljs-built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        exKMP_pre(a);</span><br><span class="line">        <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(a);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (next[i]) &#123;</span><br><span class="line">                num[i] ++;</span><br><span class="line">                num[min(i + next[i], i &lt;&lt; <span class="hljs-number">1</span>)]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            num[i] += num[i - <span class="hljs-number">1</span>];</span><br><span class="line">            ans = <span class="hljs-number">1l</span>l * ans * (num[i] + <span class="hljs-number">1</span>) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/2246&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#2246. 「NOI2014」动物园&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;题目概括征集中~&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="KMP" scheme="https://tth37.cn/tags/KMP/"/>
    
      <category term="差分" scheme="https://tth37.cn/tags/%E5%B7%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>扩展 KMP</title>
    <link href="https://tth37.cn/2019/12/01/algorithm-exkmp/"/>
    <id>https://tth37.cn/2019/12/01/algorithm-exkmp/</id>
    <published>2019-12-01T15:43:05.000Z</published>
    <updated>2019-12-01T16:41:14.378Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文源自计蒜客课件，<strong>切勿外传！</strong></p></blockquote><p>扩展 KMP 能在 $O(|S|+|T|)$ 时间复杂度内处理出字符串 $S$ 的所有后缀与字符串 $T$ 的最长公共前缀。</p><p>之所以称为扩展 KMP，是因为其思想和 KMP 算法很类似。</p><a id="more"></a><h3 id="text-next-函数"><a href="#text-next-函数" class="headerlink" title="$\text{next}$ 函数"></a>$\text{next}$ 函数</h3><p>记 $\text{next}[i]$ 表示后缀 $i$ 即 $T[i..|T|]$ 与 $T$ 的最长公共前缀。 </p><p>例如：</p><table><thead><tr><th align="center">数组索引</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th></tr></thead><tbody><tr><td align="center">字符串数组</td><td align="center">a</td><td align="center">a</td><td align="center">a</td><td align="center">b</td><td align="center">a</td><td align="center">a</td><td align="center">a</td><td align="center">a</td><td align="center">b</td></tr><tr><td align="center">$\text{next}$ 数组</td><td align="center">9</td><td align="center">2</td><td align="center">1</td><td align="center">0</td><td align="center">3</td><td align="center">4</td><td align="center">2</td><td align="center">1</td><td align="center">0</td></tr></tbody></table><p>注意 $\text{next}$ 数组是对于 <strong>模式串 $T$</strong> 构建的。</p><h3 id="如何获取-text-next-函数"><a href="#如何获取-text-next-函数" class="headerlink" title="如何获取 $\text{next}$ 函数"></a>如何获取 $\text{next}$ 函数</h3><p>假设 $\text{next}[i](0\le i&lt;x)$ 的值都已经求出，现在要求 $\text{next}[x]$。</p><p>假设 $p=\max\lbrace i+\text{next}[i]-1\rbrace$ 对于所有 $0&lt; i &lt; x$，我们找到 $i+next[i]-1$ 的最大值，令 $k$ 为这个最大值对应的 $i$，令 $p$ 为 $k+\text{next}[k]-1$，$p$ 就是我们目前已知的匹配到的最远位置。</p><p>根据定义我们可以得到： $T[k..p]=T[0..\text{next}[k]-1]$，如下图所示蓝色部分：</p><p><img src="https://res.jisuanke.com/img/upload/20180516/6cb6bc2387e42ba0a7ee4dcfe9332b9eb0b58f37.png" alt></p><p>现在我们要求 $T[x..n-1]$ 与 $T[0..n-1]$ 的最长公共前缀。</p><p>由 $T[k..p]=T[0..\text{next}[k]-1]$ 得：</p><p>$T[x..p]=T[x-k..\text{next}[k]-1]$，如下图所示红色部分：</p><p><img src="https://res.jisuanke.com/img/upload/20180516/0dd52d39385ff16ee85cc915742fc3d1c62ae173.png" alt></p><p>设 $l=\text{next}[x-k]$，根据下图，可以得到：</p><p>$T[0..l-1]=T[x-k..x-k+l-1]=T[x..x+l-1]$，如下图所示黄色部分：</p><p><img src="https://res.jisuanke.com/img/upload/20180516/d9cb7344732ed21100f545c2b38119074d6bf7d2.png" alt></p><p>也就是说，如果图中黄色部分小于红色部分，也就是 $l&lt;p-x+1$ 即 $x+l\le p$，那么我们可以确定 $\text{next}[x]=l$。否则，我们从 $p-x+1$ 和 $p+1$ 位置开始逐一比较，求出 $\text{next}[x]$ 的值。</p><p>由于在这个过程中， $p$ 满足不下降性质，因此总体时间复杂度为 $O(n)$。</p><h3 id="获取-text-next-函数的代码实现"><a href="#获取-text-next-函数的代码实现" class="headerlink" title="获取 $\text{next}$ 函数的代码实现"></a>获取 $\text{next}$ 函数的代码实现</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exKMP_pre</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *T)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(T);</span><br><span class="line">    next[<span class="hljs-number">0</span>] = n;</span><br><span class="line">    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (p + <span class="hljs-number">1</span> &lt; n &amp;&amp; T[p] == T[p + <span class="hljs-number">1</span>]) p++;</span><br><span class="line">    next[<span class="hljs-number">1</span>] = p;</span><br><span class="line">    <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">2</span>; x &lt; n; ++x) &#123;</span><br><span class="line">        p = k + next[k] - <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> l = next[x - k];</span><br><span class="line">        <span class="hljs-keyword">if</span> (x + l &lt;= p) next[x] = l;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> j = p - x + <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-number">0</span>) j = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">while</span> (x + j &lt; n &amp;&amp; T[x + j] == T[j]) j++;</span><br><span class="line">            next[x] = j;</span><br><span class="line">            k = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决原问题"><a href="#解决原问题" class="headerlink" title="解决原问题"></a>解决原问题</h3><p>记 $\text{extend}[i]$ 表示字符串 $S$ 的第 $i$ 个后缀和 $T$ 的最长公共前缀。假设 $\text{extend}[i](0\le i&lt;x)$ 已经求出，现在需要计算 $\text{extend}[x]$。</p><p>已知：$S[k..p]=T[0..\text{extend}[k]]$，求 $S[x..n]$ 与 $T[0..m]$ 的最长公共前缀。解法与计算 $\text{next}$ 的方法类似，记录 $p=i+\text{extend[i]}-1$ 的最大值。</p><p><img src="https://res.jisuanke.com/img/upload/20180516/761b7f45f24395bab2e469d658b7353672480a4e.png" alt></p><p>根据红色部分的等价，我们可以利用 $\text{next}[x-k]$ 得到黄色部分等价性，剩下的分析就和求 $\text{next}$ 的过程一样了。</p><h3 id="获取-text-extend-函数的代码实现"><a href="#获取-text-extend-函数的代码实现" class="headerlink" title="获取 $\text{extend}$ 函数的代码实现"></a>获取 $\text{extend}$ 函数的代码实现</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exKMP</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *S, <span class="hljs-keyword">char</span> *T)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(T), m = <span class="hljs-built_in">strlen</span>(S);</span><br><span class="line">    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (p &lt; m &amp;&amp; p &lt; n &amp;&amp; S[p] == T[p]) p++;</span><br><span class="line">    extend[<span class="hljs-number">0</span>] = p;</span><br><span class="line">    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span>; x &lt; m; ++x) &#123;</span><br><span class="line">        p = k + extend[k] - <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> l = next[x - k];</span><br><span class="line">        <span class="hljs-keyword">if</span> (x + l &lt;= p) extend[x] = l;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> j = p - x + <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-number">0</span>) j = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">while</span> (x + j &lt; m &amp;&amp; j &lt; n &amp;&amp; S[x + j] == T[j]) j++;</span><br><span class="line">            extend[x] = j;</span><br><span class="line">            k = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文源自计蒜客课件，&lt;strong&gt;切勿外传！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;扩展 KMP 能在 $O(|S|+|T|)$ 时间复杂度内处理出字符串 $S$ 的所有后缀与字符串 $T$ 的最长公共前缀。&lt;/p&gt;
&lt;p&gt;之所以称为扩展 KMP，是因为其思想和 KMP 算法很类似。&lt;/p&gt;
    
    </summary>
    
      <category term="算法学习" scheme="https://tth37.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="字符串" scheme="https://tth37.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="KMP" scheme="https://tth37.cn/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>「CEOI2018」云计算</title>
    <link href="https://tth37.cn/2019/11/23/solution-loj-3182/"/>
    <id>https://tth37.cn/2019/11/23/solution-loj-3182/</id>
    <published>2019-11-23T14:52:04.000Z</published>
    <updated>2019-11-24T15:34:08.088Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/3182" target="_blank" rel="noopener">#3182. 「CEOI2018」云计算</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>题目概括征集中~ 球球你再帮我写几篇吧 TAT @oykz2333</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><blockquote><p>这题也太巧妙了叭！ ——tth37</p></blockquote><p>考虑<strong>类似背包</strong>的动态规划。记 $f[i]$ 表示满足订单后恰好剩余 $i$ 个核心的最大利润。</p><p>先不考虑时钟频率的限制条件，则问题可以转化为普通背包问题：将计算机的价格视为负数，将订单的核心数视为负数，采用背包问题的状态转移即可。</p><p>如果考虑到时钟频率的限制，则需要满足：在将每个订单放入背包之前，必须将所有时钟频率大于等于该订单的计算机放入背包中。</p><p>将计算机和订单按照时钟频率排序后，依次加入背包即可。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">2005</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> c, f, v;</span><br><span class="line">    <span class="hljs-keyword">bool</span> type;</span><br><span class="line">&#125;a[MAXN * <span class="hljs-number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Node a, Node b)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (a.f != b.f) <span class="hljs-keyword">return</span> a.f &gt; b.f;</span><br><span class="line">    <span class="hljs-keyword">return</span> a.type &lt; b.type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, tot;</span><br><span class="line">ll f[MAXN * <span class="hljs-number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;a[i].c, &amp;a[i].f, &amp;a[i].v), a[i].type = <span class="hljs-number">0</span>, tot += a[i].c;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;a[n + i].c, &amp;a[n + i].f, &amp;a[n + i].v), a[n + i].type = <span class="hljs-number">1</span>;</span><br><span class="line">    sort(a + <span class="hljs-number">1</span>, a + n + m + <span class="hljs-number">1</span>, cmp);</span><br><span class="line">    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0xcf</span>, <span class="hljs-keyword">sizeof</span>(f));</span><br><span class="line">    f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + m; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (a[i].type == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = tot; j &gt;= a[i].c; --j)</span><br><span class="line">                f[j] = max(f[j], f[j - a[i].c] - a[i].v);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= tot - a[i].c; ++j)</span><br><span class="line">                f[j] = max(f[j], f[j + a[i].c] + a[i].v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= tot; ++i)</span><br><span class="line">        ans = max(ans, f[i]);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld"</span>, ans);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3182&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#3182. 「CEOI2018」云计算&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;题目概括征集中~ 球球你再帮我写几篇吧 TAT @oykz2333&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="动态规划" scheme="https://tth37.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="背包" scheme="https://tth37.cn/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>「雅礼集训 2018 Day4」Magic</title>
    <link href="https://tth37.cn/2019/11/23/solution-loj-6503/"/>
    <id>https://tth37.cn/2019/11/23/solution-loj-6503/</id>
    <published>2019-11-22T17:43:34.000Z</published>
    <updated>2019-11-26T16:45:05.966Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/6503" target="_blank" rel="noopener">#6503. 「雅礼集训 2018 Day4」Magic</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>题目概括征集中~</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>由于题意中<strong>本质不同的方案</strong>不是特别好处理，我们可以在每张卡片上标号，将计算出的答案乘上 $\prod_{i=1}^m\frac{1}{a_i!}$ 即可。</p><p>考虑容斥。记 $f[i]$ 为<strong>至少有 $i$ 个魔法对</strong>的方案数，则答案为 $\sum_{i=k}^n(-1)^{i-k}\times{i\choose k}\times f[i]$。</p><p>注意：<a href="https://tth37.cn/2019/11/22/solution-loj-3106/">「TJOI2019」唱、跳、rap 和篮球</a> 即为本题 $k=0$ 的特例。</p><p>考虑如何计算 $f[i]$。设第一种颜色至少有 $i_1$ 个魔法对，第二种颜色至少有 $i_2$ 个魔法对……以此类推。考虑以下构造序列的方法：第 $j$ 种颜色保留 $i_j$ 张卡片作为预留卡片，将剩余的卡片任意排列，然后依次将所有预留的卡片插入到原序列中<strong>与之颜色相同的卡片的后面</strong>。不难发现，按照该方法构造序列的方案数为 $(n-k)!\times\prod_{j=1}^m{a_j\choose i_j}\times \frac{(a_j-1)!}{(a_j-i_j-1)!}$，并且该序列中至少有 $\sum_{j=1}^mi_j$ 个魔法对。</p><p>因此，得到 $f[i]$ 的计算方法：<br>$$<br>f[i]=\sum_{i_1=0}^{a_1-1}\sum_{i_2=0}^{a_2-1}…\sum_{i_m=0}^{a_m-1}[i_1+i_2+…+i_m=i] (n-i)!\times\prod_{j=1}^m{a_j\choose i_j}\times \frac{(a_j-1)!}{(a_j-i_j-1)!}<br>$$<br>注意到这是一个 $m$ 维卷积的形式，但是如果用暴力生成函数 + NTT 计算，复杂度为 $O(mn\log n)$，不能通过本题。我们可以用类似<strong>启发式合并</strong>的策略，交换多项式乘法运算顺序，每次将两个<strong>阶数最小</strong>的多项式相乘，即可将复杂度控制在 $O(m\log^2 n)$。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">100005</span>, MAXM = <span class="hljs-number">20005</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> ll MOD = <span class="hljs-number">998244353</span>, G = <span class="hljs-number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a, ll k)</span> </span>&#123;</span><br><span class="line">    ll ret = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (k) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) ret = ret * a % MOD;</span><br><span class="line">        a = a * a % MOD;</span><br><span class="line">        k &gt;&gt;= <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">namespace</span> FFT &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n, r[MAXN &lt;&lt; <span class="hljs-number">1</span>];</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NTT</span><span class="hljs-params">(ll *a, <span class="hljs-keyword">int</span> op)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (; (<span class="hljs-number">1</span> &lt;&lt; k) &lt; n; ++k);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            r[i] = r[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span> | (i &amp; <span class="hljs-number">1</span>) &lt;&lt; (k - <span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (i &lt; r[i]) swap(a[i], a[r[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">2</span>; l &lt;= n; l &lt;&lt;= <span class="hljs-number">1</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> m = l &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">            ll w = qpow(G, (MOD - <span class="hljs-number">1</span>) / l);</span><br><span class="line">            <span class="hljs-keyword">if</span> (op == <span class="hljs-number">-1</span>) w = qpow(w, MOD - <span class="hljs-number">2</span>);</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += l) &#123;</span><br><span class="line">                ll wk = <span class="hljs-number">1</span>;</span><br><span class="line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; ++j, wk = wk * w % MOD) &#123;</span><br><span class="line">                    ll p = a[i + j], q = wk * a[i + j + m] % MOD;</span><br><span class="line">                    a[i + j] = (p + q) % MOD;</span><br><span class="line">                    a[i + j + m] = (p - q + MOD) % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFT</span><span class="hljs-params">(ll *a)</span> </span>&#123;</span><br><span class="line">        NTT(a, <span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">IDFT</span><span class="hljs-params">(ll *a)</span> </span>&#123;</span><br><span class="line">        NTT(a, <span class="hljs-number">-1</span>);</span><br><span class="line">        ll inv = qpow(n, MOD - <span class="hljs-number">2</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)</span><br><span class="line">            a[i] = a[i] * inv % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> m, n, k;</span><br><span class="line"><span class="hljs-keyword">int</span> a[MAXM];</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;ll&gt; b[MAXM &lt;&lt; <span class="hljs-number">1</span>];</span><br><span class="line">priority_queue&lt;pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; q;</span><br><span class="line">ll x[MAXN &lt;&lt; <span class="hljs-number">1</span>], y[MAXN &lt;&lt; <span class="hljs-number">1</span>], ans;</span><br><span class="line">ll fac[MAXN], inv[MAXN], facinv[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> fac[n] * facinv[k] % MOD * facinv[n - k] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;m, &amp;n, &amp;k);</span><br><span class="line">    fac[<span class="hljs-number">0</span>] = facinv[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    fac[<span class="hljs-number">1</span>] = inv[<span class="hljs-number">1</span>] = facinv[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        fac[i] = fac[i - <span class="hljs-number">1</span>] * i % MOD;</span><br><span class="line">        inv[i] = (MOD - MOD / i) * inv[MOD % i] % MOD;</span><br><span class="line">        facinv[i] = facinv[i - <span class="hljs-number">1</span>] * inv[i] % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; a[i]; ++j)</span><br><span class="line">            b[i].push_back(C(a[i], j) * fac[a[i] - <span class="hljs-number">1</span>] % MOD * facinv[a[i] - j - <span class="hljs-number">1</span>] % MOD);</span><br><span class="line">        q.push(make_pair(-b[i].size(), i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> cnt = m;</span><br><span class="line">    <span class="hljs-keyword">while</span> (q.size() &gt; <span class="hljs-number">1</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> id1 = q.top().second, sz1 = -q.top().first;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="hljs-keyword">int</span> id2 = q.top().second, sz2 = -q.top().first;</span><br><span class="line">        q.pop();</span><br><span class="line">        FFT::n = <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">while</span> (FFT::n &lt;= sz1 + sz2) FFT::n &lt;&lt;= <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= FFT::n; ++i) x[i] = y[i] = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; sz1; ++i) x[i] = b[id1][i];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; sz2; ++i) y[i] = b[id2][i];</span><br><span class="line">        FFT::DFT(x), FFT::DFT(y);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= FFT::n; ++i) x[i] = x[i] * y[i] % MOD;</span><br><span class="line">        FFT::IDFT(x);</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= sz1 + sz2 - <span class="hljs-number">2</span>; ++i)</span><br><span class="line">            b[cnt].push_back(x[i]);</span><br><span class="line">        q.push(make_pair(-b[cnt].size(), cnt));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> id = q.top().second, sz = -q.top().first;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = k; i &lt; sz; ++i) &#123;</span><br><span class="line">        ll tmp = C(i, k) * fac[n - i] % MOD * b[id][i] % MOD;</span><br><span class="line">        <span class="hljs-keyword">if</span> ((i - k) &amp; <span class="hljs-number">1</span>) ans = (ans - tmp + MOD) % MOD;</span><br><span class="line">        <span class="hljs-keyword">else</span> ans = (ans + tmp) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        ans = ans * qpow(fac[a[i]], MOD - <span class="hljs-number">2</span>) % MOD;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld"</span>, ans);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/6503&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#6503. 「雅礼集训 2018 Day4」Magic&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;题目概括征集中~&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
      <category term="雅礼集训" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/%E9%9B%85%E7%A4%BC%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="FFT/NTT" scheme="https://tth37.cn/tags/FFT-NTT/"/>
    
      <category term="生成函数" scheme="https://tth37.cn/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
      <category term="组合计数" scheme="https://tth37.cn/tags/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/"/>
    
      <category term="启发式合并" scheme="https://tth37.cn/tags/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    
      <category term="容斥原理" scheme="https://tth37.cn/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>「TJOI2019」唱、跳、rap 和篮球</title>
    <link href="https://tth37.cn/2019/11/22/solution-loj-3106/"/>
    <id>https://tth37.cn/2019/11/22/solution-loj-3106/</id>
    <published>2019-11-21T16:21:51.000Z</published>
    <updated>2019-11-28T15:39:30.512Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/3106" target="_blank" rel="noopener">#3106. 「TJOI2019」唱、跳、rap 和篮球</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>有 $n$ 个蔡徐坤，有 $m$ 个世界上最帅的欧阳，求总共有多少人。</p><p>$n,m\le1000000$</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>记连续的 4 个学生分别喜欢唱、跳、rap 和篮球为一组。考虑容斥，记 $f[i]$ 为保证至少存在 $i$ 组的序列方案数。根据题意，在此序列中最多只会存在 $m=\min\lbrace a,b,c,\lfloor\frac{n}{4}\rfloor\rbrace$ 组。最终答案即为 $\sum_{i=0}^{m}(-1)^{i}\times f[i]$。</p><p>考虑 $f[i]$ 的计算。由于保证至少存在 $i$ 组，可以将 $i$ 组随机插入到序列中，然后在剩下的位置插入任意学生并统计答案。</p><p>将 $i$ 个长度为 4 的组插入到长度为 $n$ 的序列中，共有 ${n-3i\choose i}$ 种方案。</p><p>将 $i_1$ 个喜欢唱、$i_2$ 个喜欢跳、$i_3$ 个喜欢 rap、$i_4$ 个喜欢篮球的学生放置在长度为 $n-4i$ 的序列中，如果保证 $i_1+i_2+i_3+i_4=n-4i$，则方案数为 $\frac{(n-4i)!}{i_1!\times i_2!\times i_3\times i_4!}$。</p><p>然而题目不保证剩余的 $a-i$、$b-i$、$c-i$、$d-i$ 个学生之和恰好为 $n-4i$，因此该部分的答案为：</p><p>$$<br>\sum_{i_1=0}^{a-i}\sum_{i_2=0}^{b-i}\sum_{i_3=0}^{c-i}\sum_{i_4=0}^{d-i}[i_1+i_2+i_3+i_4=n-4i]\frac{(n-4i)!}{i_1!\times i_2!\times i_3\times i_4!}<br>$$</p><p>注意到这是一个四元卷积的形式，可以用生成函数 + NTT 暴力求解。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> ll MOD = <span class="hljs-number">998244353</span>, G = <span class="hljs-number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a, ll k)</span> </span>&#123;</span><br><span class="line">    ll ret = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (k) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) ret = ret * a % MOD;</span><br><span class="line">        a = a * a % MOD;</span><br><span class="line">        k &gt;&gt;= <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">namespace</span> FFT &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n, r[<span class="hljs-number">10005</span>];</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NTT</span><span class="hljs-params">(ll *a, <span class="hljs-keyword">int</span> op)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (; (<span class="hljs-number">1</span> &lt;&lt; k) &lt; n; ++k);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            r[i] = r[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span> | (i &amp; <span class="hljs-number">1</span>) &lt;&lt; (k - <span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (i &lt; r[i]) swap(a[i], a[r[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">2</span>; l &lt;= n; l &lt;&lt;= <span class="hljs-number">1</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> m = l &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">            ll w = qpow(G, (MOD - <span class="hljs-number">1</span>) / l);</span><br><span class="line">            <span class="hljs-keyword">if</span> (op == <span class="hljs-number">-1</span>) w = qpow(w, MOD - <span class="hljs-number">2</span>);</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += l) &#123;</span><br><span class="line">                ll wk = <span class="hljs-number">1</span>;</span><br><span class="line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; ++j, wk = wk * w % MOD) &#123;</span><br><span class="line">                    ll p = a[i + j], q = wk * a[i + j + m] % MOD;</span><br><span class="line">                    a[i + j] = (p + q) % MOD;</span><br><span class="line">                    a[i + j + m] = (p - q + MOD) % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFT</span><span class="hljs-params">(ll *a)</span> </span>&#123;</span><br><span class="line">        NTT(a, <span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">IDFT</span><span class="hljs-params">(ll *a)</span> </span>&#123;</span><br><span class="line">        NTT(a, <span class="hljs-number">-1</span>);</span><br><span class="line">        ll inv = qpow(n, MOD - <span class="hljs-number">2</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)</span><br><span class="line">            a[i] = a[i] * inv % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ll f[<span class="hljs-number">1005</span>];</span><br><span class="line">ll fac[<span class="hljs-number">4005</span>], inv[<span class="hljs-number">4005</span>], facinv[<span class="hljs-number">4005</span>];</span><br><span class="line">ll x[<span class="hljs-number">4005</span>], y[<span class="hljs-number">4005</span>], z[<span class="hljs-number">4005</span>], w[<span class="hljs-number">4005</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> fac[n] * facinv[k] % MOD * facinv[n - k] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, a, b, c, d, m;</span><br><span class="line">ll ans = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    fac[<span class="hljs-number">0</span>] = facinv[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    fac[<span class="hljs-number">1</span>] = inv[<span class="hljs-number">1</span>] = facinv[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">4000</span>; ++i) &#123;</span><br><span class="line">        fac[i] = fac[i - <span class="hljs-number">1</span>] * <span class="hljs-number">1l</span>l * i % MOD;</span><br><span class="line">        inv[i] = (MOD - MOD / i) * inv[MOD % i] % MOD;</span><br><span class="line">        facinv[i] = facinv[i - <span class="hljs-number">1</span>] * inv[i] % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d%d%d"</span>, &amp;n, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">    m = min(min(min(min(n / <span class="hljs-number">4</span>, a), b), c), d);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="hljs-built_in">memset</span>(x, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(x));</span><br><span class="line">        <span class="hljs-built_in">memset</span>(y, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(y));</span><br><span class="line">        <span class="hljs-built_in">memset</span>(z, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(z));</span><br><span class="line">        <span class="hljs-built_in">memset</span>(w, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(w));</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= a - i; ++j) x[j] = facinv[j];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= b - i; ++j) y[j] = facinv[j];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= c - i; ++j) z[j] = facinv[j];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= d - i; ++j) w[j] = facinv[j];</span><br><span class="line">        FFT::n = <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">while</span> (FFT::n &lt;= a + b + c + d - <span class="hljs-number">4</span> * i) FFT::n &lt;&lt;= <span class="hljs-number">1</span>;</span><br><span class="line">        FFT::DFT(x), FFT::DFT(y), FFT::DFT(z), FFT::DFT(w);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; FFT::n; ++j)</span><br><span class="line">            x[j] = x[j] * y[j] % MOD * z[j] % MOD * w[j] % MOD;</span><br><span class="line">        FFT::IDFT(x);</span><br><span class="line">        f[i] = C(n - <span class="hljs-number">3</span> * i, i) * fac[n - <span class="hljs-number">4</span> * i] % MOD * x[n - <span class="hljs-number">4</span> * i] % MOD;</span><br><span class="line">        <span class="hljs-keyword">if</span> (i &amp; <span class="hljs-number">1</span>) ans = (ans - f[i] + MOD) % MOD;</span><br><span class="line">        <span class="hljs-keyword">else</span> ans = (ans + f[i]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld"</span>, ans);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3106&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#3106. 「TJOI2019」唱、跳、rap 和篮球&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;有 $n$ 个蔡徐坤，有 $m$ 个世界上最帅的欧阳，求总共有多少人。&lt;/p&gt;
&lt;p&gt;$n,m\le1000000$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="FFT/NTT" scheme="https://tth37.cn/tags/FFT-NTT/"/>
    
      <category term="生成函数" scheme="https://tth37.cn/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
      <category term="组合计数" scheme="https://tth37.cn/tags/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>快速傅里叶变换（FFT）快速数论变换（NTT）</title>
    <link href="https://tth37.cn/2019/11/20/algorithm-fftntt/"/>
    <id>https://tth37.cn/2019/11/20/algorithm-fftntt/</id>
    <published>2019-11-20T15:38:26.000Z</published>
    <updated>2019-11-24T15:37:42.474Z</updated>
    
    <content type="html"><![CDATA[<p>离散傅里叶变换（Discrete Fourier Transform，缩写为 DFT），是傅里叶变换在时域和频域上都呈离散的形式，将信号的时域采样变换为其 DTFT 的频域采样。</p><p>FFT 是一种 DFT 的高效算法，称为快速傅立叶变换（Fast Fourier transform）。</p><p> 快速数论变换 (NTT) 是快速傅里叶变换（FFT）在数论基础上的实现。 </p><a id="more"></a><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">5000005</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> ll MOD = <span class="hljs-number">998244353</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> ll G = <span class="hljs-number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a, ll k)</span> </span>&#123;</span><br><span class="line">    ll ret = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (k) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) ret = ret * a % MOD;</span><br><span class="line">        a = a * a % MOD;</span><br><span class="line">        k &gt;&gt;= <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">inv</span><span class="hljs-params">(ll a)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> qpow(a, MOD - <span class="hljs-number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">namespace</span> FFT &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n, r[MAXN];</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NTT</span><span class="hljs-params">(ll *a, <span class="hljs-keyword">int</span> op)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (; (<span class="hljs-number">1</span> &lt;&lt; k) &lt; n; ++k);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            r[i] = r[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span> | (i &amp; <span class="hljs-number">1</span>) &lt;&lt; (k - <span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (i &lt; r[i]) swap(a[i], a[r[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">2</span>; l &lt;= n; l &lt;&lt;= <span class="hljs-number">1</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> m = l &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">            ll w = qpow(G, (MOD - <span class="hljs-number">1</span>) / l);</span><br><span class="line">            <span class="hljs-keyword">if</span> (op == <span class="hljs-number">-1</span>) w = inv(w);</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += l) &#123;</span><br><span class="line">                ll wk = <span class="hljs-number">1</span>;</span><br><span class="line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; ++j, wk = wk * w % MOD) &#123;</span><br><span class="line">                    ll p = a[i + j], q = wk * a[i + j + m] % MOD;</span><br><span class="line">                    a[i + j] = (p + q) % MOD;</span><br><span class="line">                    a[i + j + m] = (p - q + MOD) % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFT</span><span class="hljs-params">(ll *a)</span> </span>&#123;</span><br><span class="line">        NTT(a, <span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">IDFT</span><span class="hljs-params">(ll *a)</span> </span>&#123;</span><br><span class="line">        NTT(a, <span class="hljs-number">-1</span>);</span><br><span class="line">        ll inv = qpow(n, MOD - <span class="hljs-number">2</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)</span><br><span class="line">            a[i] = a[i] * inv % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;离散傅里叶变换（Discrete Fourier Transform，缩写为 DFT），是傅里叶变换在时域和频域上都呈离散的形式，将信号的时域采样变换为其 DTFT 的频域采样。&lt;/p&gt;
&lt;p&gt;FFT 是一种 DFT 的高效算法，称为快速傅立叶变换（Fast Fourier transform）。&lt;/p&gt;
&lt;p&gt; 快速数论变换 (NTT) 是快速傅里叶变换（FFT）在数论基础上的实现。 &lt;/p&gt;
    
    </summary>
    
      <category term="算法学习" scheme="https://tth37.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="FFT/NTT" scheme="https://tth37.cn/tags/FFT-NTT/"/>
    
  </entry>
  
  <entry>
    <title>「雅礼集训 2017 Day7」蛐蛐国的修墙方案</title>
    <link href="https://tth37.cn/2019/11/14/solution-loj-6043/"/>
    <id>https://tth37.cn/2019/11/14/solution-loj-6043/</id>
    <published>2019-11-14T14:46:15.000Z</published>
    <updated>2019-11-24T15:39:41.131Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/6043" target="_blank" rel="noopener">#6043. 「雅礼集训 2017 Day7」蛐蛐国的修墙方案</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>题目概括征集中~</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>CSP-S RP++!</p><p>赛前再做几个搜索 / 模拟，<del>为暴力骗分做准备，</del>顺便填一下雅礼集训的坑。</p><h4 id="Part1-暴搜"><a href="#Part1-暴搜" class="headerlink" title="Part1: 暴搜"></a>Part1: 暴搜</h4><p>观察题意得出，第 $i$ 个位置和第 $P_i$ 个位置上，必须填一个左括号和一个右括号。从左向右填写，每次判断是否可以填左 / 右括号即可。</p><p>得分 81 pts 。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-keyword">int</span> ans[<span class="hljs-number">105</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> p[<span class="hljs-number">105</span>];</span><br><span class="line"><span class="hljs-keyword">bool</span> force_right[<span class="hljs-number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> dep, <span class="hljs-keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (dep == n + <span class="hljs-number">1</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) </span><br><span class="line"><span class="hljs-built_in">putchar</span>(<span class="hljs-string">'('</span> + ans[i]);</span><br><span class="line"><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (cnt &lt; n / <span class="hljs-number">2</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (force_right[dep] == <span class="hljs-number">0</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (p[dep] &lt; dep) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (ans[p[dep]] == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">ans[dep] = <span class="hljs-number">0</span>;</span><br><span class="line">dfs(dep + <span class="hljs-number">1</span>, cnt + <span class="hljs-number">1</span>);</span><br><span class="line">ans[dep] = <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">force_right[p[dep]] = <span class="hljs-number">1</span>;</span><br><span class="line">dfs(dep + <span class="hljs-number">1</span>, cnt + <span class="hljs-number">1</span>);</span><br><span class="line">force_right[p[dep]] = <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-keyword">if</span> (dep - cnt &lt;= cnt) &#123;</span><br><span class="line">ans[dep] = <span class="hljs-number">1</span>;</span><br><span class="line">dfs(dep + <span class="hljs-number">1</span>, cnt);</span><br><span class="line">ans[dep] = <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;p[i]);</span><br><span class="line">dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Part2-观察性质"><a href="#Part2-观察性质" class="headerlink" title="Part2: 观察性质"></a>Part2: 观察性质</h4><p>将排列 $P$ 视作置换函数，则 $P$ 必定可以分解为若干个长度为偶数的循环。（若不然，必定无解）对于每个循环都只有 2 种填法，即 0,1,0,1… 或 1,0,1,0…。特判长度为 2 的循环，则剩余的循环最多有 $100 / 4 = 25$ 个。复杂度约为 $2^{25}$ 级别。</p><p>得分 100 pts。</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, p[<span class="hljs-number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; circ[<span class="hljs-number">105</span>];</span><br><span class="line"><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">105</span>], ans[<span class="hljs-number">105</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> cnt1 = <span class="hljs-number">0</span>, cnt2 = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">cnt1 += (ans[i] == <span class="hljs-number">0</span>), cnt2 += ans[i];</span><br><span class="line"><span class="hljs-keyword">if</span> (cnt1 &lt; cnt2) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (u == cnt + <span class="hljs-number">1</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (check()) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="hljs-built_in">putchar</span>(<span class="hljs-string">'('</span> + ans[i]);</span><br><span class="line"><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> len = circ[u].size();</span><br><span class="line"><span class="hljs-keyword">if</span> (!(len ^ <span class="hljs-number">2</span>)) &#123;</span><br><span class="line">ans[circ[u][<span class="hljs-number">0</span>]] = <span class="hljs-number">0</span>, ans[circ[u][<span class="hljs-number">1</span>]] = <span class="hljs-number">1</span>;</span><br><span class="line">dfs(u + <span class="hljs-number">1</span>);</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i ^ len; ++i) ans[circ[u][i]] = i &amp; <span class="hljs-number">1</span>;</span><br><span class="line">dfs(u + <span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i ^ len; ++i) ans[circ[u][i]] = !(i &amp; <span class="hljs-number">1</span>);</span><br><span class="line">dfs(u + <span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) </span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;p[i]);</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (vis[i] == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">cnt += <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> cur = i;</span><br><span class="line"><span class="hljs-keyword">do</span> &#123;</span><br><span class="line">circ[cnt].push_back(cur);</span><br><span class="line">vis[cur] = <span class="hljs-number">1</span>;</span><br><span class="line">cur = p[cur];</span><br><span class="line">&#125; <span class="hljs-keyword">while</span> (cur != i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/6043&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#6043. 「雅礼集训 2017 Day7」蛐蛐国的修墙方案&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;题目概括征集中~&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
      <category term="雅礼集训" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/%E9%9B%85%E7%A4%BC%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="搜索" scheme="https://tth37.cn/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>咕咕树</title>
    <link href="https://tth37.cn/2019/11/04/solution-jsk-4596B/"/>
    <id>https://tth37.cn/2019/11/04/solution-jsk-4596B/</id>
    <published>2019-11-04T14:19:03.000Z</published>
    <updated>2019-11-25T15:59:25.169Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nanti.jisuanke.com/t/42087" target="_blank" rel="noopener">4596B 咕咕树</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>题目概括咕咕</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>高压下的代码实现能力堪忧。比赛 1 小时没敲出来，订正 10 分钟满分。</p><p>官方题解给的是树形背包，但并不是特别好实现。</p><p>定义状态 $f[u][i]$ 表示以 $u$ 为根的子树，有一条以 $u$ 为起点且长度恰好为 $i$ 的链，最少花费的代价。</p><p>考虑状态转移： $f[u][0]$ 显然是切断当前节点后，再将每个子树切断；$f[u][1]$ 即为切出一条长度为 $i$ 的链，对其余子树的链长度进行讨论。<br>$$<br>f[u][0]=a[u]+\sum_{v\in son(u)}\min_{j=0}^{l-1}\lbrace f[v][j]\rbrace\<br>f[u][1]=f[s][i-1]+\sum_{v\in son(u),v\not= s}\min_{j=0}^{\min(i-1,l-i-1)}\lbrace f[v][j]\rbrace<br>$$<br>考虑优化。对所有 $f[u][0..l-1]$ 做前缀最小值，并记 $g[u][i]=\sum_{v\in son(u)}f[v][j]$，则转移方程简化为：<br>$$<br>f[u][0]=a[u]+g[u][l-1]\<br>f[u][1]=f[s][i-1]-f[s][\min(i-1,l-i-1)]+g[u][\min(i-1,l-i-1)]<br>$$<br>注意叶节点的 $f[u][1]$ 应赋值为 $0$。</p><p>时间复杂度 $O(n^2)$。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">5005</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, l;</span><br><span class="line"><span class="hljs-keyword">int</span> a[MAXN];</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> f[MAXN][MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> g[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = *it;</span><br><span class="line">        <span class="hljs-keyword">if</span> (v == fa) <span class="hljs-keyword">continue</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; l; ++i)</span><br><span class="line">            g[u][i] += f[v][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = *it;</span><br><span class="line">        <span class="hljs-keyword">if</span> (v == fa) <span class="hljs-keyword">continue</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; l; ++i) &#123;</span><br><span class="line">            f[u][i] = min(f[u][i], g[u][min(i - <span class="hljs-number">1</span>, l - i - <span class="hljs-number">1</span>)] - f[v][min(i - <span class="hljs-number">1</span>, l - i - <span class="hljs-number">1</span>)] + f[v][i - <span class="hljs-number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f[u][<span class="hljs-number">0</span>] = a[u] + g[u][l - <span class="hljs-number">1</span>];</span><br><span class="line">    <span class="hljs-keyword">if</span> (u != <span class="hljs-number">1</span> &amp;&amp; G[u].size() == <span class="hljs-number">1</span>) f[u][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; l; ++i)</span><br><span class="line">        f[u][i] = min(f[u][i], f[u][i - <span class="hljs-number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(f));</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;l);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]), sum += a[i];</span><br><span class="line">    <span class="hljs-keyword">if</span> (l == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, sum), <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> u, v;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        G[u].push_back(v), G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, f[<span class="hljs-number">1</span>][l - <span class="hljs-number">1</span>]);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/42087&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;4596B 咕咕树&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;题目概括咕咕&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="计蒜客" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/%E8%AE%A1%E8%92%9C%E5%AE%A2/"/>
    
    
      <category term="动态规划" scheme="https://tth37.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="背包" scheme="https://tth37.cn/tags/%E8%83%8C%E5%8C%85/"/>
    
      <category term="树形dp" scheme="https://tth37.cn/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
  </entry>
  
  <entry>
    <title>高斯消元</title>
    <link href="https://tth37.cn/2019/10/31/algorithm-gauss/"/>
    <id>https://tth37.cn/2019/10/31/algorithm-gauss/</id>
    <published>2019-10-31T13:44:46.000Z</published>
    <updated>2019-11-25T15:55:47.293Z</updated>
    
    <content type="html"><![CDATA[<p>高斯消元法（Gauss-Jordan elimination）是求解线性方程组的经典算法，它在当代数学中有着重要的地位和价值，是线性代数课程教学的重要组成部分。</p><p>高斯消元法除了用于线性方程组求解外，还可以用于行列式计算、求矩阵的逆，以及其他计算机和工程方面。</p><p>夏建明等人之前提出了应用图形处理器 (GPU) 加速求解线性方程组的高斯消元法，所提出的算法与基于 CPU 的算法相比较取得更快的运算速度。二是提出各种变异高斯消元法以满足特定工作的需要。</p><blockquote><p>本文绝大部分内容转载自 <a href="https://oi-wiki.org/math/gauss/#_6" target="_blank" rel="noopener">OI-WIKI</a></p></blockquote><a id="more"></a><h4 id="高斯消元五步骤法"><a href="#高斯消元五步骤法" class="headerlink" title="高斯消元五步骤法"></a>高斯消元五步骤法</h4><p>高斯消元法在将增广矩阵化为最简形后对于自由未知量的赋值，需要掌握线性相关知识，且赋值存在人工经验的因素，使得在学习过程中有一定的困难，将高斯消元法划分为五步骤，从而提出五步骤法，内容如下：</p><ol><li><p>增广矩阵行初等行变换为行最简形；</p></li><li><p>还原线性方程组；</p></li><li><p>求解第一个变量；</p></li><li><p>补充自由未知量；</p></li><li><p>列表示方程组通解。</p></li></ol><p>利用实例进一步说明该算法的运作情况。</p><p>例二：利用高斯消元法五步骤法求解线性方程组：</p><p>$$<br>\left{\begin{aligned}<br>2x_1+5x_3+6x_4&amp;=9 \notag \<br>x_3+x_4&amp;=-4 \notag \<br>2x_3+2x_4&amp;=-8 \notag<br>\end{aligned}\right.<br>$$</p><h4 id="增广矩阵行（初等）变换为行最简形"><a href="#增广矩阵行（初等）变换为行最简形" class="headerlink" title="增广矩阵行（初等）变换为行最简形"></a>增广矩阵行（初等）变换为行最简形</h4><p>所谓增广矩阵，即为方程组系数矩阵 $A$ 与常数列 $b$ 的并生成的新矩阵，即 $(A | b)$ ，增广矩阵行初等变换化为行最简形，即是利用了高斯消元法的思想理念，省略了变量而用变量的系数位置表示变量，增广矩阵中用竖线隔开了系数矩阵和常数列，代表了等于符号。</p><p>$$<br>\left(\begin{matrix}<br>2 &amp; 0 &amp; 5 &amp; 6 \<br>0 &amp; 0 &amp; 1 &amp; 1 \<br>0 &amp; 0 &amp; 2 &amp; 2<br>\end{matrix} \middle|<br>\begin{matrix}<br>9 \<br>-4 \<br>-8<br>\end{matrix} \right)<br>$$</p><p>$$<br>\xrightarrow{r_3-2r_2}<br>\left(\begin{matrix}<br>2 &amp; 0 &amp; 5 &amp; 6 \<br>0 &amp; 0 &amp; 1 &amp; 1 \<br>0 &amp; 0 &amp; 0 &amp; 0<br>\end{matrix} \middle|<br>\begin{matrix}<br>9 \<br>-4 \<br>0<br>\end{matrix} \right)<br>$$</p><p>化为行阶梯形</p><p>$$<br>\xrightarrow{\frac{r_1}{2}}<br>\left(\begin{matrix}<br>1 &amp; 0 &amp; 2.5 &amp; 3 \<br>0 &amp; 0 &amp; 1 &amp; 1 \<br>0 &amp; 0 &amp; 0 &amp; 0<br>\end{matrix} \middle|<br>\begin{matrix}<br>4.5 \<br>-4 \<br>0<br>\end{matrix} \right)<br>$$</p><p>$$<br>\xrightarrow{r_1-r_2 \times 2.5}<br>\left(\begin{matrix}<br>1 &amp; 0 &amp; 0 &amp; 0.5 \<br>0 &amp; 0 &amp; 1 &amp; 1 \<br>0 &amp; 0 &amp; 0 &amp; 0<br>\end{matrix} \middle|<br>\begin{matrix}<br>14.5 \<br>-4 \<br>0<br>\end{matrix} \right)<br>$$</p><p>化为最简形</p><h4 id="还原线性方程组"><a href="#还原线性方程组" class="headerlink" title="还原线性方程组"></a>还原线性方程组</h4><p>$$<br>\left{\begin{aligned}<br>x_1+0.5x_4 &amp;= 14.5 \notag\<br>x_3+x_4 &amp;= -4 \notag \<br>\end{aligned}\right.<br>$$</p><p>解释</p><blockquote><p>所谓的还原线性方程组，即是在行最简形的基础上，将之重新书写为线性方程组的形式，即将行最简形中各位置的系数重新赋予变量，中间的竖线还原为等号。</p></blockquote><h4 id="求解第一个变量"><a href="#求解第一个变量" class="headerlink" title="求解第一个变量"></a>求解第一个变量</h4><p>$$<br>\left{\begin{aligned}<br>x_1 &amp;= -0.5x_4+14.5\notag \<br>x_3 &amp;= -x_4-4\notag<br>\end{aligned}\right.<br>$$</p><p>解释</p><blockquote><p>即是对于所还原的线性方程组而言，将方程组中每个方程的第一个变量，用其他量表达出来。如方程组两方程中的第一个变量 $x_1$ 和 $x_3$ </p></blockquote><h4 id="补充自由未知量"><a href="#补充自由未知量" class="headerlink" title="补充自由未知量"></a>补充自由未知量</h4><p>$$<br>\left{\begin{aligned}<br>x_1 &amp;= -0.5x_4+14.5 \notag \<br>x_2 &amp;= x_2 \notag \<br>x_3 &amp;= -x_4-4 \notag \<br>x_4 &amp;= x_4 \notag<br>\end{aligned}\right.<br>$$</p><p>解释</p><blockquote><p>第 3 步中，求解出变量 $x_1$ 和 $x_3$ ，从而说明了方程剩余的变量 $x_2$ 和 $x_4$ 不受方程组的约束，是自由未知量，可以取任意值，所以需要在第 3 步骤解得基础上进行解得补充，补充的方法为 $x_2 = x_2,x_4 = x_4$ ，这种解得补充方式符合自由未知量定义，并易于理解，因为是自由未知量而不受约束，所以只能自己等于自己。</p></blockquote><h4 id="列表示方程组的通解"><a href="#列表示方程组的通解" class="headerlink" title="列表示方程组的通解"></a>列表示方程组的通解</h4><p>$$<br>\begin{aligned}<br>\begin{pmatrix} x_1 \ x_2 \ x_3 \ x_4 \end{pmatrix} &amp;=<br>\begin{pmatrix} 0 \ 1 \ 0 \ 0 \end{pmatrix} x_2+<br>\begin{pmatrix} -0.5 \ 0 \ -1 \ 1 \end{pmatrix} x_4 +<br>\begin{pmatrix} 14.5 \ 0 \ -4 \ 0 \end{pmatrix} \notag \<br>&amp;= \begin{pmatrix} 0 \ 1 \ 0 \ 0 \end{pmatrix} C_1+<br>\begin{pmatrix} -0.5 \ 0 \ -1 \ 1 \end{pmatrix} C_2 +<br>\begin{pmatrix} 14.5 \ 0 \ -4 \ 0 \end{pmatrix} \notag<br>\end{aligned}<br>$$</p><p>其中 $C_1$ 和 $C_2$ 为任意常数。</p><p>解释</p><blockquote><p>即在第 4 步的基础上，将解表达为列向量组合的表示形式，同时由于 $x_2$ 和 $x_4$ 是自由未知量，可以取任意值，所以在解得右边，令二者分别为任意常数 $C_1$ 和 $C_2$ ，即实现了对方程组的求解。</p></blockquote><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>其实可以根据自己解方程的习惯写代码……实现非常简单，基本不需要理论知识</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Gauss</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">bool</span> flag = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (a[j][i] != <span class="hljs-number">0</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = i; k &lt;= n + <span class="hljs-number">1</span>; ++k)</span><br><span class="line">                    swap(a[i][k], a[j][k]);</span><br><span class="line">                flag = <span class="hljs-number">1</span>;</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No Solution"</span>);</span><br><span class="line">            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">double</span> tmp = a[i][i];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = i; k &lt;= n + <span class="hljs-number">1</span>; ++k)</span><br><span class="line">            a[i][k] /= tmp;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            tmp = a[j][i];</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = i; k &lt;= n + <span class="hljs-number">1</span>; ++k)</span><br><span class="line">                a[j][k] -= tmp * a[i][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; --i) &#123;</span><br><span class="line">        <span class="hljs-keyword">double</span> x = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            x += ans[j] * a[i][j];</span><br><span class="line">        ans[i] = a[i][n + <span class="hljs-number">1</span>] - x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;高斯消元法（Gauss-Jordan elimination）是求解线性方程组的经典算法，它在当代数学中有着重要的地位和价值，是线性代数课程教学的重要组成部分。&lt;/p&gt;
&lt;p&gt;高斯消元法除了用于线性方程组求解外，还可以用于行列式计算、求矩阵的逆，以及其他计算机和工程方面。&lt;/p&gt;
&lt;p&gt;夏建明等人之前提出了应用图形处理器 (GPU) 加速求解线性方程组的高斯消元法，所提出的算法与基于 CPU 的算法相比较取得更快的运算速度。二是提出各种变异高斯消元法以满足特定工作的需要。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文绝大部分内容转载自 &lt;a href=&quot;https://oi-wiki.org/math/gauss/#_6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OI-WIKI&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法学习" scheme="https://tth37.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数论专题" scheme="https://tth37.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="高斯消元" scheme="https://tth37.cn/tags/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"/>
    
  </entry>
  
  <entry>
    <title>「BJOI2019」光线</title>
    <link href="https://tth37.cn/2019/10/31/solution-loj-3093/"/>
    <id>https://tth37.cn/2019/10/31/solution-loj-3093/</id>
    <published>2019-10-31T13:35:11.000Z</published>
    <updated>2019-11-25T15:55:30.382Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/3093" target="_blank" rel="noopener">#3093. 「BJOI2019」光线</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>题目概括征集中~</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>一开始愣是套高斯消元想了半天……后来发现是普通 DP 秒出</p><h4 id="Part1-高斯消元-O-n-3"><a href="#Part1-高斯消元-O-n-3" class="headerlink" title="Part1: 高斯消元 $O(n^3)$"></a>Part1: 高斯消元 $O(n^3)$</h4><p>记 $f[i]$ 表示第 $i$ 片玻璃向下的光线总数，$g[i]$ 表示第 $i$ 片玻璃向上的光线总数。</p><p>显然地：<br>$$<br>f[i]=f[i-1]\times a[i]+g[i+1]\times b[i]\<br>g[i]=f[i-1]\times b[i]+g[i+1]\times a[i]<br>$$</p><p>$$<br>f[i]=f[i-1]\times a[i]+g[i+1]\times b[i]\<br>g[i]=f[i-1]\times b[i]+g[i+1]\times a[i]<br>\<br>x_i=x_{i-1}\times a[i] + x_{n+i+1}\times b[i]\<br>x_{n+i}=x_{i-1}\times b[i]+x_{n+i+1}\times a[i]<br>$$</p><p>共有 $2n$  个未知数和 $2n$ 个等式，暴力求解方程即可。</p><p>期望得分：50 pts</p><p>$$<br>f[i]=f[i-1]\times a[i]+f[i-1]\times b[i]\times g[i-1]\times a[i]+…<br>$$</p><p>$$<br>f[i]=f[i-1]\times a[i]\times\sum_{j=0}^{+\infty}(b[i]\times g[i-1])^j\<br>f[i]=f[i-1]\times a[i]\times<br>$$</p><p>$$<br>g[i]=b[i]+a[i]\times g[i-1]\times a[i]+a[i]\times g[i-1]\times b[i]\times g[i-1]\times a[i]<br>$$</p><p>$$<br>g[i]=b[i]+a[i]^2\times g[i-1]\times\sum_{j=0}^{+\infty}(b[i]\times g[i-1])^j<br>$$</p><p>$$<br>{a_n}\<br>a_n=a_{n-1}\times q\ \   (0&lt;q&lt;1)\<br>\sum_{j=0}^{+\infty}=a_1/(1-q)<br>$$</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3093&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#3093. 「BJOI2019」光线&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;题目概括征集中~&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="高斯消元" scheme="https://tth37.cn/tags/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"/>
    
      <category term="动态规划" scheme="https://tth37.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="概率" scheme="https://tth37.cn/tags/%E6%A6%82%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>「雅礼集训 2018 Day1」图</title>
    <link href="https://tth37.cn/2019/10/30/solution-loj-6497/"/>
    <id>https://tth37.cn/2019/10/30/solution-loj-6497/</id>
    <published>2019-10-30T14:11:17.000Z</published>
    <updated>2019-11-25T15:57:02.509Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/6497" target="_blank" rel="noopener">#6497. 「雅礼集训 2018 Day1」图</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>题目概括征集中~</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>特别屌的一个计数 DP。</p><p>记 $g(i)$ 表示以 $i$ 节点结尾的交错路径条数。</p><p>定义状态：$f[i][k][x][y]$ 表示考虑前 $i$ 个节点，奇偶性为 $k=0/1$； $x=0/1$ 表示是否存在 $g()$ 为奇数的黑色节点， $y=0/1$ 表示是否存在 $g()$ 为奇数的白色节点。</p><p>考虑转移：假设已经求出 $f[i][k][x][y]$。枚举第 $i+1$ 个节点的颜色。</p><p>当第 $i+1$ 个节点为白色时：</p><p>如果 $x=0$，即不存在 $g()$ 为奇数的黑色节点，那么无论如何连边，总的原方案的奇偶性一定会发生改变。考虑如果有黑色节点向 $i+1$ 连边，则交错路径会增加偶数条（即增加 $g()$）；如果有白色节点向其连边，则交错路径数不变；第 $i+1$ 个节点单独作为一条路径，因此交错路径增加了奇数条，奇偶性发生改变。</p><p>转移方程：<br>$$<br>f[i+1][k\oplus1][x][1]=f[i+1][k\oplus1][x][1]+2^i\times f[i][k][x][y]<br>$$<br>如果 $x=1$，那么情况会略微复杂；注意到如果有偶数个 $g()$ 为奇数的黑色节点向 $i+1$ 连边，则奇偶性一定改变；如果有奇数个 $g()$ 为奇数的黑色节点向 $i+1$ 连边，则奇偶性不会改变。假设 $g()$ 为奇数的黑色节点共有 $t$ 个。那么转移方程如下：<br>$$<br>f[i+1][k\oplus1][x][1]=f[i+1][k\oplus1][x][1]+({t\choose0}+{t\choose2}+..+{t\choose 2m})\times 2^{i-t}\times f[i][k][x][y]<br>$$</p><p>$$<br>f[i+1][k][x][y]=f[i+1][k][x][y]+({t\choose1}+{t\choose3}+..+{t\choose 2m+1})\times 2^{i-t}\times f[i][k][x][y]<br>$$</p><p>可以证明：<br>$$<br>{t\choose0}+{t\choose2}+..+{t\choose 2m}={t\choose1}+{t\choose3}+..+{t\choose 2m+1}=2^{t-1}<br>$$<br>因此转移方程可以简化为：<br>$$<br>f[i+1][k\oplus1][x][1]=f[i+1][k\oplus1][x][1]+2^{i-1}\times f[i][k][x][y]<br>$$</p><p>$$<br>f[i+1][k][x][y]=f[i+1][k][x][y]+2^{i-1}\times f[i][k][x][y]<br>$$</p><p>当第 $i+1$ 个节点为黑色时，情况类似。</p><p>代码实现非常简单，不再赘述。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">200005</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, p;</span><br><span class="line"><span class="hljs-keyword">int</span> f[MAXN][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> c[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> pow2[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;p);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;c[i]);</span><br><span class="line">    pow2[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        pow2[i] = pow2[i - <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (pow2[i] &gt; MOD) pow2[i] -= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">1</span>; ++k)</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt;= <span class="hljs-number">1</span>; ++x)</span><br><span class="line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>; y &lt;= <span class="hljs-number">1</span>; ++y) &#123;</span><br><span class="line">                    <span class="hljs-keyword">int</span> cur = f[i][k][x][y];</span><br><span class="line">                    <span class="hljs-keyword">if</span> (c[i + <span class="hljs-number">1</span>] == <span class="hljs-number">-1</span> || c[i + <span class="hljs-number">1</span>] == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>)</span><br><span class="line">                            f[i + <span class="hljs-number">1</span>][k ^ <span class="hljs-number">1</span>][x][<span class="hljs-number">1</span>] =</span><br><span class="line">                                (f[i + <span class="hljs-number">1</span>][k ^ <span class="hljs-number">1</span>][x][<span class="hljs-number">1</span>] + <span class="hljs-number">1l</span>l * pow2[i] * cur) % MOD;</span><br><span class="line">                        <span class="hljs-keyword">else</span></span><br><span class="line">                            f[i + <span class="hljs-number">1</span>][k ^ <span class="hljs-number">1</span>][x][<span class="hljs-number">1</span>] =</span><br><span class="line">                                (f[i + <span class="hljs-number">1</span>][k ^ <span class="hljs-number">1</span>][x][<span class="hljs-number">1</span>] + <span class="hljs-number">1l</span>l * pow2[i - <span class="hljs-number">1</span>] * cur) % MOD,</span><br><span class="line">                            f[i + <span class="hljs-number">1</span>][k][x][y] =</span><br><span class="line">                                (f[i + <span class="hljs-number">1</span>][k][x][y] + <span class="hljs-number">1l</span>l * pow2[i - <span class="hljs-number">1</span>] * cur) % MOD;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (c[i + <span class="hljs-number">1</span>] == <span class="hljs-number">-1</span> || c[i + <span class="hljs-number">1</span>] == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span> (y == <span class="hljs-number">0</span>)</span><br><span class="line">                            f[i + <span class="hljs-number">1</span>][k ^ <span class="hljs-number">1</span>][<span class="hljs-number">1</span>][y] =</span><br><span class="line">                                (f[i + <span class="hljs-number">1</span>][k ^ <span class="hljs-number">1</span>][<span class="hljs-number">1</span>][y] + <span class="hljs-number">1l</span>l * pow2[i] * cur) % MOD;</span><br><span class="line">                        <span class="hljs-keyword">else</span></span><br><span class="line">                            f[i + <span class="hljs-number">1</span>][k ^ <span class="hljs-number">1</span>][<span class="hljs-number">1</span>][y] =</span><br><span class="line">                                (f[i + <span class="hljs-number">1</span>][k ^ <span class="hljs-number">1</span>][<span class="hljs-number">1</span>][y] + <span class="hljs-number">1l</span>l * pow2[i - <span class="hljs-number">1</span>] * cur) % MOD,</span><br><span class="line">                            f[i + <span class="hljs-number">1</span>][k][x][y] =</span><br><span class="line">                                (f[i + <span class="hljs-number">1</span>][k][x][y] + <span class="hljs-number">1l</span>l * pow2[i - <span class="hljs-number">1</span>] * cur) % MOD;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, (f[n][p][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] + f[n][p][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] + f[n][p][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + f[n][p][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]) % MOD);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/6497&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#6497. 「雅礼集训 2018 Day1」图&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;题目概括征集中~&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="动态规划" scheme="https://tth37.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="数学" scheme="https://tth37.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Sometimes Naive</title>
    <link href="https://tth37.cn/2019/10/28/solution-jsk-4594C/"/>
    <id>https://tth37.cn/2019/10/28/solution-jsk-4594C/</id>
    <published>2019-10-28T14:33:25.000Z</published>
    <updated>2019-11-25T16:00:22.685Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nanti.jisuanke.com/t/41979" target="_blank" rel="noopener">4594C Sometimes Naive</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>题目概括征集中~</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>神 仙 题</p><p>虽然做完后想想不是很难……但哪道题不是如此呢TAT</p><p>易得每次询问中 $c$ 个人的集合点为 $\text{lca}(v_1,v_2,..,v_c)$ 。每个人到集合点的路径上所经过的特产看作一个集合。可以采用倍增和 <code>bitset</code> 优化求出所有的集合，由于本题卡空间，倍增需要使用滚动数组。代码实现非常致郁。</p><p>在预处理出集合信息后，考虑如何回答询问。不妨二分答案 $ans$，构造二分图 $G$：二分图左侧有 $c\times ans$ 个节点，表示共 $c$ 个人，每人购买 $ans$ 个物品；右侧有 $m$ 个节点，表示所有特产。如果某个人可以购买特产 $k$ （即 $k$ 在此人到集合点的路径上），则在对应节点间连边。不难发现，如果存在使左侧节点全部匹配的<strong>完备匹配</strong>，则 $ans$ 合法。</p><p>考虑优化。</p><blockquote><p>Hall 定理：</p><p>记 $M(X)$ 表示与点集 $X$ 直接相连的点集。</p><p>如果二分图 $G$ 中，$\forall X\in U,|X|\le |M(X)|$  则二分图 $G$ 存在完备匹配。</p></blockquote><p>因此我们只需枚举二分图点集中的所有子集，即可判断 $ans$ 是否合法。</p><p>进一步观察可以发现，$M(U)$ 与二分出的 $ans$ 无关，而 $|X|=|U|\times ans$。也就是说，我们需要找到一个最大的 $ans$，使得 $|U|\times ans\le |M(U)|$ 恒成立。因此不必二分答案，直接求解 $ans=\min\lbrace|M(U)|/|U|\rbrace$ 即可。</p><p>代码虽不长却极端致郁。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">300005</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXQ = <span class="hljs-number">50005</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, q;</span><br><span class="line"><span class="hljs-keyword">int</span> f[MAXN][<span class="hljs-number">21</span>], dep[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> h[MAXQ][<span class="hljs-number">6</span>], c[MAXN], a[MAXQ][<span class="hljs-number">6</span>], t[MAXN][<span class="hljs-number">21</span>];</span><br><span class="line"><span class="hljs-built_in">bitset</span>&lt;1005&gt; g[MAXN]; </span><br><span class="line"><span class="hljs-built_in">bitset</span>&lt;1005&gt; s[MAXQ][<span class="hljs-number">6</span>]; </span><br><span class="line"><span class="hljs-built_in">bitset</span>&lt;1005&gt; x[<span class="hljs-number">35</span>]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Lca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (dep[u] &lt; dep[v]) swap(u, v);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">19</span>; i &gt;= <span class="hljs-number">0</span>; --i)</span><br><span class="line">        <span class="hljs-keyword">if</span> (dep[f[u][i]] &gt;= dep[v]) u = f[u][i];</span><br><span class="line">    <span class="hljs-keyword">if</span> (u == v) <span class="hljs-keyword">return</span> u;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">19</span>; i &gt;= <span class="hljs-number">0</span>; --i)</span><br><span class="line">        <span class="hljs-keyword">if</span> (f[u][i] != f[v][i]) u = f[u][i], v = f[v][i];</span><br><span class="line">    <span class="hljs-keyword">return</span> f[u][<span class="hljs-number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    dep[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;f[i][<span class="hljs-number">0</span>]), dep[i] = dep[f[i][<span class="hljs-number">0</span>]] + <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">19</span>; ++j)</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            f[i][j] = f[f[i][j - <span class="hljs-number">1</span>]][j - <span class="hljs-number">1</span>];</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> tmp;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;tmp);</span><br><span class="line">        g[i][tmp] = <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;c[i]);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= c[i]; ++j) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i][j]), s[i][j] = g[a[i][j]];</span><br><span class="line">        <span class="hljs-keyword">int</span> lca = a[i][<span class="hljs-number">1</span>];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt;= c[i]; ++j) lca = Lca(lca, a[i][j]);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= c[i]; ++j) h[i][j] = dep[a[i][j]] - dep[lca];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; --i) g[i] |= g[f[i][<span class="hljs-number">0</span>]];</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">19</span>; ++j) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) </span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= c[i]; ++k)</span><br><span class="line">                <span class="hljs-keyword">if</span> (h[i][k] &amp; (<span class="hljs-number">1</span> &lt;&lt; j)) s[i][k] |= g[a[i][k]], a[i][k] = f[a[i][k]][j];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; --i) g[i] = (g[i] | g[f[i][j]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> ans = INF;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt; (<span class="hljs-number">1</span> &lt;&lt; c[i]); ++k) &#123;</span><br><span class="line">            x[k].reset();</span><br><span class="line">            <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= c[i]; ++j) </span><br><span class="line">                <span class="hljs-keyword">if</span> (k &amp; (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))) </span><br><span class="line">                    tmp++, x[k] |= s[i][j];</span><br><span class="line">            ans = min(ans, (<span class="hljs-keyword">int</span>)x[k].count() / tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, ans * c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41979&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;4594C Sometimes Naive&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;题目概括征集中~&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="计蒜客" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/%E8%AE%A1%E8%92%9C%E5%AE%A2/"/>
    
    
      <category term="最近公共祖先" scheme="https://tth37.cn/tags/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    
      <category term="二分图匹配" scheme="https://tth37.cn/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>题解-计蒜客-4594B Too Simple</title>
    <link href="https://tth37.cn/2019/10/28/solution-jsk-4594B/"/>
    <id>https://tth37.cn/2019/10/28/solution-jsk-4594B/</id>
    <published>2019-10-28T14:33:19.000Z</published>
    <updated>2019-10-28T15:08:09.089Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Hey, password is required here.">    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="cb6e03f1f6a09d393f6acf0eded1c65b298a6c4d46cd91290659be8f324324a1"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      暂不公开
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="数学" scheme="https://tth37.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>题解-计蒜客-4594A Too Young</title>
    <link href="https://tth37.cn/2019/10/28/solution-jsk-4594A/"/>
    <id>https://tth37.cn/2019/10/28/solution-jsk-4594A/</id>
    <published>2019-10-28T14:33:11.000Z</published>
    <updated>2019-10-28T14:45:14.828Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Hey, password is required here.">    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="1da9317495994d03310bdd38199f4133a90d78254af77684964a52124fc21fb8"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      暂不公开
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="动态规划" scheme="https://tth37.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="背包" scheme="https://tth37.cn/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>题解-计蒜客-4593C会和</title>
    <link href="https://tth37.cn/2019/10/27/solution-jsk-4593C/"/>
    <id>https://tth37.cn/2019/10/27/solution-jsk-4593C/</id>
    <published>2019-10-26T16:06:17.000Z</published>
    <updated>2019-10-26T16:16:59.282Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Hey, password is required here.">    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="66bae9f25fab7808d334584ec2cc48162ecd3b11581a4106f7003155ff13354d"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      暂不公开
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="主席树" scheme="https://tth37.cn/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
      <category term="dfs序" scheme="https://tth37.cn/tags/dfs%E5%BA%8F/"/>
    
      <category term="最近公共祖先" scheme="https://tth37.cn/tags/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    
      <category term="栈" scheme="https://tth37.cn/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>题解-LibreOJ-6033「雅礼集训 2017 Day2」棋盘游戏</title>
    <link href="https://tth37.cn/2019/10/25/solution-loj-6033/"/>
    <id>https://tth37.cn/2019/10/25/solution-loj-6033/</id>
    <published>2019-10-24T16:26:37.000Z</published>
    <updated>2019-11-24T15:50:27.702Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p><a href="https://loj.ac/problem/6033" target="_blank" rel="noopener">题目链接(LibreOJ)</a></p></div><blockquote><p>弱弱的征集题目概括</p></blockquote><a id="more"></a><p>二分图博弈。首先是个人都能看出来将棋盘黑白染色、建二分图。</p><p>假设二分图存在完美匹配，则无论起点在哪，Bob 必胜。显然 Bob 可以一直沿匹配边走，Alice 只能走非匹配边直到无路可走。</p><p>假设二分图不存在完美匹配，则如果起点为<strong>二分图最大匹配的必配点</strong>，则 Bob 必胜；反之 Alice 必胜。</p><div class="note danger"><p> 证明？</p><p>如何求解某个点是否为二分图最大匹配的必配点？</p><p>考虑找到二分图上所有<strong>非必配点</strong>。先求解出一个二分图最大匹配。显然，不在该最大匹配中的点均为非必配点。</p><p>对于该最大匹配中的点，考虑如果能以之为起点、找到以非匹配点为终点的交错轨，则该点为非必配点。</p><p>根据 <a href="https://www.cnblogs.com/zwfymqz/p/10538538.html" target="_blank" rel="noopener">这篇博客</a> 中的思路，可以将不在最大匹配中的点作为起点，找到的所有交错轨上的点均为非必配点。</p><p>将非必配点输出即可。</p><div class="note warning"><p> 建图很关键，不要犯傻；否则调都调不出来</p><p>代码如下：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> nx[] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;</span><br><span class="line"><span class="hljs-keyword">int</span> ny[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> N, M;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> c[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> cnt1, cnt2;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; G[<span class="hljs-number">20005</span>];</span><br><span class="line"><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">20005</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> m[<span class="hljs-number">20005</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">bool</span> tag[<span class="hljs-number">20005</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; Out;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    vis[u] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = *it;</span><br><span class="line">        <span class="hljs-keyword">if</span> (m[v] == <span class="hljs-number">0</span> || find(m[v])) &#123;</span><br><span class="line">            m[u] = v, m[v] = u;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    vis[u] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (m[u] == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = G[m[u]].begin(); it != G[m[u]].end(); it++) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = *it;</span><br><span class="line">        <span class="hljs-keyword">if</span> (dfs(v)) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">            <span class="hljs-keyword">char</span> ch;</span><br><span class="line">            <span class="hljs-built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">            <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'#'</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span> ((i + j) &amp; <span class="hljs-number">1</span>) c[i][j] = ++cnt1;</span><br><span class="line">            <span class="hljs-keyword">else</span> c[i][j] = ++cnt2 + <span class="hljs-number">10000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (c[i][j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; ++k) &#123;</span><br><span class="line">                <span class="hljs-keyword">int</span> ti = i + nx[k], tj = j + ny[k];</span><br><span class="line">                <span class="hljs-keyword">if</span> (ti &gt;= <span class="hljs-number">1</span> &amp;&amp; ti &lt;= N &amp;&amp; tj &gt;= <span class="hljs-number">1</span> &amp;&amp; tj &lt;= M) &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (c[ti][tj]) G[c[i][j]].push_back(c[ti][tj]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt1; ++i) &#123;</span><br><span class="line">        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));</span><br><span class="line">        find(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (c[i][j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line">            <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));</span><br><span class="line">            <span class="hljs-keyword">if</span> (dfs(c[i][j])) &#123;</span><br><span class="line">                Out.push_back(make_pair(i, j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, Out.size());</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-keyword">int</span>)Out.size(); ++i)</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>, Out[i].first, Out[i].second);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;
&lt;a href=&quot;https://loj.ac/problem/6033&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接(LibreOJ)&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;弱弱的征集题目概括&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="二分图匹配" scheme="https://tth37.cn/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    
      <category term="博弈论" scheme="https://tth37.cn/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>题解-LibreOJ-2255炸弹</title>
    <link href="https://tth37.cn/2019/10/22/solution-loj-2255/"/>
    <id>https://tth37.cn/2019/10/22/solution-loj-2255/</id>
    <published>2019-10-22T15:00:21.000Z</published>
    <updated>2019-10-22T15:15:32.984Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p><a href="https://www.luogu.org/problem/P5025" target="_blank" rel="noopener">题目链接(Luogu)</a><br><a href="https://loj.ac/problem/2255" target="_blank" rel="noopener">题目链接(LibreOJ)</a></p></div><blockquote><p>在一条直线上有 $n$ 个炸弹，每个炸弹给定其坐标和爆炸半径；求出引爆每个炸弹时，共有多少炸弹被连锁引爆。</p><p>$n\le 500000$</p><p>我感谢我自己</p></blockquote><a id="more"></a><p>很巧妙的建模方法，是作者在学校 yy 出来的。</p><p>考虑朴素做法。将每个炸弹向其能引爆的炸弹连边，求出强连通分量后缩点，在 DAG 上乱搞得到答案。</p><p>然而这种解法的边数在 $n^2$ 级别。考虑优化。</p><p>注意到一个性质：每个炸弹能引爆的所有炸弹必然属于属于一段<strong>连续区间</strong>。</p><p>在原炸弹序列上建一棵<strong>线段树</strong>，线段树上的所有父节点向儿子连边。对于一个节点向一段区间内节点的连边操作，我们可以将这些边连到区间的父节点上（好比线段树的区间操作）。边数被控制在 $n\log n$ 级别。</p><p>缩点并得到 DAG 后，发现不能简单地进行答案统计；因为会产生<strong>重复</strong>的状态转移。</p><p>观察到本题的一个特殊性质：被连锁反应引爆的范围一定仍然是一段<strong>连续区间</strong>。我们只需维护区间的<strong>最小值和最大值</strong>，并以此进行状态转移即可。</p><div class="note danger"><p> 是否存在此类问题通解？</p><div class="note danger"><p> 是否存在不用建图的解法？</p><div class="note warning"><p> ge(x) 表示大于等于 x 的最小坐标，le(x) 表示小于等于 x 的最大坐标</p><p>实现极为简单。代码如下：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson(u) node[u].l</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson(u) node[u].r</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ge(x) (lower_bound(a + 1, a + N + 1, x) - a)</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> le(x) (upper_bound(a + 1, a + N + 1, x) - a - 1)</span></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1000005</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1000000007</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> l, r;</span><br><span class="line">&#125;node[maxn &lt;&lt; <span class="hljs-number">1</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> N, R, ans;</span><br><span class="line">ll a[maxn], r[maxn];</span><br><span class="line"><span class="hljs-keyword">int</span> num[maxn], range[maxn][<span class="hljs-number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; G[maxn], SCC[maxn];</span><br><span class="line"><span class="hljs-keyword">int</span> w[maxn], dfn[maxn], low[maxn], dfn_idx;</span><br><span class="line"><span class="hljs-keyword">int</span> scc[maxn], scc_cnt;</span><br><span class="line"><span class="hljs-keyword">bool</span> ins[maxn];</span><br><span class="line"><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> f[maxn][<span class="hljs-number">2</span>];</span><br><span class="line"><span class="hljs-keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    u = ++cnt;</span><br><span class="line">    range[u][<span class="hljs-number">0</span>] = l, range[u][<span class="hljs-number">1</span>] = r;</span><br><span class="line">    <span class="hljs-keyword">if</span> (l == r) &#123;</span><br><span class="line">        num[l] = u;</span><br><span class="line">        w[u] = <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">    build(lson(u), l, mid), build(rson(u), mid + <span class="hljs-number">1</span>, r);</span><br><span class="line">    G[u].push_back(lson(u)), G[u].push_back(rson(u));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_edge_range</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> qu, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">        G[qu].push_back(u);</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (ql &lt;= mid) add_edge_range(lson(u), l, mid, qu, ql, qr);</span><br><span class="line">    <span class="hljs-keyword">if</span> (mid &lt; qr) add_edge_range(rson(u), mid + <span class="hljs-number">1</span>, r, qu, ql, qr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    low[u] = dfn[u] = ++dfn_idx;</span><br><span class="line">    ins[u] = <span class="hljs-number">1</span>;</span><br><span class="line">    s.push(u);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = *it;</span><br><span class="line">        <span class="hljs-keyword">if</span> (dfn[v] == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            low[u] = min(low[u], low[v]);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ins[v]) &#123;</span><br><span class="line">            low[u] = min(low[u], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (low[u] == dfn[u]) &#123;</span><br><span class="line">        scc_cnt++;</span><br><span class="line">        f[scc_cnt][<span class="hljs-number">0</span>] = inf, f[scc_cnt][<span class="hljs-number">1</span>] = -inf;</span><br><span class="line">        <span class="hljs-keyword">while</span> (ins[u]) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> t = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            ins[t] = <span class="hljs-number">0</span>;</span><br><span class="line">            scc[t] = scc_cnt;</span><br><span class="line">            f[scc_cnt][<span class="hljs-number">0</span>] = min(f[scc_cnt][<span class="hljs-number">0</span>], range[t][<span class="hljs-number">0</span>]);</span><br><span class="line">            f[scc_cnt][<span class="hljs-number">1</span>] = max(f[scc_cnt][<span class="hljs-number">1</span>], range[t][<span class="hljs-number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">return</span>;</span><br><span class="line">    vis[u] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = SCC[u].begin(); it != SCC[u].end(); it++) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = *it;</span><br><span class="line">        dp(v);</span><br><span class="line">        f[u][<span class="hljs-number">0</span>] = min(f[u][<span class="hljs-number">0</span>], f[v][<span class="hljs-number">0</span>]);</span><br><span class="line">        f[u][<span class="hljs-number">1</span>] = max(f[u][<span class="hljs-number">1</span>], f[v][<span class="hljs-number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;N);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld%lld"</span>, &amp;a[i], &amp;r[i]);</span><br><span class="line">    build(R, <span class="hljs-number">1</span>, N);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)</span><br><span class="line">        add_edge_range(R, <span class="hljs-number">1</span>, N, num[i], ge(a[i] - r[i]), le(a[i] + r[i]));</span><br><span class="line">    tarjan(<span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= N; ++u) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> v = *it;</span><br><span class="line">            <span class="hljs-keyword">if</span> (scc[u] != scc[v])</span><br><span class="line">                SCC[scc[u]].push_back(scc[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= scc_cnt; ++i)</span><br><span class="line">        dp(i);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        ans = (ans + <span class="hljs-number">1l</span>l * i * (f[scc[num[i]]][<span class="hljs-number">1</span>] - f[scc[num[i]]][<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, ans);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;
&lt;a href=&quot;https://www.luogu.org/problem/P5025&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接(Luogu)&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://loj.ac/problem/2255&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接(LibreOJ)&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;在一条直线上有 $n$ 个炸弹，每个炸弹给定其坐标和爆炸半径；求出引爆每个炸弹时，共有多少炸弹被连锁引爆。&lt;/p&gt;
&lt;p&gt;$n\le 500000$&lt;/p&gt;
&lt;p&gt;我感谢我自己&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="线段树" scheme="https://tth37.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="强连通分量" scheme="https://tth37.cn/tags/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>题解-LibreOJ-6029「雅礼集训 2017 Day1」市场</title>
    <link href="https://tth37.cn/2019/10/21/solution-loj-6029/"/>
    <id>https://tth37.cn/2019/10/21/solution-loj-6029/</id>
    <published>2019-10-21T15:49:35.000Z</published>
    <updated>2019-11-24T15:50:35.133Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p><a href="https://loj.ac/problem/6029" target="_blank" rel="noopener">题目链接(LibreOJ)</a></p></div><blockquote><p>维护一个数据结构，支持区间加减、区间除法（下取整）、区间查询最值、区间查询总和操作。</p><p>$n \le 100000, q \le 100000$</p></blockquote><a id="more"></a><p>线段树区间除法模板题。可以玄学分析复杂度。</p><p>观察到对某个区间进行除法操作后，其区间内的权值<strong>整体减小某个值</strong>，当且仅当该区间的<strong>最大元素与最小元素减小的值相等</strong>。因此区间除法可以转化为区间减法，只需判断是否满足区间减的条件即可。</p><div class="note warning"><p>注意 '/' 运算符对数字进行向零取整，并不是向下取整</p><p>实现非常简单。代码如下：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson(u) node[u].l</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson(u) node[u].r</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> tag(u) node[u].tag</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxx(u) node[u].maxx</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> minn(u) node[u].minn</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sum(u) node[u].sum</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100005</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> l, r, tag, minn, maxx;</span><br><span class="line">    ll sum;</span><br><span class="line">&#125;node[maxn &lt;&lt; <span class="hljs-number">1</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> N, Q, R;</span><br><span class="line"><span class="hljs-keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (tag(u)) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> llen = mid - l + <span class="hljs-number">1</span>, rlen = r - mid;</span><br><span class="line">        sum(lson(u)) += <span class="hljs-number">1l</span>l * tag(u) * llen, sum(rson(u)) += <span class="hljs-number">1l</span>l * tag(u) * rlen;</span><br><span class="line">        minn(lson(u)) += tag(u), minn(rson(u)) += tag(u);</span><br><span class="line">        maxx(lson(u)) += tag(u), maxx(rson(u)) += tag(u);</span><br><span class="line">        tag(lson(u)) += tag(u), tag(rson(u)) += tag(u);</span><br><span class="line">        tag(u) = <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    sum(u) = sum(lson(u)) + sum(rson(u));</span><br><span class="line">    minn(u) = min(minn(lson(u)), minn(rson(u)));</span><br><span class="line">    maxx(u) = max(maxx(lson(u)), maxx(rson(u)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    u = ++cnt;</span><br><span class="line">    sum(u) = <span class="hljs-number">0</span>, minn(u) = inf, maxx(u) = -inf;</span><br><span class="line">    <span class="hljs-keyword">if</span> (l == r) &#123;</span><br><span class="line">        sum(u) = minn(u) = maxx(u) = a[l];</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">    build(lson(u), l, mid), build(rson(u), mid + <span class="hljs-number">1</span>, r);</span><br><span class="line">    pushup(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modify_range_add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr, <span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">        tag(u) += val;</span><br><span class="line">        sum(u) += <span class="hljs-number">1l</span>l * val * (r - l + <span class="hljs-number">1</span>);</span><br><span class="line">        minn(u) += val;</span><br><span class="line">        maxx(u) += val;</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(u, l, r);</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (ql &lt;= mid) modify_range_add(lson(u), l, mid, ql, qr, val);</span><br><span class="line">    <span class="hljs-keyword">if</span> (mid &lt; qr) modify_range_add(rson(u), mid + <span class="hljs-number">1</span>, r, ql, qr, val);</span><br><span class="line">    pushup(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modify_range_divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr, <span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> dmin = minn(u) - <span class="hljs-built_in">floor</span>(<span class="hljs-number">1.0</span> * minn(u) / val), dmax = maxx(u) - <span class="hljs-built_in">floor</span>(<span class="hljs-number">1.0</span> * maxx(u) / val);</span><br><span class="line">        <span class="hljs-keyword">if</span> (dmin == dmax) &#123;</span><br><span class="line">            tag(u) -= dmin;</span><br><span class="line">            sum(u) -= <span class="hljs-number">1l</span>l * dmin * (r - l + <span class="hljs-number">1</span>);</span><br><span class="line">            minn(u) -= dmin;</span><br><span class="line">            maxx(u) -= dmin;</span><br><span class="line">            <span class="hljs-keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(u, l, r);</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (ql &lt;= mid) modify_range_divide(lson(u), l, mid, ql, qr, val);</span><br><span class="line">    <span class="hljs-keyword">if</span> (mid &lt; qr) modify_range_divide(rson(u), mid + <span class="hljs-number">1</span>, r, ql, qr, val);</span><br><span class="line">    pushup(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query_range_min</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="hljs-keyword">return</span> minn(u);</span><br><span class="line">    pushdown(u, l, r);</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>, ret = inf;</span><br><span class="line">    <span class="hljs-keyword">if</span> (ql &lt;= mid) ret = min(ret, query_range_min(lson(u), l, mid, ql, qr));</span><br><span class="line">    <span class="hljs-keyword">if</span> (mid &lt; qr) ret = min(ret, query_range_min(rson(u), mid + <span class="hljs-number">1</span>, r, ql, qr));</span><br><span class="line">    <span class="hljs-keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">query_range_sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="hljs-keyword">return</span> sum(u);</span><br><span class="line">    pushdown(u, l, r);</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>; ll ret = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (ql &lt;= mid) ret += query_range_sum(lson(u), l, mid, ql, qr);</span><br><span class="line">    <span class="hljs-keyword">if</span> (mid &lt; qr) ret += query_range_sum(rson(u), mid + <span class="hljs-number">1</span>, r, ql, qr);</span><br><span class="line">    <span class="hljs-keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;N, &amp;Q);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    build(R, <span class="hljs-number">0</span>, N - <span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= Q; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> op, l, r, x;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;op, &amp;l, &amp;r);</span><br><span class="line">        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;x), modify_range_add(R, <span class="hljs-number">0</span>, N - <span class="hljs-number">1</span>, l, r, x);</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;x), modify_range_divide(R, <span class="hljs-number">0</span>, N - <span class="hljs-number">1</span>, l, r, x);</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, query_range_min(R, <span class="hljs-number">0</span>, N - <span class="hljs-number">1</span>, l, r));</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, query_range_sum(R, <span class="hljs-number">0</span>, N - <span class="hljs-number">1</span>, l, r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;
&lt;a href=&quot;https://loj.ac/problem/6029&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接(LibreOJ)&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;维护一个数据结构，支持区间加减、区间除法（下取整）、区间查询最值、区间查询总和操作。&lt;/p&gt;
&lt;p&gt;$n \le 100000, q \le 100000$&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="线段树" scheme="https://tth37.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>2019CSP-S复习计划</title>
    <link href="https://tth37.cn/2019/10/21/schedule-2019-CSP/"/>
    <id>https://tth37.cn/2019/10/21/schedule-2019-CSP/</id>
    <published>2019-10-21T14:09:24.000Z</published>
    <updated>2019-11-20T15:41:14.973Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Hey, password is required here.">    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="da80f6bcb81ef7b4b9be8b0eb3d62c6df65c7690a41113a584dd607aacb5711b">196ffd93c2eb511d907d1250bbad7b244cfc7e5f54de813a221544db5cee153c561665681fddcf94359c724b2dd5e524df2b3305c77d30d33f91cde1278a6fdb61014e146ae0aed0eb9e8c97dadd1ea40f990420163cf344460f9bd2176cfee5a112345d0c001d437253a962335d92b3ee6d39c1022d52c9ddb38fbdb05034efbd065ad1f133bb1b5d8e802c70c4be718dd8a1a78e47f6180790adc33b3cc3a771d89c8932b545ab5cddf481f9d9e540fa633772505e6fc289a46c127a6f277ba37d19d02427170d24542f1b1f1070ff35569b5c2af19ab9d894fcf24595d1fe15d79022dce34d4be963ba7f69945b34b07d62fc9d0a6bb7b112e09eca28c182907c78475a7c031e8c588bd609159b23b56ec7f05f88fc6cc0a7e52891a013e5c3e932622c0c9c56b086631b901df017884623defc9c97f20f12d28d3ca4ea894198e8eccbad168b2111ae48efd1f419f9d2bb334b509b46c10008ac3d4d3035c1346f07119c1840a9baf0671504108bdd067679bca4c98009bf678fb1e3083a5ded9c6b09f98de91130a3a99037c93a6f5670fa2ecec5c5ff12f526b31396a69e6d1e085eaa7f662d8fb6f74ed9b0bfadfd31fd8be763f2a073945105206119a5b459ed969298f475c7e8274dad5ba4c2e9760f84d77767c6ba5b6e8bdb06fdc593b17e7d3a368882798b9443e57ff3dd32be3ef170809a15efd30e43f9799f8298dd8aa211fd6139508a46a8a2ffc15900c4106761ea3064aecdce353f325d1565510d1c16e0b26d876c795ff4bb64da26e6725eb941b2a9a1d7644ee5576d0ac6c22dbaee67e97899515e7ca4dd1032b56d5d6ac31c9c81a2b08deff2f54bc6828a54b7048ed5956ee650a1248b455f948a0c88761e949e685298d64e983037ca7dfd5fbea86f16dc4fab5bd1269c3503164fbdc1e033997cf3488a1b5ec8cf4306c1a51acdaab620645b54302ced0c523e38f0be3b79f48bdf464c5c716d58e5525f7e01d32440029644fbfd673292e3b8130ed3f215e4bb5431012202d5ecebf7a11f61b0d28b4b3badf8363bff62e3a95e19185bd4dc4dd35a4fbecda73fb0f30d3a59d2bd2b445ae613242f5c343a08c2118320a92ea430999a0be1c34ab5bf57845c19370e16143fe82ba3b2c83cf0a211f7a78064a088fa8a0c183b075861b3d1cb63d099b93aa20e9a1519b249ac5b7c928660354648c1146caac0a4d627cb75f304d103a01141f624cfd826f5423c5fcdaf63668074a77f0e2f80177118ce29ea5761cbb28b54971d7ee4eca8c268acad5b1bd123d51fc6af577c1cd72dd3e844ff39c60e8fc76bc12ab158adec1b29ff3d81fe631e981e011f96d1d4de76d8e15aaef49e2a712a292b0455e0f9f1274f0aa5cd5a899012449e81c95dc54e4f6e7f3a40d3089daf1e5e9208116366f7cfb9b653ef9b332213eb9c03fd423c900a8249b512613428496580ceb967eebb4cf8d7900245848c3d33a4503492b1cec58b1021e40052607b338ca43be705dab5e34115822e748dea16acd35164ac06acf4b66f6865d4d29184faaff8ef4904aba6a8b460662c50167550a124d4a67312a49539c71b23af38145962500f40ecb8fa5baa15dfae10485ade2006f730bbd81ce4780ede11a992401c9d599ed10781fe120ceb41dbef00f15f6aab41c0cd1a397d108dcc94008ee513541a40204617c4f7790cd15517744ecd4c4b357725ec218693117e92d96d715c623a0771b44d0c209c5aa94b3bf5232ed58faab3dc8cd9a26a344fb7e53955038272a59325b1432e25bdbf91761dcd99df01ec1ba018f57626b49f19748b13614ad897ba0451acab82d9496a0725e32425a6e9136aa0d056238bd30e6210810d0d7097b50eb1e04720d9997801298691bd46f9367c30702669f8e8f9bb1bace3f2d0c3b0beabae5e9a3af4d81cf431d5bddadf588bf6d59154891bbb708da242268830754f19d5a0fefd82240462d68f882864be707d4ec0dd6b224a9ff848b842a2e97767cbfcc95b5ea5d8d55496f37aa45d97289ff8e9dbde5f0bfd92b6bfebbd2b1a3c700722c6df58a8e36aef84d0854a169e9830dfe0569721ab9c5911395045ce9701202a8f3ba5540ca98c826679a0835064890b86dc1aa91f7e406904e0a2e966f8556d0bc755dcd386e4a10121e139b549cbb95e590aaebde074f7f587f6716eda4c8c711087286fdde79d55e5d157e932c37aa035fbfb0443e71adbcb42ebd9c9e3fe3aa6301584d04af68c3d7935388087785aac633073b915444eda35e866d408ece21903f07222c2d29717b89c04675d3c10c0554fb25bce8af8162080a7dc91c682bc714940d79fe230c6f75dc53558e63b6fd661fb82c6c530697af3f4fc2f2522d5d683ef90fdd7c59e9a00497f2bc545866f63444e10f5be66c16c641c0aaa8b697123f183809f8f8a3124fd91ab9e39344391ff339bca3fd3146f277812119681ced27ed885fcaaa3ec5b9a57475369c3e6aa5cfa48277e5a63ec93bfea56f741aab686c148fe1d57070a6d172bebb74e3dc025585009ee40ed02516d0c608a3fd6ca5849c83303ffb4c688e691322423e297880dfeea397e6ac5284edd7174c6e439c1db39b5a68a562c7903fc5d4e2e7bb408be222352c3500cf34c3ab93f33c79a705f8e5fecd0aa8109ecf7d234c7a341822ca099273dd6fd22b0d4c4fbd509f1cdc285bc15fcb7d60002ed4347589311a723a17504e4490177ab83a511a0351b9ed0149a452bc3ef016084cd49c4d43fc6dd88c6dfdab0e9f78d40a5a8a2e395ddc9edac3dbfacc6eb899c3785762806e5881024106ed63e9cad1960dfddc9dd55e9f43e8e505b90e8f51d8a5c4e9da4f420701cc5ca144dd8e55ee1daebf9761f7e70773ec30a836e149a934e1e1113716fd59a851bd474fa65d6dc2aaac1480d26f95f7e0d48d9e491d804fb02f2cf715e51db20814c5f696181b5018cf4b69b6b564a0c75401f7c2ccc05dacfa7ec831c030d8f5af36eb46897ec736aabc1f9f9c2c32d0ebe6ba1e1b49df2b5ca712dada664b92620d3ba06a81b63a32eef5898e6a49d077339cefbddc9cc1c0b142ed4d2f1e5d7dd82eb4ce41f088f47e4d04e459fe7e6cb67f57c375a72a91c085ef3730d8d90946aefa886edc66917c8564ba87bb0cbc8f2a866c3c88693d98560e5550c771c2fab2d62699a1f576021700b0c07e8e4f665cecc8bb49b48581ba8a68bd189b406a6c077fb89e72ae8b5a6018d5a3bd1cd39d587f00fc630e129211c1d70efd596b34e9c75518261f2ad427031645630ca823d232ad0045cc6892fb4624ed169bc56b8fee7bc41d2a616ee4e87f1587b8e105843d443026aa864503a8aca0ea4ada37e50c0ce090e6b470e0c12f03677c71800546ef00c2505ec5af2f4e060d3046b3696e13370abfa7a16cf0516c6add1669c9a9617ed1972b5de9983a80a13ee81966d34290b571b1147937987d13102545f3a0a0bb0f40d253e5126cf16e31471ecf2e113026144a3a8cbbaf28f224911973dc4a8b2ccd69d5839af9bbd99d5c757cc630b2d90617311a9cc7d5c4517298ebc8342064daa3822a2d33a3f948b1236f3ffd31a56654721f493246b1b20d4f8251e995f33706d9ef73375212aee9bbaa471f75187c810049d48a8b365fefb06a44ffda54ec44ded7694a0d74431e1dd8aeb2d0ad179b1539e811276f87391bfde7a1f2fb11b54b60f1ea23bd16fdd6808e9d34949dff543efd31789509297195da0972a8399388b4f39bc07ee81b4697a786b3604ae7cff07935555ba0c5022b2d4c95c94d8cf5497485771933ac85a85ed3d72c784fc2135bbe38c8b9785b1835cca01bfb0425be139b93ac0321dfa34ea10a2536b7e8b7122128e8e165a4214af8d5266dd65754cd8b0dd9475530132bdaaadb75659b7952356fe7382966a85c2be76cd03d03ba029bf95632e94c61c4c5c6e862d0c6d3eed9f7961b9ef87ac673e8bbf8b2d6a6e02cc6e1e0082ad72369a5a2e9ee3e5b5bd9880ae46d660565cceca2e468dd02f14a7deec8304d7bc13a3dfd6b28de218a9613180659eda29a7669c4d2796b017a39f7947d25277a3cd9935894ab42ef26c159e985dcbb84c38038c4fad55c8481c742aa73d619f97f65897b211589d7979e0</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      复习计划！自用
    
    </summary>
    
      <category term="计划" scheme="https://tth37.cn/categories/%E8%AE%A1%E5%88%92/"/>
    
    
  </entry>
  
  <entry>
    <title>题解-LibreOJ-6495「雅礼集训 2018 Day1」树</title>
    <link href="https://tth37.cn/2019/10/19/solution-loj-6495/"/>
    <id>https://tth37.cn/2019/10/19/solution-loj-6495/</id>
    <published>2019-10-19T14:21:29.000Z</published>
    <updated>2019-11-24T15:50:43.724Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p><a href="https://loj.ac/problem/6495" target="_blank" rel="noopener">题目链接(LibreOJ)</a></p></div><blockquote><p>题目概括征集中~</p><p><strong>重金（5 RMB）征集状压 dp 解法~</strong> <a href>@所有人</a></p></blockquote><div class="note default"><p>这题也太巧妙了叭！ ——Mr.G</p><a id="more"></a><h4 id="Solution-1-O-n-4"><a href="#Solution-1-O-n-4" class="headerlink" title="Solution 1 : $O(n^4)$"></a>Solution 1 : $O(n^4)$</h4><p>注意到节点 2 的父节点一定为 1；因此可以将以 2 为根的子树与剩余部分分开讨论。</p><p>定义状态 $f[i][j]$ 表示有 $i$ 个节点，深度为 $j$ 的方案数。</p><p>设以 2 为根的子树中共有 $x$ 个节点。情况一：子树 2 的深度恰好为 $j-1$，剩余部分的深度任意；情况二：子树 2 的深度任意，剩余部分的深度恰好为 $j$。</p><p>由于两棵子树的节点编号为 $3…i$ 间的任意整数，所以求出方案数之后需乘上标号的方案数。<br>$$<br>f[i][j]=\sum_{x=1}^{i-1}[\sum_{k=1}^{j}f[x][j-1]\times f[i-x][k]\times {i-2\choose x-1}+\sum_{k=1}^{j-2}f[x][k]\times f[i-x][j]\times{i-2\choose x-1}]<br>$$<br>对于期望，只需将 $\sum_{i=1}^n f[n][i]\times i$ 除以 $(n-1)!$ 即可。</p><p>对于四舍五入，可打表。（正经）</p><p>代码如下：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">30</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> tb[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">ll n, p;</span><br><span class="line">ll fac[maxn], inv[maxn], facinv[maxn];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> fac[n] * facinv[n - m] % p * facinv[m] % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll f[maxn][maxn];</span><br><span class="line">ll ans = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; p;</span><br><span class="line">    fac[<span class="hljs-number">0</span>] = fac[<span class="hljs-number">1</span>] = inv[<span class="hljs-number">1</span>] = facinv[<span class="hljs-number">0</span>] = facinv[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        inv[i] = (p - p / i) * inv[p % i] % p;</span><br><span class="line">        fac[i] = fac[i - <span class="hljs-number">1</span>] * i % p;</span><br><span class="line">        facinv[i] = facinv[i - <span class="hljs-number">1</span>] * inv[i] % p;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, f[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span>; x &lt;= i - <span class="hljs-number">1</span>; ++x) &#123;</span><br><span class="line">                <span class="hljs-keyword">int</span> t1 = <span class="hljs-number">0</span>, t2 = <span class="hljs-number">0</span>;</span><br><span class="line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= j; ++k)</span><br><span class="line">                    t1 = (t1 + f[x][j - <span class="hljs-number">1</span>] * f[i - x][k] % p * C(i - <span class="hljs-number">2</span>, x - <span class="hljs-number">1</span>) % p) % p;</span><br><span class="line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= j - <span class="hljs-number">2</span>; ++k)</span><br><span class="line">                    t2 = (t2 + f[x][k] * f[i - x][j] % p * C(i - <span class="hljs-number">2</span>, x - <span class="hljs-number">1</span>) % p) % p;</span><br><span class="line">                f[i][j] = (f[i][j] + t1 + t2) % p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans = (ans + f[n][i] * i) % p;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)</span><br><span class="line">        ans = (ans * inv[i]) % p;</span><br><span class="line">    <span class="hljs-built_in">cout</span> &lt;&lt; tb[n] &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; ans;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Solution-2-O-2-n-n-2"><a href="#Solution-2-O-2-n-n-2" class="headerlink" title="Solution 2 : $O(2^n*n^2)$"></a>Solution 2 : $O(2^n*n^2)$</h4><div class="note primary"><p>状压 dp 解法 </p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;
&lt;a href=&quot;https://loj.ac/problem/6495&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接(LibreOJ)&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;题目概括征集中~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重金（5 RMB）征集状压 dp 解法~&lt;/strong&gt; &lt;a href&gt;@所有人&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;这题也太巧妙了叭！ ——Mr.G&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="数学" scheme="https://tth37.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="计数dp" scheme="https://tth37.cn/tags/%E8%AE%A1%E6%95%B0dp/"/>
    
      <category term="数学期望" scheme="https://tth37.cn/tags/%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
</feed>
