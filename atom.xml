<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tth37&#39;s Blog</title>
  
  <subtitle>Think twice, Code once</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tth37.cn/"/>
  <updated>2020-01-31T21:55:18.948Z</updated>
  <id>https://tth37.cn/</id>
  
  <author>
    <name>tth37</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「SNOI2019」通信</title>
    <link href="https://tth37.cn/2020/02/01/solution-loj-3097/"/>
    <id>https://tth37.cn/2020/02/01/solution-loj-3097/</id>
    <published>2020-01-31T21:47:29.000Z</published>
    <updated>2020-01-31T21:55:18.948Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/3097" target="_blank" rel="noopener">#3097. 「SNOI2019」通信</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>题目概括咕咕咕（这个好写！）</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>可以参考 <a href="https://tth37.cn/2019/10/22/solution-loj-2255/">「SNOI2017」炸弹</a> 的解法，线段树优化建图。</p><p>本题只需扩展一个维度，用类似可持久化线段树的东西优化建图即可。</p><p>网络流建模最小权路径覆盖。</p><p>代码极端毒瘤且致郁。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> id(x) (lower_bound(b + 1, b + L + 1, x) - b)</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rid(x) b[x]</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson(x) node[x].l</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson(x) node[x].r</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> node_id(x) node[x].node_id</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sum(x) node[x].sum</span></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, ll&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">50005</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXM = <span class="hljs-number">50005</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> cnt_node = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">namespace</span> MCMF &#123;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> u, v, val, <span class="hljs-built_in">cos</span>, next;</span><br><span class="line">&#125; e[MAXM * <span class="hljs-number">2</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> n, m, t = <span class="hljs-number">1</span>, Head[MAXN], v[MAXN], S, T;</span><br><span class="line"><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; q;</span><br><span class="line">ll d[MAXN], Delta;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddEdge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> c)</span> </span>&#123;  </span><br><span class="line">    e[++t] = (Edge)&#123; x, y, v, c, Head[x] &#125;, Head[x] = t;</span><br><span class="line">    e[++t] = (Edge)&#123; y, x, <span class="hljs-number">0</span>, -c, Head[y] &#125;, Head[y] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">Relabel</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> d);</span><br><span class="line">    <span class="hljs-built_in">memset</span>(v, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> v);</span><br><span class="line">    d[T] = <span class="hljs-number">0</span>, v[T] = <span class="hljs-number">1</span>, q.push_front(T);</span><br><span class="line">    <span class="hljs-keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x = q.front();</span><br><span class="line">        q.pop_front(), v[x] = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (q.size() &gt; <span class="hljs-number">1</span> &amp;&amp; d[q.front()] &gt; d[q.back()])</span><br><span class="line">            swap(q.front(), q.back());</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = Head[x], y; i; i = e[i].next)</span><br><span class="line">            <span class="hljs-keyword">if</span> (e[i ^ <span class="hljs-number">1</span>].val &amp;&amp; d[y = e[i].v] &gt; d[x] + e[i ^ <span class="hljs-number">1</span>].<span class="hljs-built_in">cos</span>) &#123;</span><br><span class="line">                d[y] = d[x] + e[i ^ <span class="hljs-number">1</span>].<span class="hljs-built_in">cos</span>;</span><br><span class="line">                <span class="hljs-keyword">if</span> (v[y])</span><br><span class="line">                    <span class="hljs-keyword">continue</span>;</span><br><span class="line">                v[y] = <span class="hljs-literal">true</span>, q.push_back(y);</span><br><span class="line">                <span class="hljs-keyword">if</span> (q.size() &gt; <span class="hljs-number">1</span> &amp;&amp; d[q.front()] &gt; d[q.back()])</span><br><span class="line">                    swap(q.front(), q.back());</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> d[S] != d[<span class="hljs-number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Dinic</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!flow || x == T)</span><br><span class="line">        <span class="hljs-keyword">return</span> flow;</span><br><span class="line">    <span class="hljs-keyword">int</span> residue = flow;</span><br><span class="line">    v[x] = <span class="hljs-literal">true</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = Head[x], y; i; i = e[i].next)</span><br><span class="line">        <span class="hljs-keyword">if</span> (e[i].val &amp;&amp; !v[y = e[i].v] &amp;&amp; !e[i].<span class="hljs-built_in">cos</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> k = Dinic(y, min(e[i].val, residue));</span><br><span class="line">            e[i].val -= k, e[i ^ <span class="hljs-number">1</span>].val += k;</span><br><span class="line">            <span class="hljs-keyword">if</span> ((residue -= k) == <span class="hljs-number">0</span>)</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> flow - residue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> pii <span class="hljs-title">PrimalDual</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> Maxflow = <span class="hljs-number">0</span>;</span><br><span class="line">    ll Mincost = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (Relabel()) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= t; i++) e[i].<span class="hljs-built_in">cos</span> += d[e[i].v] - d[e[i].u];</span><br><span class="line">        Delta += d[S];</span><br><span class="line">        <span class="hljs-keyword">int</span> Flow = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">memset</span>(v, <span class="hljs-number">0x00</span>, <span class="hljs-keyword">sizeof</span> v), (Flow = Dinic(S, INF)))</span><br><span class="line">            Maxflow += Flow, Mincost += <span class="hljs-number">1l</span>l * Flow * Delta;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> pii(Maxflow, Mincost);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="hljs-comment">// namespace MCMF</span></span><br><span class="line"><span class="hljs-keyword">int</span> n, w;</span><br><span class="line">pair&lt;ll, <span class="hljs-keyword">int</span>&gt; a[MAXN];</span><br><span class="line">ll b[MAXN], c[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> L;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> root0[MAXN], root1[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> pos0[MAXN], pos1[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> l, r, node_id, sum;</span><br><span class="line">&#125; node[MAXN * <span class="hljs-number">22</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AddEdge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">bool</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> llen = mid - l + <span class="hljs-number">1</span>, rlen = r - mid;</span><br><span class="line">    <span class="hljs-keyword">int</span> lsum = sum(lson(u)), rsum = sum(rson(u));</span><br><span class="line">    <span class="hljs-keyword">if</span> (lson(u))</span><br><span class="line">        MCMF ::AddEdge(node_id(u), node_id(lson(u)), lsum, llen == <span class="hljs-number">1</span> ? (t == <span class="hljs-number">0</span> ? -c[l] : c[l]) : <span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-keyword">if</span> (rson(u))</span><br><span class="line">        MCMF ::AddEdge(node_id(u), node_id(rson(u)), rsum, rlen == <span class="hljs-number">1</span> ? (t == <span class="hljs-number">0</span> ? -c[r] : c[r]) : <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span>&amp; u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">bool</span> t)</span> </span>&#123;</span><br><span class="line">    u = ++cnt;</span><br><span class="line">    <span class="hljs-keyword">if</span> (l == r) &#123;</span><br><span class="line">        sum(u) = <span class="hljs-number">1</span>;</span><br><span class="line">        node_id(u) = l;</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node_id(u) = ++cnt_node;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (p &lt;= mid)</span><br><span class="line">        insert(lson(v), lson(u), l, mid, p, t), rson(u) = rson(v);</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        insert(rson(v), rson(u), mid + <span class="hljs-number">1</span>, r, p, t), lson(u) = lson(v);</span><br><span class="line">    sum(u) = sum(lson(u)) + sum(rson(u));</span><br><span class="line">    AddEdge(u, l, r, p, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr, <span class="hljs-keyword">int</span> cur, <span class="hljs-keyword">int</span> num, <span class="hljs-keyword">bool</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (u == <span class="hljs-number">0</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">        MCMF ::AddEdge(cur, node_id(u), sum(u), l == r ? <span class="hljs-built_in">abs</span>(c[num] - c[l]) : (t == <span class="hljs-number">0</span> ? c[num] : -c[num]));</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (ql &lt;= mid)</span><br><span class="line">        query(lson(u), l, mid, ql, qr, cur, num, t);</span><br><span class="line">    <span class="hljs-keyword">if</span> (mid &lt; r)</span><br><span class="line">        query(rson(u), mid + <span class="hljs-number">1</span>, r, ql, qr, cur, num, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;w);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;a[i].first), b[i] = c[i] = a[i].first, a[i].second = i;</span><br><span class="line">    sort(b + <span class="hljs-number">1</span>, b + n + <span class="hljs-number">1</span>);</span><br><span class="line">    L = unique(b + <span class="hljs-number">1</span>, b + n + <span class="hljs-number">1</span>) - b - <span class="hljs-number">1</span>;</span><br><span class="line">    sort(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>);</span><br><span class="line">    cnt_node = n;</span><br><span class="line">    root0[<span class="hljs-number">0</span>] = ++cnt, node_id(root0[<span class="hljs-number">0</span>]) = ++cnt_node;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        pos0[id(a[i].first)] = i;</span><br><span class="line">        insert(root0[i - <span class="hljs-number">1</span>], root0[i], <span class="hljs-number">1</span>, n, a[i].second, <span class="hljs-number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>);</span><br><span class="line">    root1[<span class="hljs-number">0</span>] = ++cnt, node_id(root1[<span class="hljs-number">0</span>]) = ++cnt_node;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        pos1[id(a[i].first)] = i;</span><br><span class="line">        insert(root1[i - <span class="hljs-number">1</span>], root1[i], <span class="hljs-number">1</span>, n, a[i].second, <span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    MCMF ::S = ++cnt_node, MCMF ::T = ++cnt_node;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        query(root0[pos0[id(c[i])]], <span class="hljs-number">1</span>, n, i + <span class="hljs-number">1</span>, n, ++cnt_node, i, <span class="hljs-number">0</span>);</span><br><span class="line">        query(root1[pos1[id(c[i])]], <span class="hljs-number">1</span>, n, i + <span class="hljs-number">1</span>, n, cnt_node, i, <span class="hljs-number">1</span>);</span><br><span class="line">        MCMF ::AddEdge(MCMF ::S, cnt_node, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">        MCMF ::AddEdge(i, MCMF ::T, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">        MCMF ::AddEdge(MCMF ::S, i, <span class="hljs-number">1</span>, w);</span><br><span class="line">    &#125;</span><br><span class="line">    MCMF ::AddEdge(MCMF ::S, ++cnt_node, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">    MCMF ::AddEdge(n, MCMF ::T, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">    MCMF ::AddEdge(MCMF ::S, n, <span class="hljs-number">1</span>, w);</span><br><span class="line">    pii ans = MCMF ::PrimalDual();</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, ans.second);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3097&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#3097. 「SNOI2019」通信&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;题目概括咕咕咕（这个好写！）&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="网络流" scheme="https://tth37.cn/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="主席树" scheme="https://tth37.cn/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
      <category term="线段树" scheme="https://tth37.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="费用流" scheme="https://tth37.cn/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>「CF1295」Permutation Separation</title>
    <link href="https://tth37.cn/2020/01/31/solution-cf-1295e/"/>
    <id>https://tth37.cn/2020/01/31/solution-cf-1295e/</id>
    <published>2020-01-31T02:01:59.000Z</published>
    <updated>2020-01-31T02:12:09.969Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1295/problem/E" target="_blank" rel="noopener">#1295E. Permutation Separation</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>给定一个 $1-n$ 的排列。将该排列划分为非空的前后缀，要求在两个集合间移动一些元素，其中移动第 $i$ 个元素的代价为 $a_i$，使得在前缀集合中的所有元素均小于后缀集合中的任意元素。</p><p>$n\le 2e5,a_i\le 1e9$</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>记变量 $val$ 表示将 $1-val$ 移至前缀集合，将 $(val+1)-n$ 移至后缀集合。记 $t[pos]$ 表示将排列划分为 $1-pos,(pos+1)-n$ 所花费的代价。</p><p>考虑当 $val$ 增加 $1$ 时，$t$ 数组的变化，可以用线段树维护。</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>竟然一遍写对线段树我好开心 qwq</p><p>如果遇到障碍，可以转化值域定义再次尝试，重新确定枚举对象。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson(u) node[u].l</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson(u) node[u].r</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> val(u) node[u].val</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> tag(u) node[u].tag</span></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> ll INF = <span class="hljs-number">1e16</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> l, r;</span><br><span class="line">    ll val, tag;</span><br><span class="line">&#125; node[MAXN &lt;&lt; <span class="hljs-number">1</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>, R = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, p[MAXN], b[MAXN];</span><br><span class="line">ll a[MAXN], t[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    val(u) = min(val(lson(u)), val(rson(u)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (tag(u)) &#123;</span><br><span class="line">        val(lson(u)) += tag(u);</span><br><span class="line">        val(rson(u)) += tag(u);</span><br><span class="line">        tag(lson(u)) += tag(u);</span><br><span class="line">        tag(rson(u)) += tag(u);</span><br><span class="line">        tag(u) = <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    u = ++cnt;</span><br><span class="line">    <span class="hljs-keyword">if</span> (l == r) &#123;</span><br><span class="line">        val(u) = t[l];</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">    build(lson(u), l, mid), build(rson(u), mid + <span class="hljs-number">1</span>, r);</span><br><span class="line">    pushup(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr, ll val)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">        tag(u) += val;</span><br><span class="line">        val(u) += val;</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(u);</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (ql &lt;= mid) modify(lson(u), l, mid, ql, qr, val);</span><br><span class="line">    <span class="hljs-keyword">if</span> (mid &lt; qr) modify(rson(u), mid + <span class="hljs-number">1</span>, r, ql, qr, val);</span><br><span class="line">    pushup(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;p[i]), b[p[i]] = i;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%I64d"</span>, &amp;a[i]);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i) t[i] = t[i - <span class="hljs-number">1</span>] + a[i];</span><br><span class="line">    ll ans = t[<span class="hljs-number">1</span>];</span><br><span class="line">    build(R, <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> pos = b[i];</span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> &lt;= pos - <span class="hljs-number">1</span>)</span><br><span class="line">            modify(R, <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, pos - <span class="hljs-number">1</span>, a[pos]);</span><br><span class="line">        <span class="hljs-keyword">if</span> (pos &lt;= n - <span class="hljs-number">1</span>)</span><br><span class="line">            modify(R, <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>, pos, n - <span class="hljs-number">1</span>, -a[pos]);</span><br><span class="line">        ans = min(ans, val(R));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%I64d"</span>, ans);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1295/problem/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#1295E. Permutation Separation&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;给定一个 $1-n$ 的排列。将该排列划分为非空的前后缀，要求在两个集合间移动一些元素，其中移动第 $i$ 个元素的代价为 $a_i$，使得在前缀集合中的所有元素均小于后缀集合中的任意元素。&lt;/p&gt;
&lt;p&gt;$n\le 2e5,a_i\le 1e9$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
    
      <category term="线段树" scheme="https://tth37.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>「随记」hexo-inject 插件的使用</title>
    <link href="https://tth37.cn/2020/01/30/diary-inject/"/>
    <id>https://tth37.cn/2020/01/30/diary-inject/</id>
    <published>2020-01-30T10:35:47.000Z</published>
    <updated>2020-01-30T10:43:17.758Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Hey, password is required here.">    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="beaf3d259935413368477976f02ed40f849690febcd4d3e682a40b5d8f9e2841">ab7361b866f8ec82505a42a0d75e0738006b075f6e62674312162b60881084fb68f2058d7c237ab2ee7fb6fe3ebcf5d18004c72027a2644f13169c41fea111a849a1692e775ba0f40dd026f42a8d33f981fa2594ccc4f6bbbc1b318ef289b00bd3fa2bfb6d6ec89842857925b2b8911df14766ececa9fc0cc3166de323ed6c694cb06974eb75efd18af8ee737ad8e3f234dc9fa20ef6518ca3311c7368dad1042a87389b1567250545f4a497231f6ccfd35f6cf761f59d7a4675aabc97f09ab8c26725a4ae4f702cd3f12d72ed2d0d3df029fde0bf96a780a632eb3da5367b1c6949ac03769debbd088a64dd6370ece43e4ed4d125e2f38356e092d4809f8aa106665ba2b7388db836c509db42043f6f97c31fc4ce95c4457626ae87613dd1068a61f7e0417db3c6b285b580dc64bec6674b81e083fa263ed0860a8b2c70f4a00fc0383b9d806eda1095574a2e884718fe373568ac9d8df2641c4c6413fd86bb018ed1a7b501e2e76137818b829cc0aa359923a2a4e5e66f814230c1f59fcc73242608e2ed6a6f04c63e391201efb0b24df1869a1d852cb5682092d1476d9450f991ee5042c9935d4d9e635c9c99df5505eadfb06fad4d6e33e6e514612a4ce18614cf4a234405365d0803a14987d90a96cb3caed6d2b9374929ae8d280416569113f9d5154a6d45e78a6bc4100db466c171294c7d1000d783e4e534e066df5e3401aaa4e50330288f2cf6a723601d9eaea908083a379a75678703933a986fea2562f10b922801dfbc52937c196b48504ddf743515b29538be5d0f5e38d467f8855c24ab98f6cc863e2cc289c687527664d3c8255505e5a368dc15f28300369d0785b871090da517cfeb0b51ec820c9eb334fa332dac3f44edd5d73ac888986dbc4f0267a5a72cea994710124480469190e1d18ae1bad94294e2c71fdedd51ff0863481a7f557fdb7fd991773344630d8a3e3a92cbf143c715ac2c27ea39b3a346c3cef295767d1078d8a890f546cce9afa698575bf4b0ca3e21929d32876a254720c72f82d64f860bbc13c9930f2cd069d4818a3775a5ebf583adf12a12320c6b2dcacb3f0e0746a350c40f540b4178f9791947f611393545f61805f62a79c46e0ec2c33fe0a749529c1098e04c18e6</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      关于 html 渲染植入代码问题
    
    </summary>
    
      <category term="随记" scheme="https://tth37.cn/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>网络流</title>
    <link href="https://tth37.cn/2020/01/30/algorithm-flow/"/>
    <id>https://tth37.cn/2020/01/30/algorithm-flow/</id>
    <published>2020-01-30T03:53:37.000Z</published>
    <updated>2020-01-31T14:22:44.808Z</updated>
    
    <content type="html"><![CDATA[<details><summary>玩一玩 details 标签！</summary><p> 内容在这里！</p></details><blockquote><p>本文部分内容来自 <a href="https://oi-wiki.org/graph/flow/bound/" target="_blank" rel="noopener">OI-Wiki</a> 相关章节</p></blockquote><a id="more"></a><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><h4 id="Dinic-最大流（多路增广）"><a href="#Dinic-最大流（多路增广）" class="headerlink" title="Dinic 最大流（多路增广）"></a>Dinic 最大流（多路增广）</h4><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">105</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXM = <span class="hljs-number">5005</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, s, t;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> v, nxt;</span><br><span class="line">    ll w;</span><br><span class="line">&#125; edge[MAXM &lt;&lt; <span class="hljs-number">1</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> head[MAXN], cnt = <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AddEdge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span> </span>&#123;</span><br><span class="line">    edge[++cnt].w = w;</span><br><span class="line">    edge[cnt].v = v;</span><br><span class="line">    edge[cnt].nxt = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> d[MAXN];</span><br><span class="line"><span class="hljs-keyword">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));</span><br><span class="line">    vis[s] = <span class="hljs-number">1</span>, d[s] = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="hljs-keyword">while</span> (q.size()) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> v = edge[i].v;</span><br><span class="line">            ll w = edge[i].w;</span><br><span class="line">            <span class="hljs-keyword">if</span> (vis[v] || (w == <span class="hljs-number">0</span>)) <span class="hljs-keyword">continue</span>;</span><br><span class="line">            vis[v] = <span class="hljs-number">1</span>;</span><br><span class="line">            d[v] = d[u] + <span class="hljs-number">1</span>;</span><br><span class="line">            q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> vis[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, ll flow)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (u == t) <span class="hljs-keyword">return</span> flow;</span><br><span class="line">    ll rest = flow;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i &amp;&amp; rest; i = edge[i].nxt) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = edge[i].v;</span><br><span class="line">        ll w = edge[i].w;</span><br><span class="line">        <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span> || d[v] != d[u] + <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line">        ll tmp = dfs(v, min(rest, w));</span><br><span class="line">        <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">0</span>) d[v] = <span class="hljs-number">0</span>;</span><br><span class="line">        edge[i].w -= tmp;</span><br><span class="line">        edge[i ^ <span class="hljs-number">1</span>].w += tmp;</span><br><span class="line">        rest -= tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> flow - rest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    ll ret = <span class="hljs-number">0</span>, tmp = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (bfs())</span><br><span class="line">        <span class="hljs-keyword">while</span> (tmp = dfs(s, INF)) ret += tmp;</span><br><span class="line">    <span class="hljs-keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;s, &amp;t);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> u, v, c;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;c);</span><br><span class="line">        AddEdge(u, v, c), AddEdge(v, u, <span class="hljs-number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld"</span>, dinic());</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dinic-最大流（多路增广-当前弧优化）"><a href="#Dinic-最大流（多路增广-当前弧优化）" class="headerlink" title="Dinic 最大流（多路增广+当前弧优化）"></a>Dinic 最大流（多路增广+当前弧优化）</h4><p>注意 head 数组被改变</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">ll <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, ll flow)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (u == t) <span class="hljs-keyword">return</span> flow;</span><br><span class="line">    ll rest = flow;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i = edge[i].nxt) &#123; <span class="hljs-comment">// qwq</span></span><br><span class="line">        <span class="hljs-keyword">int</span> v = edge[i].v;</span><br><span class="line">        ll w = edge[i].w;</span><br><span class="line">        <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span> || d[v] != d[u] + <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line">        ll tmp = dfs(v, min(rest, w));</span><br><span class="line">        <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">0</span>) d[v] = <span class="hljs-number">0</span>;</span><br><span class="line">        edge[i].w -= tmp;</span><br><span class="line">        edge[i ^ <span class="hljs-number">1</span>].w += tmp;</span><br><span class="line">        rest -= tmp;</span><br><span class="line">        <span class="hljs-keyword">if</span> (rest == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> head[u] = i, flow; <span class="hljs-comment">// qwq</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> flow - rest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类-Dinic-费用流"><a href="#类-Dinic-费用流" class="headerlink" title="类 Dinic 费用流"></a>类 Dinic 费用流</h4><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">5005</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXM = <span class="hljs-number">50005</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, s, t, ans;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> v, nxt, w, c;</span><br><span class="line">&#125; edge[MAXM &lt;&lt; <span class="hljs-number">1</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> head[MAXN], cnt = <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AddEdge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    edge[++cnt].w = w;</span><br><span class="line">    edge[cnt].v = v;</span><br><span class="line">    edge[cnt].c = c;</span><br><span class="line">    edge[cnt].nxt = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> d[MAXN];</span><br><span class="line"><span class="hljs-keyword">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(d));</span><br><span class="line">    vis[s] = <span class="hljs-number">1</span>, d[s] = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="hljs-keyword">while</span> (q.size()) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[u] = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> v = edge[i].v;</span><br><span class="line">            <span class="hljs-keyword">int</span> w = edge[i].w, c = edge[i].c;</span><br><span class="line">            <span class="hljs-keyword">if</span> (w != <span class="hljs-number">0</span> &amp;&amp; d[u] + c &lt; d[v]) &#123;</span><br><span class="line">                d[v] = d[u] + c;</span><br><span class="line">                <span class="hljs-keyword">if</span> (vis[v] == <span class="hljs-number">0</span>) q.push(v), vis[v] = <span class="hljs-number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> d[t] != INF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">    vis[u] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (u == t) <span class="hljs-keyword">return</span> flow;</span><br><span class="line">    <span class="hljs-keyword">int</span> rest = flow;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i &amp;&amp; rest; i = edge[i].nxt) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = edge[i].v;</span><br><span class="line">        <span class="hljs-keyword">int</span> w = edge[i].w, c = edge[i].c;</span><br><span class="line">        <span class="hljs-keyword">if</span> (vis[v] || w == <span class="hljs-number">0</span> || d[v] != d[u] + c) <span class="hljs-keyword">continue</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> tmp = dfs(v, min(rest, w));</span><br><span class="line">        <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">0</span>) d[v] = INF;</span><br><span class="line">        edge[i].w -= tmp;</span><br><span class="line">        edge[i ^ <span class="hljs-number">1</span>].w += tmp;</span><br><span class="line">        rest -= tmp;</span><br><span class="line">        ans += c * tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[u] = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> flow - rest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>, tmp = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (spfa()) &#123;</span><br><span class="line">        <span class="hljs-keyword">while</span> (tmp = dfs(s, INF)) ret += tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    s = <span class="hljs-number">1</span>, t = n;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> u, v, w, c;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d%d"</span>, &amp;u, &amp;v, &amp;w, &amp;c);</span><br><span class="line">        AddEdge(u, v, w, c), AddEdge(v, u, <span class="hljs-number">0</span>, -c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> maxflow = dinic();</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d"</span>, maxflow, ans);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建模方法"><a href="#建模方法" class="headerlink" title="建模方法"></a>建模方法</h3><h4 id="无源汇上下界可行流"><a href="#无源汇上下界可行流" class="headerlink" title="无源汇上下界可行流"></a>无源汇上下界可行流</h4><p>给定无源汇流量网络 G。询问是否存在一种标定每条边流量的方式，使得每条边流量满足上下界同时每一个点流量平衡。</p><p>不妨假设每条边已经流了 $b(u,v)$ 的流量，设其为初始流。同时我们在新图中加入 u 连向 v 的流量为 $c(u,v) - b(u,v)$ 的边。考虑在新图上进行调整。</p><p>由于最大流需要满足初始流量平衡条件（最大流可以看成是下界为 0 的上下界最大流），但是构造出来的初始流很有可能不满足初始流量平衡。假设一个点初始流出流量 - 初始流入流量为 M。</p><p>若 M=0，此时流量平衡，不需要额外边。</p><p>若 M&gt;0，此时出流量过大，需要新建附加源点 SS，SS 向其连流量为 M 的附加边。</p><p>若 M&lt;0，此时入流量过大，需要新建附加汇点 TT，其向 TT 连流量为 -M 的附加边。</p><p>如果附加边满流，说明这一个点的流量平衡条件可以满足，否则这个点的流量平衡条件不满足。（因为附加流满足流量平衡）</p><p>在建图完毕之后跑 S 到 T 的最大流，若 S 连出去的边全部满流，则存在可行流，否则不存在。</p><h4 id="有源汇上下界可行流"><a href="#有源汇上下界可行流" class="headerlink" title="有源汇上下界可行流"></a>有源汇上下界可行流</h4><p>给定有源汇流量网络 G。询问是否存在一种标定每条边流量的方式，使得每条边流量满足上下界同时除了源点和汇点每一个点流量平衡。</p><p>假设源点为 S，汇点为 T。</p><p>则我们可以加入一条 T 到 S 的上界 $\inf$ 下界为 0 的边转化为无源汇上下界可行流问题。</p><p>若有解，则 S 到 T 的可行流流量等于 T 到 S 的附加边的流量。</p><h4 id="有源汇上下界最大流"><a href="#有源汇上下界最大流" class="headerlink" title="有源汇上下界最大流"></a>有源汇上下界最大流</h4><p>给定有源汇流量网络 G。询问是否存在一种标定每条边流量的方式，使得每条边流量满足上下界同时除了源点和汇点每一个点流量平衡。如果存在，询问满足标定的最大流量。</p><p>我们找到网络上的任意一个可行流。如果找不到解就可以直接结束。</p><p>否则我们考虑删去所有额外边之后的残量网络并且在网络上进行调整。</p><p>我们在残量网络上再跑一次 S 到 T 的最大流，将可行流流量和最大流流量相加即为答案。</p><h4 id="有源汇上下界最小流"><a href="#有源汇上下界最小流" class="headerlink" title="有源汇上下界最小流"></a>有源汇上下界最小流</h4><p>给定有源汇流量网络 G。询问是否存在一种标定每条边流量的方式，使得每条边流量满足上下界同时除了源点和汇点每一个点流量平衡。如果存在，询问满足标定的最小流量。</p><p>类似的，我们考虑将残量网络中不需要的流退掉。</p><p>我们找到网络上的任意一个可行流。如果找不到解就可以直接结束。</p><p>否则我们考虑删去所有额外边之后的残量网络。</p><p>我们在残量网络上再跑一次 T 到 S 的最大流，将可行流流量减去最大流流量即为答案。</p>]]></content>
    
    <summary type="html">
    
      &lt;details&gt;
&lt;summary&gt;玩一玩 details 标签！&lt;/summary&gt;
&lt;p&gt; 内容在这里！&lt;/p&gt;
&lt;/details&gt;

&lt;blockquote&gt;
&lt;p&gt;本文部分内容来自 &lt;a href=&quot;https://oi-wiki.org/graph/flow/bound/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OI-Wiki&lt;/a&gt; 相关章节&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法学习" scheme="https://tth37.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="图论" scheme="https://tth37.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="网络流" scheme="https://tth37.cn/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>「CF1295」Same GCDs</title>
    <link href="https://tth37.cn/2020/01/30/solution-cf-1295d/"/>
    <id>https://tth37.cn/2020/01/30/solution-cf-1295d/</id>
    <published>2020-01-30T01:50:16.000Z</published>
    <updated>2020-01-30T14:52:52.439Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1295/problem/D" target="_blank" rel="noopener">#1295D. Same GCDs</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>给定正整数 $a$，$m$（$a&lt;m$）。计算符合条件的 $x\in[0,m)$ 的个数，使得 $\text{gcd}(a,m)=\text{gcd}(a+x,m)$。</p><p>$a\le 1e10,m\le 1e10$</p><a id="more"></a><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><p>记 $a+x=y$。题目即为求复合条件的 $y\in[a,a+m)$ 使得 $\text{gcd}(a,m)=\text{gcd}(y,m)$。记 $\text{gcd}(a,m)=g$。可以发现，$y$ 可以表示为 $kg$，其中 $k$ 的取值范围为 $[l,r],l=\lceil\frac{a}{g}\rceil,r=\lceil\frac{a+m}{g}\rceil-1$。观察到 $\text{gcd}(kg,m)=g$，即 $\text{gcd}(k,m/g)=1$，$k$ 与 $m/g$ 互质。记 $\texttt{solve(n,m)}$ 函数为 $1-n$ 的整数中与 $m$ 互质的数的个数，则本题答案为 $\texttt{solve(r,m/g)-solve(l-1,m/g)}$。</p><p>接下来考虑 $\texttt{solve()}$ 函数的设计。注意到一个 $1e10$ 级别的数最多只有 10 个质因子，因此可以使用状态压缩和容斥原理计算出 $1-n$ 中与 $m$ 不互质的数的个数。</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><p>有 $\text{gcd}((a+x)%m,m)=\text{gcd}(a,m)$。注意到当 $x\in[0,m)$ 时，$(a+x)%m$ 的值取遍 $[0,m)$。换言之，我们只需计算符合条件的 $y\in[0,m)$ 使得 $\text{gcd}(y,m)=gcd(a,m)$。记 $\text{gcd}(a,m)=g$，即 $\text{gcd}(y/g,m/g)=1$，即 $\varphi(m/g)$。计算欧拉函数即可。</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>不能感性理解！要把式子推出来</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code 1"></a>Code 1</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> max(a, b) (a &gt; b ? a : b)</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> min(a, b) (a &gt; b ? b : a)</span></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">readint</span><span class="hljs-params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-title">class</span>... <span class="hljs-title">T2</span>&gt;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">readint</span>(<span class="hljs-title">T1</span> &amp;<span class="hljs-title">i</span>, <span class="hljs-title">T2</span> &amp;... <span class="hljs-title">rest</span>) &#123;</span></span><br><span class="line">    i = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">char</span> c;</span><br><span class="line">    <span class="hljs-keyword">bool</span> f = <span class="hljs-literal">false</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c = getchar())) f = c == <span class="hljs-string">'-'</span>;</span><br><span class="line">    <span class="hljs-keyword">do</span></span><br><span class="line">        i = (i &lt;&lt; <span class="hljs-number">3</span>) + (i &lt;&lt; <span class="hljs-number">1</span>) + c - <span class="hljs-string">'0'</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c = getchar()));</span><br><span class="line">    <span class="hljs-keyword">if</span> (f)</span><br><span class="line">        i = -i;</span><br><span class="line">    readint(rest...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">solve</span><span class="hljs-params">(ll n, ll m)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;ll&gt; p;</span><br><span class="line">    <span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">2</span>; i * i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (m % i == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            p.push_back(i);</span><br><span class="line">            <span class="hljs-keyword">while</span> (m % i == <span class="hljs-number">0</span>) m /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (m &gt; <span class="hljs-number">1</span>) p.push_back(m);</span><br><span class="line">    ll ret = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (ll s = <span class="hljs-number">1</span>; s &lt; (<span class="hljs-number">1</span> &lt;&lt; p.size()); ++s) &#123;</span><br><span class="line">        ll mult = <span class="hljs-number">1</span>, bits = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; p.size(); ++i) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (s &amp; (<span class="hljs-number">1l</span>l &lt;&lt; i)) &#123;</span><br><span class="line">                bits++;</span><br><span class="line">                mult *= p[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll cur = n / mult;</span><br><span class="line">        <span class="hljs-keyword">if</span> (bits &amp; <span class="hljs-number">1</span>) ret += cur;</span><br><span class="line">        <span class="hljs-keyword">else</span> ret -= cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> n - ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    readint(T);</span><br><span class="line">    <span class="hljs-keyword">while</span> (T--) &#123;</span><br><span class="line">        ll a, m;</span><br><span class="line">        readint(a, m);</span><br><span class="line">        ll g = __gcd(a, m);</span><br><span class="line">        ll l = a / g + (a % g != <span class="hljs-number">0</span>), r = (a + m) / g - ((a + m) % g == <span class="hljs-number">0</span>);</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%I64d\n"</span>, solve(r, m / g) - solve(l - <span class="hljs-number">1</span>, m / g));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code 2"></a>Code 2</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">phi</span><span class="hljs-params">(ll n)</span> </span>&#123;</span><br><span class="line">    ll ret = n;</span><br><span class="line">    <span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">2</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) ret = ret / i * (i - <span class="hljs-number">1</span>);</span><br><span class="line">        <span class="hljs-keyword">while</span> (n % i == <span class="hljs-number">0</span>) n /= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) ret = ret / n * (n - <span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="hljs-keyword">while</span> (T--) &#123;</span><br><span class="line">        ll a, m;</span><br><span class="line">        <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; m;</span><br><span class="line">        ll g = __gcd(a, m);</span><br><span class="line">        <span class="hljs-built_in">cout</span> &lt;&lt; phi(m / g) &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1295/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#1295D. Same GCDs&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;给定正整数 $a$，$m$（$a&amp;lt;m$）。计算符合条件的 $x\in[0,m)$ 的个数，使得 $\text{gcd}(a,m)=\text{gcd}(a+x,m)$。&lt;/p&gt;
&lt;p&gt;$a\le 1e10,m\le 1e10$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
    
      <category term="数学" scheme="https://tth37.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="数论" scheme="https://tth37.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="容斥原理" scheme="https://tth37.cn/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
      <category term="状态压缩" scheme="https://tth37.cn/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="欧拉函数" scheme="https://tth37.cn/tags/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>「SDOI2019」热闹的聚会与尴尬的聚会</title>
    <link href="https://tth37.cn/2020/01/29/solution-loj-3113/"/>
    <id>https://tth37.cn/2020/01/29/solution-loj-3113/</id>
    <published>2020-01-29T03:12:21.000Z</published>
    <updated>2020-01-29T06:54:16.232Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/3113" target="_blank" rel="noopener">#3113. 「SDOI2019」热闹的聚会与尴尬的聚会</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p><del>震惊！tth37居然……</del></p><p>给定一个图 $G$， 要求在图中选出一些点组成两个互不相关的子图 $P$，$Q$，其中子图 $Q$ 为原图的一个独立集。记 $P$ 中的节点最小度数为 $p$，$q=|Q|$。要求 $\lfloor\frac{n}{p+1}\rfloor\le q$ 且 $\lfloor\frac{n}{q+1}\rfloor\le p$，输出一种可行方案。</p><p>$n\le 1e5,m\le 1e5$</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>对题意进行转化，$\frac{n}{p+1}&lt;\lfloor\frac{n}{p+1}\rfloor+1\le q+1$，$n&lt;(p+1)(q+1)$。</p><p>考虑如下构造方法：第 $i$ 次操作中选取当前剩余图中度数最小的节点，记其度数为 $d_i$、节点编号为 $a_i$，将该节点及其相邻的节点删去。重复上述操作，直至图中没有剩余节点，设该操作重复 $q$ 次。</p><p>不难发现 $\lbrace a_i\rbrace$ 为独立集，可以将 $\lbrace a_i\rbrace$ 加入集合 $Q$。取 $d_m=\max\lbrace d_i\rbrace$，换言之剩余图中最小节点度数的最大值为 $d_m$。将第 $m$ 次及以后删除的点加入集合 $P$，则 $p=d_m$。此时 $q\times (d_m+1)\ge n$，原式显然成立。</p><p>用线段树维护度数最小的节点。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">readint</span><span class="hljs-params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-title">class</span> ...<span class="hljs-title">T2</span>&gt;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">readint</span>(<span class="hljs-title">T1</span> &amp;<span class="hljs-title">i</span>, <span class="hljs-title">T2</span>&amp;... <span class="hljs-title">rest</span>)&#123;</span></span><br><span class="line">    i=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<span class="hljs-keyword">bool</span> f=<span class="hljs-literal">false</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c=getchar())) f=c==<span class="hljs-string">'-'</span>;</span><br><span class="line">    <span class="hljs-keyword">do</span> i=(i&lt;&lt;<span class="hljs-number">3</span>)+(i&lt;&lt;<span class="hljs-number">1</span>)+c-<span class="hljs-string">'0'</span>; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c=getchar()));</span><br><span class="line">    <span class="hljs-keyword">if</span> (f) i=-i;</span><br><span class="line">    readint(rest...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">10005</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> t, n, m, d[MAXN], sum;</span><br><span class="line"><span class="hljs-keyword">bool</span> del[MAXN];</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; G[MAXN], P[MAXN], Q;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Segment_Tree</span> &#123;</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson(u) node[u].l</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson(u) node[u].r</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> val(u) node[u].val</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pos(u) node[u].pos</span></span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span></span><br><span class="line">        <span class="hljs-keyword">int</span> l, r, val, pos;</span><br><span class="line">    &#125; node[MAXN &lt;&lt; <span class="hljs-number">2</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> R, cnt;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        val(u) = min(val(lson(u)), val(rson(u)));</span><br><span class="line">        <span class="hljs-keyword">if</span> (val(lson(u)) == val(u)) pos(u) = pos(lson(u));</span><br><span class="line">        <span class="hljs-keyword">else</span> pos(u) = pos(rson(u));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        u = ++cnt;</span><br><span class="line">        <span class="hljs-keyword">if</span> (l == r) &#123;</span><br><span class="line">            val(u) = d[l];</span><br><span class="line">            pos(u) = l;</span><br><span class="line">            <span class="hljs-keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">        build(lson(u), l, mid), build(rson(u), mid + <span class="hljs-number">1</span>, r);</span><br><span class="line">        pushup(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (l == r) &#123;</span><br><span class="line">            val(u) += val;</span><br><span class="line">            <span class="hljs-keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (p &lt;= mid) modify(lson(u), l, mid, p, val);</span><br><span class="line">        <span class="hljs-keyword">else</span> modify(rson(u), mid + <span class="hljs-number">1</span>, r, p, val);</span><br><span class="line">        pushup(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    readint(t);</span><br><span class="line">    <span class="hljs-keyword">while</span> (t--) &#123;</span><br><span class="line">        readint(n, m);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> u, v;</span><br><span class="line">            readint(u, v);</span><br><span class="line">            G[u].push_back(v), G[v].push_back(u);</span><br><span class="line">            d[u]++, d[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        T.build(T.R, <span class="hljs-number">1</span>, n);</span><br><span class="line">        <span class="hljs-keyword">int</span> max_val = <span class="hljs-number">0</span>, max_pos = <span class="hljs-number">0</span>, cur_pos = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">while</span> (sum ^ n) &#123;</span><br><span class="line">            cur_pos++;</span><br><span class="line">            <span class="hljs-keyword">int</span> u = T.pos(T.R);</span><br><span class="line">            <span class="hljs-keyword">if</span> (T.val(T.R) &gt; max_val) &#123;</span><br><span class="line">                max_val = T.val(T.R), max_pos = cur_pos;</span><br><span class="line">          &#125;</span><br><span class="line">            Q.push_back(u), P[cur_pos].push_back(u);</span><br><span class="line">            del[u] = <span class="hljs-number">1</span>, T.modify(T.R, <span class="hljs-number">1</span>, n, u, INF), sum++;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : G[u]) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (del[v]) <span class="hljs-keyword">continue</span>;</span><br><span class="line">                P[cur_pos].push_back(v);</span><br><span class="line">                del[v] = <span class="hljs-number">1</span>, T.modify(T.R, <span class="hljs-number">1</span>, n, v, INF), sum++;</span><br><span class="line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> w : G[v]) &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (del[w]) <span class="hljs-keyword">continue</span>;</span><br><span class="line">                    T.modify(T.R, <span class="hljs-number">1</span>, n, w, <span class="hljs-number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">int</span> p_cnt = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = max_pos; i &lt;= cur_pos; ++i)</span><br><span class="line">            p_cnt += P[i].size();</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, p_cnt);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = max_pos; i &lt;= cur_pos; ++i) &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : P[i])</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, cur_pos);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : Q)</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, u);</span><br><span class="line">        <span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);</span><br><span class="line">        T.cnt = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            G[i].clear(), P[i].clear();</span><br><span class="line">        Q.clear();</span><br><span class="line">        <span class="hljs-built_in">memset</span>(del, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(del));</span><br><span class="line">        <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(d));</span><br><span class="line">        sum = <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3113&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#3113. 「SDOI2019」热闹的聚会与尴尬的聚会&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;&lt;del&gt;震惊！tth37居然……&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;给定一个图 $G$， 要求在图中选出一些点组成两个互不相关的子图 $P$，$Q$，其中子图 $Q$ 为原图的一个独立集。记 $P$ 中的节点最小度数为 $p$，$q=|Q|$。要求 $\lfloor\frac{n}{p+1}\rfloor\le q$ 且 $\lfloor\frac{n}{q+1}\rfloor\le p$，输出一种可行方案。&lt;/p&gt;
&lt;p&gt;$n\le 1e5,m\le 1e5$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="线段树" scheme="https://tth37.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="构造" scheme="https://tth37.cn/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>创造</title>
    <link href="https://tth37.cn/2020/01/23/solution-jsk-6010B/"/>
    <id>https://tth37.cn/2020/01/23/solution-jsk-6010B/</id>
    <published>2020-01-23T13:28:56.000Z</published>
    <updated>2020-01-23T13:36:54.520Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nanti.jisuanke.com/t/43129" target="_blank" rel="noopener">#43129. 创造</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>题目概括征集中~</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>出现问题。莫名 RE。待更</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/43129&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#43129. 创造&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;题目概括征集中~&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="计蒜客" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/%E8%AE%A1%E8%92%9C%E5%AE%A2/"/>
    
    
      <category term="欧拉路" scheme="https://tth37.cn/tags/%E6%AC%A7%E6%8B%89%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>灭绝</title>
    <link href="https://tth37.cn/2020/01/23/solution-jsk-6010A/"/>
    <id>https://tth37.cn/2020/01/23/solution-jsk-6010A/</id>
    <published>2020-01-23T13:28:16.000Z</published>
    <updated>2020-01-23T13:35:05.939Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nanti.jisuanke.com/t/43128" target="_blank" rel="noopener">#43128. 灭绝</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>题目概括征集中~</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>自 <a href="http://localhost:4000/2019/08/23/solution-luogu-uva11021/" target="_blank" rel="noopener">麻球繁衍</a> 改编而来。</p><p>状态转移方程：</p><p>$$<br>f[i]=\sum_{j=1}^mp_i\times f[i-t_i]^{s_i}<br>$$</p><p>需要注意灭绝的边界情况讨论。</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>取模要取干净！</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> ll MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x, <span class="hljs-keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ll ret = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>) ret = ret * x % MOD;</span><br><span class="line">        x = x * x % MOD;</span><br><span class="line">        n &gt;&gt;= <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, l, m;</span><br><span class="line"><span class="hljs-keyword">int</span> q[<span class="hljs-number">2005</span>], t[<span class="hljs-number">2005</span>], s[<span class="hljs-number">2005</span>];</span><br><span class="line">ll sum_q = <span class="hljs-number">0</span>;</span><br><span class="line">ll inv_sum_q = <span class="hljs-number">0</span>;</span><br><span class="line">ll p[<span class="hljs-number">2005</span>];</span><br><span class="line">ll f[<span class="hljs-number">2005</span>];</span><br><span class="line">ll ans = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;l, &amp;m);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;q[i], &amp;t[i], &amp;s[i]);</span><br><span class="line">        sum_q += q[i];</span><br><span class="line">    &#125;</span><br><span class="line">    inv_sum_q = qpow(sum_q, MOD - <span class="hljs-number">2</span>);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        p[i] = <span class="hljs-number">1l</span>l * q[i] * inv_sum_q % MOD; <span class="hljs-comment">// 取模！</span></span><br><span class="line">    f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= l; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (i - t[j] &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span> (i - t[j] == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (s[j] == <span class="hljs-number">0</span>)</span><br><span class="line">                    f[i] = (f[i] + p[j]) % MOD;</span><br><span class="line">                <span class="hljs-keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            f[i] = (f[i] + p[j] * qpow(f[i - t[j]], s[j]) % MOD) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = qpow(f[l], n);</span><br><span class="line">    ans = (<span class="hljs-number">1l</span>l - ans + MOD) % MOD;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/43128&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#43128. 灭绝&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;题目概括征集中~&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="计蒜客" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/%E8%AE%A1%E8%92%9C%E5%AE%A2/"/>
    
    
      <category term="概率" scheme="https://tth37.cn/tags/%E6%A6%82%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>「SDOI2019」快速查询</title>
    <link href="https://tth37.cn/2020/01/22/solution-loj-3110/"/>
    <id>https://tth37.cn/2020/01/22/solution-loj-3110/</id>
    <published>2020-01-22T12:18:18.000Z</published>
    <updated>2020-01-22T13:33:36.518Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/3110" target="_blank" rel="noopener">#3110. 「SDOI2019」快速查询</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p><del>震惊！tth37 竟自己写题目概括</del></p><p>给定一个长度为 $n$ 的整数数列，执行 $q$ 次操作：</p><ul><li>将 $a_i$ 赋值为 $val$</li><li>将所有元素同时加上 $val$</li><li>将所有元素同时乘上 $val$</li><li>将所有元素同时赋值为 $val$</li><li>询问第 $i$ 个元素 $a_i$ 的值</li><li>询问所有元素的和</li></ul><p>$1\le n \le 1e9,1\le q \le 1e7$</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>还是比较好想的。</p><p>将所有元素表示为 $kx+b$，便于实现整体乘法、加法操作。</p><p>维护以下信息：大众元素的值、大众元素的数量、特殊元素 $i$ 的值、特殊元素 $i$ 上一次被单独赋值的时间、所有元素的和、上一次整体赋值的时间。</p><p>在区间赋值操作时将原始值 $val$ 转化为 $(val-b)\times k^{-1}$，以维护 $kx+b$ 的性质。</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>特殊读入方法在计算测试数据时不要下标越界！</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3110&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#3110. 「SDOI2019」快速查询&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;&lt;del&gt;震惊！tth37 竟自己写题目概括&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;给定一个长度为 $n$ 的整数数列，执行 $q$ 次操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 $a_i$ 赋值为 $val$&lt;/li&gt;
&lt;li&gt;将所有元素同时加上 $val$&lt;/li&gt;
&lt;li&gt;将所有元素同时乘上 $val$&lt;/li&gt;
&lt;li&gt;将所有元素同时赋值为 $val$&lt;/li&gt;
&lt;li&gt;询问第 $i$ 个元素 $a_i$ 的值&lt;/li&gt;
&lt;li&gt;询问所有元素的和&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$1\le n \le 1e9,1\le q \le 1e7$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
  </entry>
  
  <entry>
    <title>「SNOI2019」纸牌</title>
    <link href="https://tth37.cn/2020/01/21/solution-loj-3098/"/>
    <id>https://tth37.cn/2020/01/21/solution-loj-3098/</id>
    <published>2020-01-21T15:12:20.000Z</published>
    <updated>2020-01-21T16:51:13.432Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/3098" target="_blank" rel="noopener">#3098. 「SNOI2019」纸牌</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>有一副纸牌，牌一共有 $n$ 种，每种有 $C$ 张。三张连号的牌或三张相同的牌可以组成一叠，如果一组拍可以分成若干叠，就称其为一组王牌。现已从牌堆摸了一些初始牌，需要再挑出一些牌组成一组王牌，求有多少种可能组成的王牌。</p><p>$1\le n \le 1e18,0\le C \le 1000$</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>麻将题这种套路我真不明白是怎么想出来的…… 总之能用就行了。</p><p>记 $f[i][a][b]$ 表示仅考虑前 $i$ 种牌，选了 $a$ 叠 $(i-1,i,i+1)$ 和 $b$ 叠 $(i,i+1,i+2)$ 的方案数。不难发现 $a$ 和 $b$ 均不超过 $3$，否则会有重复。</p><p>状态转移方程如下：</p><p>$$<br>f[i][b][c] = f[i - 1][a][b]\times (\lfloor\frac{C-s-\lceil d[i]-s\rceil}{3}\rfloor+1)<br>$$</p><p>将状态的后两维压至一维，即可矩阵大力转移。对于特殊点构造转移矩阵即可。</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>动态规划转移前的可行性判断。</p><p>矩阵操作前（乘法、初始化单位矩阵）不要忘记清零！</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Matrix</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> m, n;</span><br><span class="line">    <span class="hljs-keyword">int</span> g[<span class="hljs-number">9</span>][<span class="hljs-number">9</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">Matrix <span class="hljs-title">mul</span><span class="hljs-params">(Matrix a, Matrix b)</span> </span>&#123;</span><br><span class="line">    Matrix c;</span><br><span class="line">    c.m = a.m, c.n = b.n;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; c.m; ++i)</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; c.n; ++j) &#123;</span><br><span class="line">            c.g[i][j] = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; a.n; ++k)</span><br><span class="line">                c.g[i][j] = (c.g[i][j] + <span class="hljs-number">1l</span>l * a.g[i][k] * b.g[k][j] % MOD) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    <span class="hljs-keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll n;</span><br><span class="line"><span class="hljs-keyword">int</span> C, x;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mk</span><span class="hljs-params">(Matrix&amp; a)</span> </span>&#123;</span><br><span class="line">    a.m = a.n = <span class="hljs-number">9</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; ++i) </span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; ++j)</span><br><span class="line">            a.g[i][j] = i == j ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">Matrix <span class="hljs-title">qpow</span><span class="hljs-params">(Matrix a, ll n)</span> </span>&#123;</span><br><span class="line">    Matrix ret;</span><br><span class="line">    mk(ret);</span><br><span class="line">    <span class="hljs-keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>) ret = mul(ret, a);</span><br><span class="line">        a = mul(a, a);</span><br><span class="line">        n &gt;&gt;= <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld%d"</span>, &amp;n, &amp;C);</span><br><span class="line">    Matrix X;</span><br><span class="line">    X.m = <span class="hljs-number">9</span>, X.n = <span class="hljs-number">1</span>;</span><br><span class="line">    X.g[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">9</span>; ++i)</span><br><span class="line">        X.g[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;</span><br><span class="line">    Matrix F;</span><br><span class="line">    F.m = F.n = <span class="hljs-number">9</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; ++i)</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; ++j)</span><br><span class="line">            F.g[i][j] = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>; b &lt;= <span class="hljs-number">2</span>; ++b)</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>; c &lt;= <span class="hljs-number">2</span>; ++c)</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>; a &lt;= <span class="hljs-number">2</span>; ++a) &#123;</span><br><span class="line">                    <span class="hljs-keyword">int</span> s = a + b + c;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (C &lt; s) <span class="hljs-keyword">continue</span>;</span><br><span class="line">                    F.g[a * <span class="hljs-number">3</span> + b][b * <span class="hljs-number">3</span> + c] = (C - s) / <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;x);</span><br><span class="line">    ll cur = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">1</span>; t &lt;= x; ++t) &#123;</span><br><span class="line">        ll p;</span><br><span class="line">        <span class="hljs-keyword">int</span> d;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld%d"</span>, &amp;p, &amp;d);</span><br><span class="line">        X = mul(qpow(F, p - cur - <span class="hljs-number">1</span>), X);</span><br><span class="line">        Matrix G;</span><br><span class="line">        G.m = G.n = <span class="hljs-number">9</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; ++i)</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; ++j)</span><br><span class="line">                G.g[i][j] = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>; b &lt;= <span class="hljs-number">2</span>; ++b)</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>; c &lt;= <span class="hljs-number">2</span>; ++c) </span><br><span class="line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>; a &lt;= <span class="hljs-number">2</span>; ++a) &#123;</span><br><span class="line">                    <span class="hljs-keyword">int</span> s = a + b + c;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (C &lt; s) <span class="hljs-keyword">continue</span>;</span><br><span class="line">                    <span class="hljs-keyword">int</span> cer = <span class="hljs-number">0</span>;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (d &lt;= s) cer = s;</span><br><span class="line">                    <span class="hljs-keyword">else</span> cer = s + <span class="hljs-number">3</span> * ((d - s + <span class="hljs-number">2</span>) / <span class="hljs-number">3</span>);</span><br><span class="line">                    <span class="hljs-keyword">if</span> (C &lt; cer) <span class="hljs-keyword">continue</span>;</span><br><span class="line">                    G.g[a * <span class="hljs-number">3</span> + b][b * <span class="hljs-number">3</span> + c] = (C - cer) / <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        X = mul(G, X);</span><br><span class="line">        cur = p;</span><br><span class="line">    &#125;</span><br><span class="line">    X = mul(qpow(F, n - cur), X);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, X.g[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3098&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#3098. 「SNOI2019」纸牌&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;有一副纸牌，牌一共有 $n$ 种，每种有 $C$ 张。三张连号的牌或三张相同的牌可以组成一叠，如果一组拍可以分成若干叠，就称其为一组王牌。现已从牌堆摸了一些初始牌，需要再挑出一些牌组成一组王牌，求有多少种可能组成的王牌。&lt;/p&gt;
&lt;p&gt;$1\le n \le 1e18,0\le C \le 1000$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="动态规划" scheme="https://tth37.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="矩阵" scheme="https://tth37.cn/tags/%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>「HNOI2019」校园旅行</title>
    <link href="https://tth37.cn/2020/01/21/solution-loj-3057/"/>
    <id>https://tth37.cn/2020/01/21/solution-loj-3057/</id>
    <published>2020-01-21T09:33:56.000Z</published>
    <updated>2020-01-21T10:07:28.060Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/3057" target="_blank" rel="noopener">#3057. 「HNOI2019」校园旅行</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>给定一个有 $n$ 个节点、 $m$ 条边的简单无向图，每个节点有权值 $0$ 或 $1$。有 $q$ 次询问，每次询问两个节点 $u$、$v$ 间是否存在一条路径（可重复），使经过的节点权值为 $01$ 回文串。</p><p>$n \le 5000, m\le 500000, q\le 100000$</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>考虑动态规划，记 $f[i][j]$ 表示 $i$、$j$ 两点是否存在回文路径。若 $f[x][y]=1,(x,z)\in E,(y,w)\in E,a[z]=a[w]$，则 $f[z][w]=1$。转移时枚举边转移，时间复杂度 $O(m^2)$。</p><p>考虑优化，仅保留等效边。只考虑 <strong>连接两个权值相同节点的边</strong> ，可以发现这些边将原图分为若干个连通块。假如只在其中一个联通块中状态转移，其转移方法取决于 <strong>该联通块是否为二分图</strong>。若是二分图，则连通块内 <strong>任意两点间路径长度的奇偶性确定</strong>；否则不确定。因此，可以将二分图等效为该图的 <strong>生成树</strong>，恰好同样符合上述性质；如果不是二分图，则在生成树中添加一个自环即可。</p><p>对于 <strong>连接两个不同权值节点的边</strong>，在任意连通块中显然可以得到其生成树与原图的性质相同。</p><p>因此可以将边数降至 $O(n)$ 级别，就可做了。</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>不知道为什么记忆化搜索写挂了，查不出错。<a href="https://loj.ac/submission/727560" target="_blank" rel="noopener">0/30 pts code</a></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">5005</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">char</span> s[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> n, m, q;</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; G0[MAXN], G1[MAXN], G[MAXN];</span><br><span class="line"><span class="hljs-keyword">bool</span> vis0[MAXN], vis1[MAXN];</span><br><span class="line"><span class="hljs-keyword">bool</span> vis2[MAXN], vis3[MAXN];</span><br><span class="line"><span class="hljs-keyword">bool</span> col[MAXN];</span><br><span class="line"><span class="hljs-keyword">bool</span> flag;</span><br><span class="line"><span class="hljs-built_in">queue</span>&lt;pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; qu;</span><br><span class="line"><span class="hljs-keyword">bool</span> vis[MAXN][MAXN], f[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_ck0</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">vis1[u] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : G0[u]) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (vis1[v] == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">col[v] = col[u] ^ <span class="hljs-number">1</span>;</span><br><span class="line">dfs_ck0(v);</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (col[v] == col[u]) flag = <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_gen0</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">vis0[u] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : G0[u])</span><br><span class="line"><span class="hljs-keyword">if</span> (vis0[v] == <span class="hljs-number">0</span>)</span><br><span class="line">G[u].push_back(v), G[v].push_back(u), dfs_gen0(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_ck1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">vis3[u] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : G1[u]) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (vis3[v] == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">col[v] = col[u] ^ <span class="hljs-number">1</span>;</span><br><span class="line">dfs_ck1(v);</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (col[v] == col[u]) flag = <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_gen1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">vis2[u] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : G1[u])</span><br><span class="line"><span class="hljs-keyword">if</span> (vis2[v] == <span class="hljs-number">0</span>)</span><br><span class="line">G[u].push_back(v), G[v].push_back(u), dfs_gen1(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, s + <span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> u, v;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line"><span class="hljs-keyword">if</span> (s[u] == s[v]) </span><br><span class="line">G0[u].push_back(v), G0[v].push_back(u);</span><br><span class="line"><span class="hljs-keyword">else</span> </span><br><span class="line">G1[u].push_back(v), G1[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (vis0[i]) <span class="hljs-keyword">continue</span>;</span><br><span class="line">flag = <span class="hljs-number">1</span>;</span><br><span class="line">dfs_ck0(i);</span><br><span class="line">dfs_gen0(i);</span><br><span class="line"><span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>) G[i].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">memset</span>(col, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(col));</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (vis2[i]) <span class="hljs-keyword">continue</span>;</span><br><span class="line">flag = <span class="hljs-number">1</span>;</span><br><span class="line">dfs_ck1(i);</span><br><span class="line">dfs_gen1(i);</span><br><span class="line"><span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>) G[i].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">qu.push(make_pair(i, i));</span><br><span class="line">vis[i][i] = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : G[u]) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (s[u] == s[v]) </span><br><span class="line">qu.push(make_pair(u, v)), vis[u][v] = vis[v][u] = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">while</span> (qu.size()) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> x = qu.front().first, y = qu.front().second;</span><br><span class="line">qu.pop();</span><br><span class="line">f[x][y] = f[y][x] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> z : G[x]) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> w : G[y]) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (s[z] == s[w] &amp;&amp; vis[z][w] == <span class="hljs-number">0</span>)</span><br><span class="line">qu.push(make_pair(z, w)), vis[z][w] = vis[w][z] = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a, b;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="hljs-keyword">if</span> (f[a][b]) <span class="hljs-built_in">puts</span>(<span class="hljs-string">"YES"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3057&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#3057. 「HNOI2019」校园旅行&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;给定一个有 $n$ 个节点、 $m$ 条边的简单无向图，每个节点有权值 $0$ 或 $1$。有 $q$ 次询问，每次询问两个节点 $u$、$v$ 间是否存在一条路径（可重复），使经过的节点权值为 $01$ 回文串。&lt;/p&gt;
&lt;p&gt;$n \le 5000, m\le 500000, q\le 100000$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="动态规划" scheme="https://tth37.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="二分图" scheme="https://tth37.cn/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>生成树计数</title>
    <link href="https://tth37.cn/2020/01/20/algorithm-gentree/"/>
    <id>https://tth37.cn/2020/01/20/algorithm-gentree/</id>
    <published>2020-01-20T09:16:31.000Z</published>
    <updated>2020-01-20T09:37:45.480Z</updated>
    
    <content type="html"><![CDATA[<p>这里好像得写点什么…… oy 快帮我出出主意</p><h3 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h3><p>定义：一个方阵的行列式表示为 $|A|$</p><p>$$</p><p>|A|=\sum_{p}(-1)^{\sigma(p)}\prod_{i=1}^na_i,p_i</p><p>$$</p><p>$$<br>\left|\begin{array}{cccc}<br>    a_{11} &amp;    a_{12}     \<br>    a_{21} &amp;    a_{22}<br>\end{array}\right| =a_{11}a_{22}-a_{12}a_{21}<br>$$</p><h3 id="矩阵树定理"><a href="#矩阵树定理" class="headerlink" title="矩阵树定理"></a>矩阵树定理</h3><p>大雾 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里好像得写点什么…… oy 快帮我出出主意&lt;/p&gt;
&lt;h3 id=&quot;行列式&quot;&gt;&lt;a href=&quot;#行列式&quot; class=&quot;headerlink&quot; title=&quot;行列式&quot;&gt;&lt;/a&gt;行列式&lt;/h3&gt;&lt;p&gt;定义：一个方阵的行列式表示为 $|A|$&lt;/p&gt;
&lt;p&gt;$$&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="算法学习" scheme="https://tth37.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="组合计数" scheme="https://tth37.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/"/>
    
    
      <category term="生成树" scheme="https://tth37.cn/tags/%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="组合计数" scheme="https://tth37.cn/tags/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>「SNOI2019」字符串</title>
    <link href="https://tth37.cn/2020/01/20/solution-loj-3095/"/>
    <id>https://tth37.cn/2020/01/20/solution-loj-3095/</id>
    <published>2020-01-19T16:10:55.000Z</published>
    <updated>2020-01-21T10:08:48.449Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/3095" target="_blank" rel="noopener">#3095. 「SNOI2019」字符串</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>给出一个长度为 $n$的由小写字母组成的字符串 ，设其中第$i$ 个字符为 $a_i$。设删掉第 $i$个字符之后得到的字符串为$s _i$ ，请按照字典序对 $s_1$,…，$s_n$从小到大输出编号。若两个字符串相等，则认为编号小的字符串字典序更小。</p><p>$1 \le n \le 10^5$</p><p>感谢@oy的贡献</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>考虑字符串 $s_i$ 与 $s_j$ 的比较。根据等效分析，可知比较这两个字符串的大小只需知道任意两个相邻后缀的 $\text{LCP}$ 即可。可以通过 $O(n)$ 预处理后，手写排序 $\text{cmp}$ 函数，$O(n\log n)$ 排序得到答案。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-keyword">char</span> s[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> lcp[MAXN];  <span class="hljs-comment">// lcp(i, i+1)</span></span><br><span class="line"><span class="hljs-keyword">int</span> ans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> i = x, j = y;</span><br><span class="line">    <span class="hljs-keyword">if</span> (i &gt; j)</span><br><span class="line">        swap(i, j);</span><br><span class="line">    <span class="hljs-keyword">int</span> t = lcp[i];</span><br><span class="line">    <span class="hljs-keyword">if</span> (t &gt;= j - i) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (x &lt; y)</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (s[i + t + <span class="hljs-number">1</span>] &lt; s[i + t]) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (i == x)</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (i == x)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, s + <span class="hljs-number">1</span>);</span><br><span class="line">    lcp[n] = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; --i) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (s[i] == s[i + <span class="hljs-number">1</span>])</span><br><span class="line">            lcp[i] = lcp[i + <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            lcp[i] = <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) ans[i] = i;</span><br><span class="line">    sort(ans + <span class="hljs-number">1</span>, ans + n + <span class="hljs-number">1</span>, cmp);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, ans[i]);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3095&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#3095. 「SNOI2019」字符串&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;给出一个长度为 $n$的由小写字母组成的字符串 ，设其中第$i$ 个字符为 $a_i$。设删掉第 $i$个字符之后得到的字符串为$s _i$ ，请按照字典序对 $s_1$,…，$s_n$从小到大输出编号。若两个字符串相等，则认为编号小的字符串字典序更小。&lt;/p&gt;
&lt;p&gt;$1 \le n \le 10^5$&lt;/p&gt;
&lt;p&gt;感谢@oy的贡献&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="字符串" scheme="https://tth37.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>「USACO 2019.12 Platinum」Bessie&#39;s Snow Cow</title>
    <link href="https://tth37.cn/2020/01/20/solution-loj-3227/"/>
    <id>https://tth37.cn/2020/01/20/solution-loj-3227/</id>
    <published>2020-01-19T16:06:20.000Z</published>
    <updated>2020-01-21T10:09:44.760Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/3227" target="_blank" rel="noopener">#3227. 「USACO 2019.12 Platinum」Bessie’s Snow Cow</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>给定$n$个节点的一棵有根树，$q$次操作，每次操作可以令一个节点的子树的所有节点增加一个颜色$i$,或查询一个节点的颜色数</p><p>$1 \le n,q \le 10^5$</p><p>感谢@oy的贡献</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>考虑维护 $C$ 个数据结构，存储每种颜色所对应的 $\text{dfs}$ 序的区间。根据 <em>势能分析</em> 可证明复杂度。剩余部分用线段树模拟即可。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="hljs-built_in">set</span>&lt;pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; S[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Segment_Tree</span> &#123;</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson(u) node[u].l</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson(u) node[u].r</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> val(u) node[u].val</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> tag(u) node[u].tag</span></span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span></span><br><span class="line">        <span class="hljs-keyword">int</span> l, r;</span><br><span class="line">        ll val, tag;</span><br><span class="line">    &#125;node[MAXN &lt;&lt; <span class="hljs-number">1</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> R, cnt;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        val(u) = val(lson(u)) + val(rson(u));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (tag(u) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> llen = mid - l + <span class="hljs-number">1</span>, rlen = r - mid;</span><br><span class="line">        val(lson(u)) += <span class="hljs-number">1l</span>l * llen * tag(u),</span><br><span class="line">        val(rson(u)) += <span class="hljs-number">1l</span>l * rlen * tag(u);</span><br><span class="line">        tag(lson(u)) += tag(u),</span><br><span class="line">        tag(rson(u)) += tag(u);</span><br><span class="line">        tag(u) = <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        u = ++cnt;</span><br><span class="line">        <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">        build(lson(u), l, mid), build(rson(u), mid + <span class="hljs-number">1</span>, r);</span><br><span class="line">        pushup(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modify_range</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr, ll val)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">            val(u) += <span class="hljs-number">1l</span>l * (r - l + <span class="hljs-number">1</span>) * val;</span><br><span class="line">            tag(u) += val;</span><br><span class="line">            <span class="hljs-keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pushdown(u, l, r);</span><br><span class="line">        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (ql &lt;= mid) </span><br><span class="line">            modify_range(lson(u), l, mid, ql, qr, val);</span><br><span class="line">        <span class="hljs-keyword">if</span> (mid &lt; qr)</span><br><span class="line">            modify_range(rson(u), mid + <span class="hljs-number">1</span>, r, ql, qr, val);</span><br><span class="line">        pushup(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function">ll <span class="hljs-title">query_range</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">            <span class="hljs-keyword">return</span> val(u);</span><br><span class="line">        pushdown(u, l, r);</span><br><span class="line">        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">        ll ret = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            ret += query_range(lson(u), l, mid, ql, qr);</span><br><span class="line">        <span class="hljs-keyword">if</span> (mid &lt; qr)</span><br><span class="line">            ret += query_range(rson(u), mid + <span class="hljs-number">1</span>, r, ql, qr);</span><br><span class="line">        <span class="hljs-keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, q;</span><br><span class="line"><span class="hljs-keyword">int</span> dfn[MAXN], size[MAXN], dfn_idx;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    dfn[u] = ++dfn_idx;</span><br><span class="line">    size[u] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : G[u]) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (v == fa) <span class="hljs-keyword">continue</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        size[u] += size[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> u, v;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        G[u].push_back(v), G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">    T.build(T.R, <span class="hljs-number">1</span>, n);</span><br><span class="line">    <span class="hljs-keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> op, x, c;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;op, &amp;x);</span><br><span class="line">        <span class="hljs-keyword">int</span> l = dfn[x], r = dfn[x] + size[x] - <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123;</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, T.query_range(T.R, <span class="hljs-number">1</span>, n, l, r));</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;c);</span><br><span class="line">            <span class="hljs-built_in">set</span>&lt;pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt;::iterator it = S[c].lower_bound(make_pair(l, r));</span><br><span class="line">            <span class="hljs-keyword">int</span> nl = l, nr = r;</span><br><span class="line">            <span class="hljs-keyword">if</span> (it != S[c].begin()) &#123;</span><br><span class="line">                it--;</span><br><span class="line">                <span class="hljs-keyword">if</span> (it-&gt;second &gt;= l) &#123;</span><br><span class="line">                    nl = it-&gt;first;</span><br><span class="line">                    nr = max(r, it-&gt;second);</span><br><span class="line">                    T.modify_range(T.R, <span class="hljs-number">1</span>, n, it-&gt;first, it-&gt;second, <span class="hljs-number">-1</span>);</span><br><span class="line">                    S[c].erase(it++);</span><br><span class="line">                &#125; <span class="hljs-keyword">else</span> it++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">while</span> (it != S[c].end() &amp;&amp; it-&gt;first &lt;= r + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">                nr = max(r, it-&gt;second);</span><br><span class="line">                T.modify_range(T.R, <span class="hljs-number">1</span>, n, it-&gt;first, it-&gt;second, <span class="hljs-number">-1</span>);</span><br><span class="line">                S[c].erase(it++);</span><br><span class="line">            &#125;</span><br><span class="line">            T.modify_range(T.R, <span class="hljs-number">1</span>, n, nl, nr, <span class="hljs-number">1</span>);</span><br><span class="line">            S[c].insert(make_pair(nl, nr));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3227&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#3227. 「USACO 2019.12 Platinum」Bessie’s Snow Cow&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;给定$n$个节点的一棵有根树，$q$次操作，每次操作可以令一个节点的子树的所有节点增加一个颜色$i$,或查询一个节点的颜色数&lt;/p&gt;
&lt;p&gt;$1 \le n,q \le 10^5$&lt;/p&gt;
&lt;p&gt;感谢@oy的贡献&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="线段树" scheme="https://tth37.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="set" scheme="https://tth37.cn/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>「USACO 2019.12 Platinum」Greedy Pie Eaters</title>
    <link href="https://tth37.cn/2020/01/20/solution-loj-3226/"/>
    <id>https://tth37.cn/2020/01/20/solution-loj-3226/</id>
    <published>2020-01-19T16:02:46.000Z</published>
    <updated>2020-01-21T10:09:31.642Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/3226" target="_blank" rel="noopener">#3226. 「USACO 2019.12 Platinum」Greedy Pie Eaters</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>给定$n$个数中$m$个区间，每个区间有一个权值，要求输出总区间权值最大的一个序列使得每个序列不被之前的序列的并集完全覆盖</p><p>$1 \le n \le 300,1 \le m \le \frac{n(n-1)}{2}$</p><p>感谢@oy的贡献</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>区间 DP。考虑对于每个区间，最后一个奶牛一定至少吃掉了一个派。枚举这个派，并进行状态转移即可。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m;</span><br><span class="line">ll a[<span class="hljs-number">305</span>][<span class="hljs-number">305</span>], f[<span class="hljs-number">305</span>][<span class="hljs-number">305</span>], g[<span class="hljs-number">305</span>][<span class="hljs-number">305</span>][<span class="hljs-number">305</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> w, l, r;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;w, &amp;l, &amp;r);</span><br><span class="line">        a[l][r] = <span class="hljs-number">1l</span>l * w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt;= n; ++l) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = i + l - <span class="hljs-number">1</span>; j &lt;= n; ++i, ++j) &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = i; k &lt;= j; ++k) &#123;</span><br><span class="line">                g[i][j][k] = max(&#123; a[i][j], g[i + <span class="hljs-number">1</span>][j][k], g[i][j - <span class="hljs-number">1</span>][k] &#125;);</span><br><span class="line">                f[i][j] = max(f[i][j], f[i][k - <span class="hljs-number">1</span>] + f[k + <span class="hljs-number">1</span>][j] + g[i][j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld"</span>, f[<span class="hljs-number">1</span>][n]);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3226&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#3226. 「USACO 2019.12 Platinum」Greedy Pie Eaters&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;给定$n$个数中$m$个区间，每个区间有一个权值，要求输出总区间权值最大的一个序列使得每个序列不被之前的序列的并集完全覆盖&lt;/p&gt;
&lt;p&gt;$1 \le n \le 300,1 \le m \le \frac{n(n-1)}{2}$&lt;/p&gt;
&lt;p&gt;感谢@oy的贡献&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="动态规划" scheme="https://tth37.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>形式幂级数与生成函数</title>
    <link href="https://tth37.cn/2020/01/19/algorithm-genfunc/"/>
    <id>https://tth37.cn/2020/01/19/algorithm-genfunc/</id>
    <published>2020-01-19T12:56:59.000Z</published>
    <updated>2020-01-20T09:15:45.461Z</updated>
    
    <content type="html"><![CDATA[<p>这里好像得写点什么……</p><a id="more"></a><h3 id="常用形式幂级数"><a href="#常用形式幂级数" class="headerlink" title="常用形式幂级数"></a>常用形式幂级数</h3><p>$\sum_{n\ge 0}x^n=\frac{1}{1-x}$</p><p>$\sum_{n\ge 1}x^n=\frac{x}{1-x}$</p><p>$\sum_{n\ge 1}nx^n=\frac{x}{(1-x)^2}$</p><p>$\sum_{n\ge 0}\frac{1}{n!}x^n=e^x$</p><p>$\sum_{n\ge 0}\frac{1}{n!}x^n=e^x$</p><h3 id="生成函数"><a href="#生成函数" class="headerlink" title="生成函数"></a>生成函数</h3><h4 id="普通生成函数"><a href="#普通生成函数" class="headerlink" title="普通生成函数"></a>普通生成函数</h4><p>$<br>\sum_{n\ge 0} A_n x^n<br>$</p><p>处理无标号的组合问题。</p><p>例：求节点数为 $n$ 的二叉树（不带标号）的个数。</p><p>令 $F(x)$ 表示该问题的生成函数，考虑一棵二叉树可以划分成根节点和左右子树。所以，$F(x)=xF^2(x)+1$，即左子树与右子树的方案相乘，加上根节点以及空节点的状态。</p><h4 id="指数型生成函数"><a href="#指数型生成函数" class="headerlink" title="指数型生成函数"></a>指数型生成函数</h4><p>$<br>\sum_{n\ge 0} A_n \frac{1}{n!}x^n<br>$</p><p>处理有标号的组合问题。</p><p>原理：考虑将两个有标号的组合对象合并，需要将新标号的一部分分给左侧、再将另一部分分给右侧，恰好为 $n\choose k$ 的形式。处理标号合并问题。</p><p>例：联通图计数。求 $n$ 个带标号的点的联通图数量。</p><p>考虑任意图可以被划分为若干联通图。</p><p>定义联通图的生成函数为 $F(x)$，任意图的生成函数为 $G(x)$。</p><p>注意到联通图的生成函数很好求，$G(x)=\sum_{n\ge 0}\frac{2^{n(n-1)/2}}{n!}x^n$。另一方面，任意图是由联通图构成的，因此 $G(x)=e^{F(x)}$。（任意多个组合在一起的方案数）</p><p>因此，$F(x)=\ln G(x)$，通过多项式操作可以快速求得。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里好像得写点什么……&lt;/p&gt;
    
    </summary>
    
      <category term="算法学习" scheme="https://tth37.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="组合计数" scheme="https://tth37.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/"/>
    
    
      <category term="生成函数" scheme="https://tth37.cn/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
      <category term="多项式" scheme="https://tth37.cn/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>拆分数</title>
    <link href="https://tth37.cn/2020/01/19/algorithm-numdivide/"/>
    <id>https://tth37.cn/2020/01/19/algorithm-numdivide/</id>
    <published>2020-01-19T10:00:06.000Z</published>
    <updated>2020-01-19T12:16:08.051Z</updated>
    
    <content type="html"><![CDATA[<p>拆分数问题：将大小为 $n$ 的正整数拆分为若干无序的正整数的和的方案数。</p><p>感谢 @oy 对本文做出的巨大贡献（即吊锤 tth37）</p><a id="more"></a><h3 id="动态规划一-O-n-2"><a href="#动态规划一-O-n-2" class="headerlink" title="动态规划一 $O(n^2)$"></a>动态规划一 $O(n^2)$</h3><p>记 $f[i][j]$ 为将 $i$ 拆分为若干个大小不超过 $j$ 的整数的和的方案数。</p><p>分类讨论：第一种情况为 <strong>最大的拆分数恰好为 $j$</strong>，第二种为 <strong>最大的拆分数小于等于 $j-1$</strong>。对于第一种情况，可以强制拆分出一个 $j$，也可以考虑为将 $i-j$ 拆分，再强制插入一个 $j$ 所得到的方案数；对于第二种情况，直接套用定义 $f[i][j-1]$ 即可。</p><p>状态转移方程如下：</p><p>$$<br>f[i][j]=f[i-j][j]+f[i][j-1]<br>$$</p><h3 id="动态规划二-O-n-2"><a href="#动态规划二-O-n-2" class="headerlink" title="动态规划二 $O(n^2)$"></a>动态规划二 $O(n^2)$</h3><p>记 $g[i][j]$ 为将 $i$ 拆分为 $j$ 个整数的和的方案数。</p><p>分类讨论：第一种情况为 <strong>最小的拆分数恰好为 $1$</strong>，第二种为 <strong>最小的拆分数大于 $1$</strong>。对于第一种情况，可以强制拆分出一个 $1$，也可以考虑为将 $i-1$ 拆分，再强制插入一个 $1$ 所得到的方案数；对于第二种情况，不难发现在 $g[i-j][j]$ 的方案中 <strong>所有的拆分数都加上 $1$</strong> 后，满足最小的拆分数大于 $1$ 并且所有拆分数之和恰好为 $i$，即为所求。</p><p>状态转移方程如下：</p><p>$$<br>g[i][j]=g[i-1][j-1]+g[i-j][j]<br>$$</p><h3 id="动态规划三-O-n-sqrt-n"><a href="#动态规划三-O-n-sqrt-n" class="headerlink" title="动态规划三 $O(n\sqrt n)$"></a>动态规划三 $O(n\sqrt n)$</h3><blockquote><p>性质：在 $n$ 以下且大小超过 $\sqrt n$ 的数不超过 $\sqrt n$ 个。</p></blockquote><p>考虑将 <em>动态规划一</em> 和 <em>动态规划二</em> 中的思想合并。</p><p>记 $f’[i][j]$ 仍为将 $i$ 拆分为若干个大小不超过 $j$ 的整数的和的方案数。唯一的区别是，我们只需将 $f’$ 数组的第二维循环到 $\sqrt n$ 即可。</p><p>记 $g’[i][j]$ 为将 $i$ 拆分为若干个整数的和的方案数，其中 <strong>大于等于 $\sqrt n$ 的数有 $j$ 个</strong>，对于这类数我们称之为 <strong>大数</strong>。</p><p>对 $g’$ 数组分类讨论：第一种情况为划分出 <strong>最小的大数恰好为 $\sqrt n$</strong>，另一种情况为 <strong>最小的大数大于 $\sqrt n$</strong>。对于第一种情况，可以强制拆分出一个 $\sqrt n$，也可以考虑为将 $i-\sqrt n$ 拆分，再强制插入一个 $\sqrt n$ 所得到的方案数；对于第二种情况，不难发现再 $g’[i][j]$ 的方案中 <strong>所有的大数都加上 $1$</strong> 后，满足最小的 <strong>大数</strong> 大于 $\sqrt n$ 并且所有拆分数之和恰好为 $i$。 </p><p>对于初值，$g[i][0]$ 显然为 $f[i][\sqrt n -1]$。</p><p>状态转移方程如下：</p><p>$$<br>g[i][0]=f[i][\sqrt n-1] \<br>g[i][j]=g[i-\sqrt n][j-1]+g[i-j][j]<br>$$</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拆分数问题：将大小为 $n$ 的正整数拆分为若干无序的正整数的和的方案数。&lt;/p&gt;
&lt;p&gt;感谢 @oy 对本文做出的巨大贡献（即吊锤 tth37）&lt;/p&gt;
    
    </summary>
    
      <category term="算法学习" scheme="https://tth37.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="组合计数" scheme="https://tth37.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/"/>
    
    
      <category term="组合计数" scheme="https://tth37.cn/tags/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/"/>
    
      <category term="动态规划" scheme="https://tth37.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>solution-bzoj-3032</title>
    <link href="https://tth37.cn/2020/01/19/solution-bzoj-3032/"/>
    <id>https://tth37.cn/2020/01/19/solution-bzoj-3032/</id>
    <published>2020-01-19T02:48:21.000Z</published>
    <updated>2020-01-19T02:48:21.713Z</updated>
    
    <content type="html"><![CDATA[<p><a href></a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>题目概括征集中~</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;题目概括征集中~&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>「JSOI2019」神经网络</title>
    <link href="https://tth37.cn/2019/12/18/solution-loj-3102/"/>
    <id>https://tth37.cn/2019/12/18/solution-loj-3102/</id>
    <published>2019-12-18T15:21:41.000Z</published>
    <updated>2020-01-30T10:42:42.588Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/3102" target="_blank" rel="noopener">#3102. 「JSOI2019」神经网络</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>给定$m$棵无根树，总结点数为$k$,对于任意两个属于不同的树的点，在形成的图$G$中连一条边，求$G$中的哈密顿回路数</p><p>$1 \le m \le 300， 1 \le k \le 5 \times 10^3$</p><p>感谢@oy的贡献</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>根据题意，合法的哈密顿回路只能从一个点走到同一棵树上相邻的点，或是其他树上的任意点。因此在每一棵树上经过的路径必定是几条不相交的链。可以先计算<strong>将树拆分成链</strong>的方案数，再将它们合并起来。</p><p>将树拆分成链可以用背包类树形 DP 解决。记 $f[u][i][0/1/2]$ 表示将以 $u$ 为根的子树拆分成 $i$ 条<strong>有向</strong>链的方案数，特殊的，根节点所在的链没有方向。$0$ 表示根节点所在的链长度为 $1$ ，$1$ 表示根节点为所在链的一个端点，$2$ 表示根节点不是其所在链的端点。</p><p>大力树形背包转移即可，略显繁琐，详见代码。</p><p>接下来考虑将若干条链合并为哈密顿回路。考虑简化后的问题：有若干种颜色的小球，每种颜色的小球个数不定。将所有小球摆成一个环，并且不能有颜色相同的小球位于相邻位置。求方案数。</p><p>在本题中，颜色即对应树，小球对应链。构造每一种颜色的生成函数如下：<br>$$<br>\sum_{i=1}^{n}f_i i!\sum_{j=1}^{i}(-1)^{i-j} {i-1\choose j-1}\frac{x^j}{j!}<br>$$<br>其中 $f_i$ 表示将树划分为 $i$ 条链的方案数。对于保证至少有奇数个同色对的方案，需要乘系数 $-1$。将所有生成函数卷起来，每种系数前做一个<strong>环排</strong>统计方案即可。</p><p>至此 JSOI2019 就全部做完了，还是非常吃力的。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">5005</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXM = <span class="hljs-number">305</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> ll MOD = <span class="hljs-number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> v, nxt;</span><br><span class="line">&#125;edge[MAXN &lt;&lt; <span class="hljs-number">1</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> head[MAXN], cnt;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddEdge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">edge[++cnt].v = v;</span><br><span class="line">edge[cnt].nxt = head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m;</span><br><span class="line">ll f[MAXN][MAXN][<span class="hljs-number">3</span>], t[MAXN][MAXN][<span class="hljs-number">3</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> size[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">size[u] = <span class="hljs-number">1</span>;</span><br><span class="line">f[u][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i = edge[i].nxt) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v = edge[i].v;</span><br><span class="line"><span class="hljs-keyword">if</span> (v == fa) <span class="hljs-keyword">continue</span>;</span><br><span class="line">dp(v, u);</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= size[u]; ++i) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= size[v]; ++j) &#123;</span><br><span class="line">ll tmp1 = (f[v][j][<span class="hljs-number">0</span>] + f[v][j][<span class="hljs-number">1</span>] * <span class="hljs-number">2</span> + f[v][j][<span class="hljs-number">2</span>] * <span class="hljs-number">2</span>) % MOD;</span><br><span class="line">ll tmp2 = (f[v][j][<span class="hljs-number">0</span>] + f[v][j][<span class="hljs-number">1</span>]) % MOD;</span><br><span class="line">t[u][i + j][<span class="hljs-number">0</span>] = (t[u][i + j][<span class="hljs-number">0</span>] + tmp1 * f[u][i][<span class="hljs-number">0</span>]) % MOD;</span><br><span class="line">t[u][i + j][<span class="hljs-number">1</span>] = (t[u][i + j][<span class="hljs-number">1</span>] + tmp1 * f[u][i][<span class="hljs-number">1</span>]) % MOD;</span><br><span class="line">t[u][i + j][<span class="hljs-number">2</span>] = (t[u][i + j][<span class="hljs-number">2</span>] + tmp1 * f[u][i][<span class="hljs-number">2</span>]) % MOD;</span><br><span class="line">t[u][i + j - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = (t[u][i + j - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + tmp2 * f[u][i][<span class="hljs-number">0</span>]) % MOD;</span><br><span class="line">t[u][i + j - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = (t[u][i + j - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] + tmp2 * f[u][i][<span class="hljs-number">1</span>]) % MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">size[u] += size[v];</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= size[u]; ++i) &#123;</span><br><span class="line">f[u][i][<span class="hljs-number">0</span>] = t[u][i][<span class="hljs-number">0</span>],</span><br><span class="line">f[u][i][<span class="hljs-number">1</span>] = t[u][i][<span class="hljs-number">1</span>],</span><br><span class="line">f[u][i][<span class="hljs-number">2</span>] = t[u][i][<span class="hljs-number">2</span>],</span><br><span class="line">t[u][i][<span class="hljs-number">0</span>] = t[u][i][<span class="hljs-number">1</span>] = t[u][i][<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll inv[MAXN], fac[MAXN], facinv[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> fac[n] * facinv[m] % MOD * facinv[n - m] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll a[MAXN * MAXM], c[MAXN * MAXM], b[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">fac[<span class="hljs-number">0</span>] = facinv[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">inv[<span class="hljs-number">1</span>] = fac[<span class="hljs-number">1</span>] = facinv[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">5000</span>; ++i) &#123;</span><br><span class="line">inv[i] = (MOD - MOD / i) * inv[MOD % i] % MOD;</span><br><span class="line">fac[i] = fac[i - <span class="hljs-number">1</span>] * <span class="hljs-number">1l</span>l * i % MOD;</span><br><span class="line">facinv[i] = facinv[i - <span class="hljs-number">1</span>] * inv[i] % MOD;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> cas = <span class="hljs-number">1</span>; cas &lt;= m; ++cas) &#123;</span><br><span class="line">cnt = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> u, v;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">AddEdge(u, v), AddEdge(v, u);</span><br><span class="line">&#125;</span><br><span class="line">dp(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">ll tmp = (f[<span class="hljs-number">1</span>][i][<span class="hljs-number">0</span>] + f[<span class="hljs-number">1</span>][i][<span class="hljs-number">1</span>] * <span class="hljs-number">2</span> + f[<span class="hljs-number">1</span>][i][<span class="hljs-number">2</span>] * <span class="hljs-number">2</span>) * fac[i] % MOD;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">b[j] = (b[j] + ((i - j) &amp; <span class="hljs-number">1</span> ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>) * tmp * C(i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>) % MOD * facinv[j] % MOD) % MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; ++i) c[i] = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; ++i) </span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) </span><br><span class="line">c[i + j] = (c[i + j] + a[i] * b[j] % MOD) % MOD;</span><br><span class="line">len += n;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; ++i) a[i] = c[i];</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">head[i] = <span class="hljs-number">0</span>;</span><br><span class="line">b[i] = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">f[i][j][<span class="hljs-number">0</span>] = f[i][j][<span class="hljs-number">1</span>] = f[i][j][<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;</span><br><span class="line">t[i][j][<span class="hljs-number">0</span>] = t[i][j][<span class="hljs-number">1</span>] = t[i][j][<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll ans = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; ++i)</span><br><span class="line">ans = (ans + a[i] * fac[i] % MOD * inv[i] % MOD + MOD) % MOD;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld"</span>, ans);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3102&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#3102. 「JSOI2019」神经网络&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;给定$m$棵无根树，总结点数为$k$,对于任意两个属于不同的树的点，在形成的图$G$中连一条边，求$G$中的哈密顿回路数&lt;/p&gt;
&lt;p&gt;$1 \le m \le 300， 1 \le k \le 5 \times 10^3$&lt;/p&gt;
&lt;p&gt;感谢@oy的贡献&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LibreOJ" scheme="https://tth37.cn/categories/%E9%A2%98%E8%A7%A3/LibreOJ/"/>
    
    
      <category term="组合计数" scheme="https://tth37.cn/tags/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/"/>
    
      <category term="生成函数" scheme="https://tth37.cn/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
      <category term="动态规划" scheme="https://tth37.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="背包" scheme="https://tth37.cn/tags/%E8%83%8C%E5%8C%85/"/>
    
      <category term="树形dp" scheme="https://tth37.cn/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
  </entry>
  
  <entry>
    <title>「JSOI2019」精准预测</title>
    <link href="https://tth37.cn/2019/12/18/solution-loj-3101/"/>
    <id>https://tth37.cn/2019/12/18/solution-loj-3101/</id>
    <published>2019-12-18T15:21:37.000Z</published>
    <updated>2020-01-21T10:09:01.873Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/3101" target="_blank" rel="noopener">#3101. 「JSOI2019」精准预测</a></p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>给定$n$个人，$m$个预测，每个预测从$t$时刻$x$的状态，可以推断$t+1$时刻$y$的状态，求每个人$k$的$\sum_{i = 1}^{n}live(k,i) ，i \neq k$ 其中$live(i,j) = 1$表示$i$和$j$在$T +1$时存活，否则$live(i,j) = 0$</p><p>$1 \le T \le 10^6,1 \le n \le 5 \times 10^4 ,1 \le m \le 10^5$</p><p>感谢@oy的贡献</p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>记 $(t,x,0)$ 表示 $t$ 时刻 $x$ 死亡的状态， $(t,x,1)$ 表示 $t$ 时刻 $x$ 活着的状态。</p><p>$\text{2-SAT}$ 建图：对于限制条件 $0$，连边 $(t,x,1)\rightarrow(t+1,y,0)$ 和 $(t+1,y,1)\rightarrow(t,x,0)$；对于限制条件 $2$，连边 $(t,x,1)\rightarrow(t,y,0)$ 和 $(t,y,1)\rightarrow(t,x,0)$。此外还需要连边 $(t,x,0)\rightarrow(t+1,x,0)$ 和 $(t+1,x,1)\rightarrow(t,x,1)$。</p><p>建完图后即可求出每一个人在 $T+1$ 时刻活着时，有多少人在同一时刻必然死亡。其中有部分人自己产生矛盾，即可以从 $(x,T+1,1)$ 推导出 $(x,T+1,0)$，那么这部分人也必然死亡。</p><p>不难发现建出的图为 $\text{DAG}$。考虑只保留需要的 $O(m+n)$ 个点即可。</p><p>在求解时只能做到 $\text{bitset}$ 复杂度，可以考虑将 $\text{bitset}$ 值域分段操作。</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>不要看错题！</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXM = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXT = MAXN * <span class="hljs-number">4</span> + MAXM * <span class="hljs-number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Type</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> t, p;</span><br><span class="line">    Type(<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>) &#123;t = x, p = y;&#125;</span><br><span class="line">    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> Type&amp; rhs) <span class="hljs-keyword">const</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (p != rhs.p) <span class="hljs-keyword">return</span> p &lt; rhs.p;</span><br><span class="line">        <span class="hljs-keyword">return</span> t &lt; rhs.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> T, n, m;</span><br><span class="line"><span class="hljs-built_in">map</span>&lt;Type, <span class="hljs-keyword">int</span>&gt; mp;</span><br><span class="line"><span class="hljs-keyword">int</span> cnt;</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; G[MAXT];</span><br><span class="line"><span class="hljs-built_in">bitset</span>&lt;16668&gt; s[MAXT], delta;</span><br><span class="line"><span class="hljs-keyword">bool</span> vis[MAXT];</span><br><span class="line"><span class="hljs-keyword">int</span> ans[MAXN], delt;</span><br><span class="line"><span class="hljs-keyword">bool</span> noans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddEdge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    G[u].push_back(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> l, r;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">return</span>;</span><br><span class="line">    vis[u] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (u &lt;= <span class="hljs-number">2</span> * n &amp;&amp; (u &amp; <span class="hljs-number">1</span>)) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> p = (u + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (l &lt;= p &amp;&amp; p &lt;= r)</span><br><span class="line">            s[u][p - l + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = G[u].begin(); it != G[u].end(); it++) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = *it;</span><br><span class="line">        dfs(v);</span><br><span class="line">        s[u] |= s[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;T, &amp;n, &amp;m);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        mp[Type(T + <span class="hljs-number">1</span>, i)] = ++cnt, ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> c, t, x, y;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d%d"</span>, &amp;c, &amp;t, &amp;x, &amp;y);</span><br><span class="line">        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (mp[Type(t, x)] == <span class="hljs-number">0</span>)</span><br><span class="line">                mp[Type(t, x)] = ++cnt, ++cnt;</span><br><span class="line">            <span class="hljs-keyword">if</span> (mp[Type(t + <span class="hljs-number">1</span>, y)] == <span class="hljs-number">0</span>)</span><br><span class="line">                mp[Type(t + <span class="hljs-number">1</span>, y)] = ++cnt, ++cnt;</span><br><span class="line">            AddEdge(mp[Type(t, x)], mp[Type(t + <span class="hljs-number">1</span>, y)]),</span><br><span class="line">            AddEdge(mp[Type(t + <span class="hljs-number">1</span>, y)] + <span class="hljs-number">1</span>, mp[Type(t, x)] + <span class="hljs-number">1</span>);    </span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (mp[Type(t, x)] == <span class="hljs-number">0</span>)</span><br><span class="line">                mp[Type(t, x)] = ++cnt, ++cnt;</span><br><span class="line">            <span class="hljs-keyword">if</span> (mp[Type(t, y)] == <span class="hljs-number">0</span>)</span><br><span class="line">                mp[Type(t, y)] = ++cnt, ++cnt;</span><br><span class="line">            AddEdge(mp[Type(t, x)] + <span class="hljs-number">1</span>, mp[Type(t, y)]),</span><br><span class="line">            AddEdge(mp[Type(t, y)] + <span class="hljs-number">1</span>, mp[Type(t, x)]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> lt = <span class="hljs-number">0</span>, lp = <span class="hljs-number">0</span>, lc = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : mp) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> t = it.first.t, p = it.first.p, c = it.second;</span><br><span class="line">        <span class="hljs-keyword">if</span> (lt) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (lp == p) &#123;</span><br><span class="line">            AddEdge(lc, c), AddEdge(c + <span class="hljs-number">1</span>, lc + <span class="hljs-number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        lt = t, lp = p, lc = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (l = <span class="hljs-number">1</span>; l &lt;= n; l += <span class="hljs-number">16667</span>) &#123;</span><br><span class="line">        r = min(n, l + <span class="hljs-number">16666</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">            s[i].reset();</span><br><span class="line">        delta.reset();</span><br><span class="line">        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            dfs(i &lt;&lt; <span class="hljs-number">1</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (s[i &lt;&lt; <span class="hljs-number">1</span>][i - l + <span class="hljs-number">1</span>]) &#123;</span><br><span class="line">                noans[i] = <span class="hljs-number">1</span>;</span><br><span class="line">                delta[i - l + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            s[i &lt;&lt; <span class="hljs-number">1</span>] |= delta;</span><br><span class="line">            ans[i] += r - l + <span class="hljs-number">1</span> - s[i &lt;&lt; <span class="hljs-number">1</span>].count();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, noans[i] ? <span class="hljs-number">0</span> : ans[i] - <span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3101&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#3101. 「JSOI2019」精准预测&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summarize&quot;&gt;&lt;a href=&quot;#Summarize&quot; class=&quot;headerlink&quot; title=&quot;Summarize&quot;&gt;&lt;/a&gt;Summarize&lt;/h3&gt;&lt;p&gt;给定$n$个人，$m$个预测，每个预测从$t$时刻$x$的状态，可以推断$t+1$时刻$y$的状态，求每个人$k$的$\sum_{i = 1}^{n}live(k,i) ，i \neq k$ 其中$live(i,j) = 1$表示$i$和$j$在$T +1$时存活，否则$live(i,j) = 0$&lt;/p&gt;
&lt;p&gt;$1 \le T \le 10^6,1 \le n \le 5 \times 10^4 ,1 \le m \le 10^5$&lt;/p&gt;
&lt;p&gt;感谢@oy的贡献&lt;/p&gt;
    
    </summary>
    
    
      <category term="2-SAT" scheme="https://tth37.cn/tags/2-SAT/"/>
    
      <category term="bitset" scheme="https://tth37.cn/tags/bitset/"/>
    
  </entry>
  
</feed>
